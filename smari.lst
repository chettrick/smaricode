Z80-Assembler		Release 1.6				Page 1
Source file: smari.asm
Title:       

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                       1      1 	PAGE	3000
                       2      2 
0000                   3      3 KIN	EQU	00H		;8255 I port A
0001                   4      4 SEG7	EQU	01H		;8255 I port B
0002                   5      5 DIGIT	EQU	02H		;8255 I port C
0003                   6      6 P8255	EQU	03H		;8255 I control port
00a5                   7      7 PWCODE	EQU	0A5H		;Power-up code
                       8      8 ;ZSUM	EQU	71H		;This will make the sum of all
                       9      9 				;monitor codes to be zero
                      10     10 
                      11     11 ; The following EQUATEs are used for timing.
                      12     12 ; Their values depend on the CPU clock frequency.
                      13     13 ; (In this version, the crystal frequency is 1.79 MHz.)
                      14     14 
00c9                  15     15 COLDEL	EQU	201		;Column delay time for routine
                      16     16 				;SCAN and SCAN1
0041                  17     17 F1KHZ	EQU	65		;Delay count for 1 kHz square wave,
                      18     18 				;used by routine TONE1K.
001f                  19     19 F2KHZ	EQU	31		;Delay count for 2 kHz square wave,
                      20     20 				;used by routine TONE2K.
002a                  21     21 MPERIOD EQU	42		;1 kHz and 2 kHz threshold, used by
                      22     22 				;tape input routine PERIOD.
                      23     23 
                      24     24 ; The following EQUATEs are for tape modulation.
                      25     25 ; If the quality of tape recorder is good, the user may
                      26     26 ; change '4 4 2 8' to '2 2 1 4'. This will double
                      27     27 ; the tape data rate.
                      28     28 ; If the quality of tape recorder is poor, the user may
                      29     29 ; change '4 4 2 8' to '6 6 3 12'. This will improve
                      30     30 ; error performance but slow down the data rate.
                      31     31 ; Although the data format is changed the tape is still
                      32     32 ; compatible in each case, because only the ratio is
                      33     33 ; detected in the Tape-read.
                      34     34 
0004                  35     35 ONE_1K	EQU	4
0004                  36     36 ONE_2K	EQU	4
0002                  37     37 ZERO_1K	EQU	2
0008                  38     38 ZERO_2K	EQU	8
                      39     39 
                      40     40 ;***********************************************************
                      41     41 ; I/O port assignment: (8255 I)
                      42     42 
                      43     43 ; port A (address 00H):
                      44     44 ;	bit 7	-- I2C bus serial data bi-directional
                      45     45 ;	bit 6	-- 'USER KEY' on keyboard, active low
                      46     46 ;	bit 5-0	-- row of keyboard matrix input, active low
                      47     47 ; port B (address 01H): 7 segments of LED, active high
                      48     48 ;	bit 7	-- segment d
                      49     49 ;	bit 6	-- decimal point
                      50     50 ;	bit 5	-- segment c
                      51     51 ;	bit 4	-- segment b
                      52     52 ;	bit 3	-- segment a
                      53     53 ;	bit 2	-- segment f
                      54     54 ;	bit 1	-- segment g
                      55     55 ;	bit 0	-- segment e
                      56     56 ; port C (address 02H):
                      57     57 ;	bit 7	-- I2C bus serial clock output
                      58     58 ;	bit 6	-- BREAK enable. NMI (CPU pin 17) will go to
                      59     59 ;			low 5 M1's (machine cycle one) after this
                      60     60 ;			bit goes to low. (This bit is connected to
                      61     61 ;			the reset input of external counter.)
                      62     62 ;	bit 5-0	-- colums of keyboard and the display matrix,
                      63     63 ;			active high. Bit 5 is the leftmost column.
                      64     64 
                      65     65 ;***********************************************************
                      66     66 	ORG	00H		;Required to make sure assembler 
                      67     67 RST00				;doesn't skip over address 0000H
                      68     68 
                      69     69 ; There are two cases that will generate a RESET signal:
                      70     70 ;	(i)  power-up
                      71     71 ;	(ii) 'RS' key pressed
                      72     72 ; In both cases, the following actions will be taken:
                      73     73 ;   a) disable interrupt, set interrupt mode to 0
                      74     74 ;      set I register to 00 and start execution
                      75     75 ;      at address 0000 (by Z80 CPU itself).
                      76     76 ;   b) initialize user's PC to the lowest RAM address;
                      77     77 ;   c) set user's SP to FF9FH;
                      78     78 ;   d) set user's I register to 00 and disable user's
                      79     79 ;      interrupt flip-flop;
                      80     80 ; In addition subroutine INI will be called on power-up
                      81     81 ; reset, which has the following effects:
                      82     82 ;   e) disable BREAK POINT;
                      83     83 ;   f) set the contents of location 0FFEEH and 0FFEFH to 66
                      84     84 ;      and 00 respectively. This will make instruction RST
                      85     85 ;      38H (opcode FF) have the same effect as BREAK.
                      86     86 ; Memory location POWERUP is used to distinguish power-up
                      87     87 ; from RS-key.  (POWERUP) contains random data when
                      88     88 ; power-up and contains PWCODE (0A5H) thereafter.
                      89     89 
0000  06 00           90     90 	LD	B, 0
0002  10 fe           91     91 	DJNZ	$		;Power-up delay
                      92     92 
                      93     93 ; Initialize 8255 to mode 0 with port A input,
                      94     94 ; port B and C output. The control word is 90H.
                      95     95 
0004  3e 90           96     96 	LD	A, 10010000B
0006  d3 03           97     97 	OUT	(P8255), A
                      98     98 
                      99     99 ; When the control word is sent to 8255, all output
                     100    100 ; ports are cleared to 0.  It is necessary to disable
                     101    101 ; BREAK and deactivate all I/O by sending 0C0H to
                     102    102 ; port C.
                     103    103 
0008  3e c0          104    104 	LD	A, 0C0H
000a  d3 02          105    105 	OUT	(DIGIT), A
000c  31 af ff       106    106 	LD	SP, SYSSTK	;initial system stack
                     107    107 
                     108    108 ; If the content of location POWERUP is not equal to
                     109    109 ; PWCODE, call subroutine INI. Continue otherwise.
                     110    110 
000f  3a e5 ff       111    111 	LD	A, (POWERUP)
0012  fe a5          112    112 	CP	PWCODE
0014  c4 c1 03       113    113 	CALL	NZ, INI
                     114    114 
                     115    115 ; Determine the lowest RAM address by checking whether
                     116    116 ; address 1000H is RAM.  If yes, set user's PC to this
                     117    117 ; value.  Otherwise, set it to 8000H.
                     118    118 
0017  21 00 10       119    119 	LD	HL, 1000H
001a  cd f6 05       120    120 	CALL	RAMCHK
001d  28 02          121    121 	JR	Z, PREPC
001f  26 80          122    122 	LD	H, 80H
                     123    123 	
0021  22 dc ff       124    124 PREPC	LD	(USERPC), HL
0024  26 00          125    125 	LD	H, 0
                     126    126 
                     127    127 ; Address 28H and 30H are reserved for BREAK (RST 28H)
                     128    128 ; and software BREAK (RST 30H).  Skip these area, monitor
                     129    129 ; program resumes at RESET1.
                     130    130 
0026  18 0a          131    131 	JR	RESET1
                     132    132 ;
                     133    133 ;***********************************************************
                     134    134 	ORG	28H
                     135    135 RST28
                     136    136 
                     137    137 ; Address 28H is the entry point of BREAK trap.
                     138    138 ; If a location is set as a BREAK point, the monitor
                     139    139 ; will change the content of this location to C7 (RST 28H)
                     140    140 ; before transfering control to user's program.
                     141    141 ; In execution of user's program, a trap will occur if
                     142    142 ; user's PC passes this location.  The monitor then takes
                     143    143 ; over control and the content of BREAK address
                     144    144 ; will be restored.  Monitor takes care of everything
                     145    145 ; and makes the whole mechanism transparant to the user.
                     146    146 ; The return address pushed onto stack is the PC after
                     147    147 ; executing RST 28H.  The original break address should
                     148    148 ; be one less than that.  The following 3 instructions
                     149    149 ; decrease the content of (SP) by one without changing
                     150    150 ; HL.
                     151    151 
0028  e3             152    152 	EX	(SP), HL
0029  2b             153    153 	DEC	HL
002a  e3             154    154 	EX	(SP), HL
002b  22 e8 ff       155    155 	LD	(HLTEMP), HL
002e  18 0e          156    156 	JR	CONT28
                     157    157 ;
                     158    158 ;***********************************************************
                     159    159 	ORG	30H
                     160    160 RST30
                     161    161 
                     162    162 ; Instruction RST 30H (opcode F7) is usually used as:
                     163    163 ;   i) Software break;
                     164    164 ;  ii) Terminator of user's program.
                     165    165 ; The effect of this instruction is to save all user's
                     166    166 ; registers and return to monitor.
                     167    167 
0030  18 34          168    168 	JR	NMI
                     169    169 
                     170    170 ;***********************************************************
                     171    171 ; This is a part of reset routine.  Address 0028H and
                     172    172 ; 0030H are reserved for break point.  Reset routine
                     173    173 ; skips this area and resumes here.
                     174    174 ;
0032  22 d2 ff       175    175 RESET1	LD	(USERIF), HL	;set user's I register and
                     176    176 				;interrupt flip flop to 0
0035  18 1d          177    177 	JR	RESET2		;monitor resumes at RESET2
                     178    178 
                     179    179 ;***********************************************************
                     180    180 
                     181    181 ; The following byte makes the sum of the monitor
                     182    182 ; code in ROM zero. ROMTEST is a self-checking routine.
                     183    183 ; This routine requires the sum of ROM to be zero.
                     184    184 
                     185    185 ;	DEFB	ZSUM		;XXX - Calculate checksum.
                     186    186 ;
                     187    187 ;***********************************************************
                     188    188 	ORG	38H
                     189    189 RST38
                     190    190 
                     191    191 ; Entry point of RST 38H (opcode FF) or mode 1 interrupt.
                     192    192 ; Fetch the address stored in location 0FFEEH and 0FFEFH,
                     193    193 ; then jump to this address.  Initially, 0FFEEH and 0FFEFH
                     194    194 ; are set to 0066H.  So RST 38 will have the same effect
                     195    195 ; as software break.  By changing the content of 0FFEEH
                     196    196 ; and 0FFEFH, the user can define his or her own service
                     197    197 ; routine.
                     198    198 ; The next three instructions push the contents of 0FFEEH
                     199    199 ; and 0FFEFH to stack without changing any registers.
                     200    200 
0038  e5             201    201 	PUSH	HL
0039  2a ee ff       202    202 	LD	HL, (IM1AD)
003c  e3             203    203 	EX	(SP), HL
                     204    204 
                     205    205 ; The top of the stack is now the address of user
                     206    206 ; defined service routine.  Pop out this address then
                     207    207 ; branch to it.
                     208    208 
003d  c9             209    209 	RET
                     210    210 ;
                     211    211 ;***********************************************************
                     212    212 CONT28:
                     213    213 ; This is a part of break service routine.  It continues
                     214    214 ; the program at RST28.
                     215    215 
003e  32 e7 ff       216    216 	LD	(ATEMP), A
                     217    217 
                     218    218 ; The monitor has changed the content of user's
                     219    219 ; program at break address.  The next 3 instructions
                     220    220 ; restore the destroyed content.  BRAD contains the
                     221    221 ; break address, BRDA contains the original data at
                     222    222 ; break address.
                     223    223 
0041  2a e0 ff       224    224 	LD	HL, (BRAD)
0044  3a e2 ff       225    225 	LD	A, (BRDA)
0047  77             226    226 	LD	(HL), A
                     227    227 
                     228    228 ; Send break enable signal to hardware counter.
                     229    229 ; A nonmaskable interrupt will be issued at the 5th M1's.
                     230    230 
0048  3e 80          231    231 	LD	A, 10000000B
004a  d3 02          232    232 	OUT	(DIGIT), A
004c  3a e7 ff       233    233 	LD	A, (ATEMP)	;1st M1
004f  2a e8 ff       234    234 	LD	HL, (HLTEMP)	;2nd M1
0052  00             235    235 	NOP			;3rd M1
0053  c9             236    236 	RET			;4th M1
                     237    237 
                     238    238 ; Return to user's program.  Execute the instruction
                     239    239 ; at break address.  After finishing one instruction,
                     240    240 ; a nonmaskable interrupt happens and control is
                     241    241 ; transferred to the monitor again.
                     242    242 ;
                     243    243 RESET2:
0054  21 9f ff       244    244 	LD	HL, USERSTK
0057  22 d0 ff       245    245 	LD	(USERSP), HL	;set user's SP
005a  af             246    246 	XOR	A
005b  32 e6 ff       247    247 	LD	(TEST), A
                     248    248 
                     249    249 ; TEST is a flag for monitor's own use.  Illegal key-in
                     250    250 ; blanking (bit 7 of TEST) and automatic leading zero
                     251    251 ; (bit 0) use this flag.  Clear it here.
                     252    252 
005e  dd 21 9f 07    253    253 	LD	IX, HELLO
                     254    254 
                     255    255 ; Address 0066H is the address for nonmaskable interrupt
                     256    256 ; Skip this area, monitor resumes at SETST0
                     257    257 
0062  c3 d0 00       258    258 	JP	SETST0
                     259    259 
                     260    260 ;***********************************************************
                     261    261 	ORG	66H
                     262    262 NMI
                     263    263 
                     264    264 ; Entry point of nonmaskable interrupt.  NMI will occur
                     265    265 ; when MONI key is pressed or when user's program is
                     266    266 ; breaked.  The service routine which starts here saves all
                     267    267 ; user's registers and status.  It also checks the validity
                     268    268 ; of user's SP.
                     269    269 
0066  32 e7 ff       270    270 	LD	(ATEMP), A	;save A register
0069  3e 90          271    271 	LD	A, 10010000B
006b  d3 03          272    272 	OUT	(P8255), A	;set 8255 to mode 0.
                     273    273 				;Port A input; B,C output.
006d  3e c0          274    274 	LD	A, 0C0H
006f  d3 02          275    275 	OUT	(DIGIT), A	;disable break and LED's
0071  3a e7 ff       276    276 	LD	A, (ATEMP)	;restore A register
0074  22 e8 ff       277    277 RGSAVE	LD	(HLTEMP), HL	;save register HL
0077  e1             278    278 	POP	HL		;get return address from stack
0078  22 de ff       279    279 	LD	(ADSAVE), HL	;Save return address into
                     280    280 				;ADSAVE.
007b  22 dc ff       281    281 	LD	(USERPC), HL	;Set user's PC to return
                     282    282 				;address.
007e  2a e8 ff       283    283 	LD	HL, (HLTEMP)	;restore HL register
0081  ed 73 d0 ff    284    284 	LD	(USERSP), SP	;set user's SP to current SP
0085  31 d0 ff       285    285 	LD	SP, USERIY+2	;save other registers by
0088  fd e5          286    286 	PUSH	IY		;continously pushing them
008a  dd e5          287    287 	PUSH	IX		;onto stack
008c  d9             288    288 	EXX
008d  e5             289    289 	PUSH	HL
008e  d5             290    290 	PUSH	DE
008f  c5             291    291 	PUSH	BC
0090  d9             292    292 	EXX
0091  08             293    293 	EX	AF,AF'
0092  f5             294    294 	PUSH	AF
0093  08             295    295 	EX	AF,AF'
0094  e5             296    296 	PUSH	HL
0095  d5             297    297 	PUSH	DE
0096  c5             298    298 	PUSH	BC
0097  f5             299    299 	PUSH	AF
                     300    300 
                     301    301 ; The next two instructions save I register.
                     302    302 ; The interrupt flip-flop (IFF2) is copied into
                     303    303 ; parity flag (P/V) by instruction LD  A, I.
                     304    304 ; The interrupt status (enabled or disabled)
                     305    305 ; can be determined by testing parity flag.
                     306    306 
0098  ed 57          307    307 	LD	A, I
009a  32 d3 ff       308    308 	LD	(USERIF+1), A
                     309    309 
                     310    310 ; The next four instructions save IFF2 into
                     311    311 ; user's IFF.
                     312    312 
009d  3e 00          313    313 	LD	A, 0
009f  e2 a4 00       314    314 	JP	PO, SETIF	;PO -- P/V = 0
00a2  3e 01          315    315 	LD	A, 1
00a4  32 d2 ff       316    316 SETIF	LD	(USERIF), A
00a7  31 af ff       317    317 	LD	SP, SYSSTK	;set SP to system stack
                     318    318 
                     319    319 ; The next 8 instructions check user's SP.
                     320    320 ; If the user's SP points to a location not
                     321    321 ; in RAM, display ERR-SP.
                     322    322 
00aa  2a d0 ff       323    323 	LD	HL, (USERSP)
00ad  dd 21 b5 07    324    324 	LD	IX, ERR_SP
00b1  2b             325    325 	DEC	HL
00b2  cd f6 05       326    326 	CALL	RAMCHK
00b5  20 19          327    327 	JR	NZ, SETST0
00b7  2b             328    328 	DEC	HL
00b8  cd f6 05       329    329 	CALL	RAMCHK
00bb  20 13          330    330 	JR	NZ, SETST0
                     331    331 
                     332    332 ; If the user's stack and system stack are
                     333    333 ; overlayed, display SYS-SP.  This checking
                     334    334 ; is done by the following instructions.
                     335    335 
00bd  dd 21 af 07    336    336 	LD	IX, SYS_SP
00c1  00             337    337 	NOP
00c2  00             338    338 	NOP
                     339    339 
00c3  11 62 00       340    340 	LD	DE, -USERSTK-1	;XXX - Should be +1, not -1.
00c6  19             341    341 	ADD	HL, DE
00c7  38 07          342    342 	JR	C, SETST0
00c9  dd 21 b6 ff    343    343 	LD	IX, DISPBF
00cd  37             344    344 	SCF			;set carryflag to indicate
                     345    345 				;the user's SP is legal.
00ce  18 04          346    346 	JR	BRRST0
                     347    347 
                     348    348 ;
                     349    349 SETST0:
                     350    350 ; STATE is a memory location containing the monitor status.
                     351    351 ; It will be described in detail later.  STATE 0 stands
                     352    352 ; for fixed display pattern.  The initial pattern 'HELLO '
                     353    353 ; or message 'SYS-SP'... belong to this category.  The next
                     354    354 ; two instructions set STATE to zero.
                     355    355 
00d0  af             356    356 	XOR	A		;set A to 0, also clear Carry flag
00d1  32 e4 ff       357    357 	LD	(STATE), A
00d4  3a e2 ff       358    358 BRRST0	LD	A, (BRDA)	;restore the data at
                     359    359 				;break address
00d7  2a e0 ff       360    360 	LD	HL, (BRAD)
00da  77             361    361 	LD	(HL), A
                     362    362 
                     363    363 ; If the user's SP is legal (carry set), display user's
                     364    364 ; PC and the content at PC. Otherwise, display fixed
                     365    365 ; message (ERR-SP or SYS-SP or HELLO ).
                     366    366 
00db  dc 0b 04       367    367 	CALL	C, MEMDP2
                     368    368 ;
                     369    369 ;
                     370    370 ;***********************************************************
                     371    371 ; Scan the display and keyboard. When a key is detected,
                     372    372 ; take proper action  according to the key pressed.
                     373    373 
                     374    374 MAIN:
00de  31 af ff       375    375 	LD	SP, SYSSTK	;Initialize system stack
00e1  cd fe 05       376    376 	CALL	SCAN		;Scan display and input keys.
                     377    377 				;Routine SCAN will not return until
                     378    378 				;any key is pressed.
00e4  cd cb 06       379    379 	CALL	BEEP		;After a key is detected, there
                     380    380 				;will be accompanied with a beep
                     381    381 				;sound.
00e7  18 f5          382    382 	JR	MAIN		;Back to MAIN, get more keys and
                     383    383 				;execute them.
                     384    384 ;
                     385    385 ;
                     386    386 ;***********************************************************
                     387    387 KEYEXEC:
                     388    388 
                     389    389 ; Input key dispatch routine.
                     390    390 ; This routine uses the key code returned by subroutine
                     391    391 ; SCAN, which is one byte stored in A register.  The
                     392    392 ; range of key codes is from 00 to 1FH.
                     393    393 
                     394    394 ;  (i) key code = 00 - 0FH :
                     395    395 ;      These are hexadecimal keys.  Branch to routine KHEX.
                     396    396 
00e9  fe 10          397    397 	CP	10H
00eb  38 24          398    398 	JR	C, KHEX
                     399    399 
                     400    400 ; If the key entered is not hexadecimal, it must be a
                     401    401 ; function or subfunction key.  This means the previous
                     402    402 ; numeric entry has terminated.  Bit 0 of TEST flag
                     403    403 ; must be set at the beginning of a new numeric entry.
                     404    404 ; This is done by the next two instructions.  (If bit 0
                     405    405 ; of TEST is set, the data buffer will be automatically
                     406    406 ; cleared when a hexadecimal key is entered.)
                     407    407 
00ed  21 e6 ff       408    408 	LD	HL, TEST
00f0  cb c6          409    409 	SET	0, (HL)
                     410    410 
                     411    411 ; (ii) key code = 10H - 17H :
                     412    412 ;      (+, -, GO, STEP, DATA, SBR, INS, DEL)
                     413    413 ;      There is no state corresponding to these keys.
                     414    414 ;      The response of them depends on the current
                     415    415 ;      state and minor-state. (E.g., the response of '+'
                     416    416 ;      key depends on the current function.  It is illegal
                     417    417 ;      when the display is 'HELLO ', but is legal when the
                     418    418 ;      display is of 'address-data' form.)  In this
                     419    419 ;      documentation, they are named 'sub-function key'.
                     420    420 ;      They are all branched by table KSUBFUN and routine
                     421    421 ;      BRANCH.
                     422    422 
00f2  d6 10          423    423 	SUB	10H
00f4  fe 08          424    424 	CP	8
00f6  21 37 07       425    425 	LD	HL, KSUBFUN
00f9  da b0 03       426    426 	JP	C, BRANCH
                     427    427 
                     428    428 ;(iii) key code = 18H - 1FH
                     429    429 ;      (PC, Addr, CBr, Reg, Move, Rela, USB WR, USB RD)
                     430    430 ;      These keys are named 'function key'. They are
                     431    431 ;      acceptable at any time.  When they are hit, the
                     432    432 ;      monitor will unconditionally enter a new state.
                     433    433 ;      STMINOR contains the minor-state, which is required
                     434    434 ;      to dispatch some sub-function keys (e.g. +, -).
                     435    435 
00fc  dd 21 b6 ff    436    436 	LD	IX, DISPBF
0100  d6 08          437    437 	SUB	8
0102  21 e4 ff       438    438 	LD	HL, STATE
0105  77             439    439 	LD	(HL), A		;set STATE to key-code minus 18H
                     440    440 				;The STATE is updated here.  It will
                     441    441 				;be modified later by local service
                     442    442 				;routines if the function-key is PC,
                     443    443 				;Addr or CBr.  For other function-
                     444    444 				;keys, STATE will not be modified
                     445    445 				;later.
0106  21 e3 ff       446    446 	LD	HL, STMINOR
0109  36 00          447    447 	LD	(HL), 0		;set STMINOR to 0
010b  21 41 07       448    448 	LD	HL, KFUN	;KFUN is the base of the branch table
                     449    449 				;the offset is stored in A
010e  c3 b0 03       450    450 	JP	BRANCH
                     451    451 
                     452    452 ;
                     453    453 ;***********************************************************
                     454    454 ;STATE:
                     455    455 ;   0=FIX	;Display fixed pattern, e.g. 'HELLO '.
                     456    456 ;   1=AD	;The hex key entered is interpreted as
                     457    457 		;memory addres.
                     458    458 ;   2=DA	;The hex key entered is interpreted as
                     459    459 		;memory data.
                     460    460 ;   3=RGFIX	;Display fixed pattern: 'Reg-  ' and
                     461    461 		;expect register name to be entered.
                     462    462 ;   4=MV	;Expect parameters for 'Move' function.
                     463    463 ;   5=RL	;Expect parameters for 'Rela' function.
                     464    464 ;   6=WT	;Expect parameters for 'USBWR' function.
                     465    465 ;   7=RT	;Expect parameters for 'USBRD' function.
                     466    466 ;   8=RGAD	;Hex-key entered will be interpreted as
                     467    467 		;address name for registers.
                     468    468 ;   9=RGDA	;Hex-key entered will be interpreted as
                     469    469 		;data for registers.
                     470    470 ;
                     471    471 ; Subroutine naming conventions:
                     472    472 ;    (i) K???? -- K stands for key, ???? is the key name,
                     473    473 ;                 e.g. KINS corresponds to key 'INS'.  Each
                     474    474 ;                 time a key ???? is entered, the routine
                     475    475 ;                 with name K???? will be executed.  All of
                     476    476 ;                 them are branched by table KFUN or KSUBFUN
                     477    477 ;   (ii) H???? -- H stands for hexadecimal, ???? is the
                     478    478 ;                 current STATE.  For example, routine
                     479    479 ;                 HDA will be executed if the entered
                     480    480 ;                 key is hexadecimal and STATE is DA now.
                     481    481 ;                 These routines are branched by table
                     482    482 ;                 HTAB.
                     483    483 ;  (iii) I???? -- I stands for increment (+ key), ???? is
                     484    484 ;                 the current STATE.  E.g. IMV will be
                     485    485 ;                 executed when STATE is MV and '+' key
                     486    486 ;                 is entered.  These routines are branched
                     487    487 ;                 by table ITAB
                     488    488 ;   (iv) D???? -- D stands for decrement (- key), ???? is
                     489    489 ;                 the current STATE.  These routines are
                     490    490 ;                 branched using table DTAB.
                     491    491 ;    (v) G???? -- G stands for 'GO' key, ???? is the current
                     492    492 ;                 STATE.  These routines are branched using
                     493    493 ;                 table GTAB.
                     494    494 
                     495    495 ;***********************************************************
                     496    496 
                     497    497 ; Hexadecimal, '+', '-' and 'GO' keys may be entered after
                     498    498 ; different function keys.  The monitor uses branch tables
                     499    499 ; and STATE to determine the current function and branch
                     500    500 ; to the proper entry point.
                     501    501 ;
                     502    502 KHEX:
                     503    503 ;Executed when hexadecimal keys are pressed.
                     504    504 ;Use HTAB and STATE for further branch.
                     505    505 
0111  4f             506    506 	LD	C, A		;save A register in C
                     507    507 				;which is the hex key-code.
0112  21 4b 07       508    508 	LD	HL, HTAB
0115  3a e4 ff       509    509 BR1	LD	A, (STATE)
0118  c3 b0 03       510    510 	JP	BRANCH
                     511    511 
                     512    512 ;
                     513    513 KINC:
                     514    514 ;Branched by KSUBFUN table.
                     515    515 ;Executed when '+' key is pressed.
                     516    516 ;Use ITAB and STATE for further branch.
                     517    517 ;STATE will be stored in A register at BR1.
                     518    518 
011b  21 57 07       519    519 	LD	HL, ITAB
011e  18 f5          520    520 	JR	BR1
                     521    521 
                     522    522 ;
                     523    523 KDEC:
                     524    524 ;Branched by KSUBFUN table.
                     525    525 ;Executed when '-' key is pressed.
                     526    526 ;Use DTAB and STATE for further branch.
                     527    527 ;STATE will be stored in A register at BR1.
                     528    528 
0120  21 63 07       529    529 	LD	HL, DTAB
0123  18 f0          530    530 	JR	BR1
                     531    531 
                     532    532 ;
                     533    533 KGO:
                     534    534 ;Branched by KSUBFUN table.
                     535    535 ;Executed when 'GO' key is pressed.
                     536    536 ;Use DTAB and STATE for further branch.
                     537    537 ;STATE will be stored in A register at BR1.
                     538    538 
0125  21 6f 07       539    539 	LD	HL, GTAB
0128  18 eb          540    540 	JR	BR1
                     541    541 
                     542    542 ;
                     543    543 KSTEP:
                     544    544 ;Branched by table KSUBFUN.
                     545    545 ;Executed when 'STEP' key is pressed.
                     546    546 
012a  cd e5 03       547    547 	CALL	TESTM		;Check if the left 4 digits
                     548    548 				;of the display are a memory address.
012d  c2 bb 03       549    549 	JP	NZ, IGNORE	;If not, disable all LED's as
                     550    550 				;a warning to the user.  This
                     551    551 				;is done by routine IGNORE.
                     552    552 
0130  3e 80          553    553 	LD	A, 10000000B	;This data will be output
                     554    554 				;to port B to enable
                     555    555 				;BREAK.  It is done by
                     556    556 				;routine PREOUT.
0132  c3 a3 02       557    557 	JP	PREOUT
                     558    558 
                     559    559 ;
                     560    560 KDATA:
                     561    561 ;Branched by table KSUBFUN.
                     562    562 ;Executed when 'DATA' key is pressed.
                     563    563 
0135  cd e5 03       564    564 	CALL	TESTM		;Check if the left 4 digits
                     565    565 				;of the display are a memory address.
0138  20 04          566    566 	JR	NZ, TESTRG	;If not, branch to TESTRG
                     567    567 				;to check whether the display
                     568    568 				;is register or not.
013a  cd 0b 04       569    569 	CALL	MEMDP2		;If yes, display the data of
                     570    570 				;that address and set STATE
                     571    571 				;to 2.
013d  c9             572    572 	RET
013e  fe 08          573    573 TESTRG	CP	8		;check if the status is 8 or 9
                     574    574 				;(RGAD or RGDA).
0140  da bb 03       575    575 	JP	C, IGNORE	;If not, ignore this key and
                     576    576 				;send out a warning message.
0143  cd 77 04       577    577 	CALL	REGDP9		;If yes, display register and
                     578    578 				;set status to 9 (RGDA).
0146  c9             579    579 	RET
                     580    580 
                     581    581 ;
                     582    582 KSBR:
                     583    583 ;Branched by table KSUBFUN.
                     584    584 ;Executed when 'SBr' key (set break point)
                     585    585 ;is pressed.
                     586    586 
0147  cd e5 03       587    587 	CALL	TESTM		;Check if the display is of
                     588    588 				;'address-data' form.
014a  c2 bb 03       589    589 	JP	NZ, IGNORE	;If not, ignore this key and
                     590    590 				;send out a warning message.
014d  2a de ff       591    591 	LD	HL, (ADSAVE)	;If yes, get the address
                     592    592 				;being displayed now.
0150  cd f6 05       593    593 	CALL	RAMCHK		;Check if this address is
                     594    594 				;in RAM.
0153  c2 bb 03       595    595 	JP	NZ, IGNORE	;If not, ignore the 'SBR' key
                     596    596 				;and send out a warning message.
0156  22 e0 ff       597    597 	LD	(BRAD), HL	;If yes, set this address as
                     598    598 				;a break point.
0159  cd 0b 04       599    599 	CALL	MEMDP2		;Display the data of break
                     600    600 				;address and set STATE to
                     601    601 				;2 (DA).
015c  c9             602    602 	RET
                     603    603 
                     604    604 ;
                     605    605 KINS:
                     606    606 ;Branched by table KSUBFUN.
                     607    607 ;Executed when 'Ins' key (insert) is pressed.
                     608    608 
015d  cd e5 03       609    609 	CALL	TESTM		;Check if the display is of
                     610    610 				;'addres-data' form.
0160  c2 bb 03       611    611 	JP	NZ, IGNORE	;If not, ignore the 'INS' key
                     612    612 				;and send out a warning message.
0163  2a de ff       613    613 	LD	HL, (ADSAVE)	;If yes, get the address being
                     614    614 				;displayed now.
                     615    615 
0166  00             616    616 	NOP
                     617    617 
0167  22 af ff       618    618 	LD	(STEPBF), HL	;Store this address in
                     619    619 				;STEPBF and the next address
                     620    620 				;in STEPBF+4 for later use.
016a  23             621    621 	INC	HL
016b  22 b3 ff       622    622 	LD	(STEPBF+4), HL
016e  cd f6 05       623    623 	CALL	RAMCHK		;Check if the address to be
                     624    624 				;inserted is in RAM.
0171  c2 bb 03       625    625 	JP	NZ, IGNORE	;If not, ignore the 'INS' key
                     626    626 				;and send out a warning message.
                     627    627 				;If the address to be inserted
                     628    628 				;is in 1800-1DFF, store 1DFE into
                     629    629 				;STEPBF+2
                     630    630 				;Otherwise, ignore the 'INS' key.
                     631    631 				;This is done by the following
                     632    632 				;instructions.
0174  11 fe fd       633    633 	LD	DE, 0FDFEH
0177  7c             634    634 	LD	A, H
0178  fe 1e          635    635 	CP	1EH
017a  38 07          636    636 	JR	C, SKIPH1
017c  fe 20          637    637 	CP	20H
017e  da bb 03       638    638 	JP	C, IGNORE
0181  16 27          639    639 	LD	D, 27H
0183  ed 53 b1 ff    640    640 SKIPH1	LD	(STEPBF+2), DE
                     641    641 
                     642    642 ;When one byte is inserted at some
                     643    643 ;address, all data below this address
                     644    644 ;will be shifted down one position.
                     645    645 ;The last location will be shifted out
                     646    646 ;and therefore lost.
                     647    647 ;The RAM is divided into 3 blocks as
                     648    648 ;insert is concerned.  They are:
                     649    649 ;1800-1DFF, 1E00-1FFF and 2000-27FF
                     650    650 ;The 2nd block cannot be inserted and
                     651    651 ;is usually used as data bank.  System
                     652    652 ;data that of course cannot be shifted
                     653    653 ;is also stored in this bank.  Each
                     654    654 ;block is independent of the other when
                     655    655 ;shift is performed, i.e. the data
                     656    656 ;shifted out of the first block will not
                     657    657 ;be propagated to next block.
                     658    658 ;The shift is accomplished by block
                     659    659 ;transfer, i.e. MOVE.  This is the
                     660    660 ;job of subroutine GMV.
                     661    661 ;Routine GMV needs 3 parameters which
                     662    662 ;are stored in step-buffer (STEPBF):
                     663    663 ;STEPBF: starting address (2 bytes);
                     664    664 ;STEPBF+2: ending address (2 bytes);
                     665    665 ;STEPBF+4: destination address (2 bytes).
                     666    666 
0187  cd e4 02       667    667 DOMV	CALL	GMV
018a  af             668    668 	XOR	A		;After the RAM has been shifted down,
018b  12             669    669 	LD	(DE), A		;the data of the address to be inserted
                     670    670 				;is cleared to zero.  This is done by
                     671    671 				;these two instructions.  Register
                     672    672 				;DE contains inserted address after GMV
                     673    673 				;is performed.
                     674    674 
018c  2a b3 ff       675    675 	LD	HL, (STEPBF+4)	;Store the data in (STEPBF+4)
018f  22 de ff       676    676 	LD	(ADSAVE), HL	;into (ADSAVE).
0192  cd 0b 04       677    677 	CALL	MEMDP2		;Display the address and data also
                     678    678 				;set STATE to 2.
0195  c9             679    679 	RET
                     680    680 ;
                     681    681 KDEL:
                     682    682 ;Branched by table KSUBFUN.
                     683    683 ;Executed when 'Del' (delete) key is pressed.
                     684    684 
0196  cd e5 03       685    685 	CALL	TESTM		;Check if the display is of
                     686    686 				;'address-data' form.
0199  c2 bb 03       687    687 	JP	NZ, IGNORE	;If not, ignore the 'Del' key and
                     688    688 				;send out a warning message.
                     689    689 				;'Delete' is quite similar to
                     690    690 				;'Insert',except that the memory
                     691    691 				;is shifted up up instead of shifted
                     692    692 				;down.  See the comments on
                     693    693 				;routine KINS for details.
019c  2a de ff       694    694 	LD	HL, (ADSAVE)	;Get the address being displayed
                     695    695 				;now.  This is the address to
                     696    696 				;be deleted.
                     697    697 
                     698    698 
019f  00             699    699 	NOP
                     700    700 
01a0  22 b3 ff       701    701 	LD	(STEPBF+4), HL
01a3  cd f6 05       702    702 	CALL	RAMCHK		;Check if the address is in RAM.
01a6  c2 bb 03       703    703 	JP	NZ, IGNORE	;If not, ignore this key and
                     704    704 				;send out a warning message.
                     705    705 				;Following instructions prepare the
                     706    706 				;parameters for routine GMV in step-
                     707    707 				;buffer.  Refer to routine KINS for
                     708    708 				;detail.
01a9  11 00 fe       709    709 	LD	DE, 0FE00H
01ac  7c             710    710 	LD	A, H
01ad  fe fe          711    711 	CP	0FEH
01af  38 07          712    712 	JR	C, SKIPH2
01b1  fe 20          713    713 	CP	20H
01b3  da bb 03       714    714 	JP	C, IGNORE
01b6  16 28          715    715 	LD	D, 28H
01b8  ed 53 b1 ff    716    716 SKIPH2	LD	(STEPBF+2), DE
01bc  23             717    717 	INC	HL
01bd  22 af ff       718    718 	LD	(STEPBF), HL
01c0  18 c5          719    719 	JR	DOMV
                     720    720 ;
                     721    721 ;***********************************************************
                     722    722 KPC:
                     723    723 ;Branched by table KFUN.
                     724    724 ;Executed when 'PC' key is pressed.
                     725    725 
01c2  2a dc ff       726    726 	LD	HL, (USERPC)	;Store the user's program
01c5  22 de ff       727    727 	LD	(ADSAVE), HL	;counter into (ADSAVE)
01c8  cd 0b 04       728    728 	CALL	MEMDP2		;Routine MEMDP2 displays the
                     729    729 				;address in (ADSAVE) and its data.
                     730    730 				;It also sets the STATE to 2.
01cb  c9             731    731 	RET
                     732    732 ;
                     733    733 KCBR:
                     734    734 ;Branched by table KFUN.
                     735    735 ;Executed when 'CBr' (clear break point) key is pressed.
                     736    736 
01cc  cd de 03       737    737 	CALL	CLRBR		;Call subroutine CLRBR to clear
                     738    738 				;break point.  When returned, the HL
                     739    739 				;register will contain FFFF.
01cf  22 de ff       740    740 	LD	(ADSAVE), HL	;Store FFFF into (ADSAVE)
01d2  cd 0b 04       741    741 	CALL	MEMDP2		;Display address and its data.
                     742    742 						;Also set STATE to 2.
01d5  c9             743    743 	RET
                     744    744 ;
                     745    745 KREG:
                     746    746 ;Branched by table KFUN.
                     747    747 ;Executed when 'Reg' key is pressed.
01d6  dd 21 ca 07    748    748 	LD	IX, REG_	;Routine SCAN uses IX as a pointer
                     749    749 				;for display buffer.  Setting IX to REG
                     750    750 				;will cause SCAN to display 'Reg-  '
01da  cd c4 04       751    751 	CALL	FCONV		;Decode user's flag F and F' to
                     752    752 				;binary display format.  This
                     753    753 				;format will be used later, when
                     754    754 				;user requires the monitor to
                     755    755 				;display decoded flag by pressing
                     756    756 				;keys 'SZXH', 'XPNC',...
01dd  c9             757    757 	RET
                     758    758 ;
                     759    759 KADDR:
                     760    760 ;Branched by table KFUN.
                     761    761 ; Executed when 'Addr' key is pressed.
                     762    762 
01de  cd 02 04       763    763 	CALL	MEMDP1		;Display the address stored in
                     764    764 				;(ADSAVE) and its data.
                     765    765 				;Set STATE to 1 (AD).
01e1  c9             766    766 	RET
                     767    767 ;
                     768    768 ; Function Move, Relative, Read-tape and
                     769    769 ; Write-tape require from one to three
                     770    770 ; parameters.  They are stored in STEPBF
                     771    771 ; (step buffer).  STMINOR (minor status)
                     772    772 ; contains the number of parameters that has
                     773    773 ; been entered.  For Move and Relative, the
                     774    774 ; default value of the first parameter is
                     775    775 ; the address stored in (ADSAVE).  There
                     776    776 ; is no default value for the first parameter
                     777    777 ; (filename) of Read- and Write-tape.  When the
                     778    778 ; function keys are pressed, STMINOR is automatically
                     779    779 ; reset to 0.
                     780    780 ;
                     781    781 
                     782    782 KMV:
                     783    783 ;Branched by table KFUN.
                     784    784 ;Executed when 'Move' key is pressed.
                     785    785 KRL:
                     786    786 ;Branched by table KFUN.
                     787    787 ;Executed when 'Rela' (relative) key is pressed.
01e2  2a de ff       788    788 	LD	HL, (ADSAVE)	;Store the contents of ADSAVE
01e5  22 af ff       789    789 	LD	(STEPBF), HL	;into STEPBF as default value
                     790    790 				;of first parameter.
                     791    791 
                     792    792 KWT:
                     793    793 ;Branched by table KFUN.
                     794    794 ;Executed when 'USB WR' key is pressed.
                     795    795 
                     796    796 KRT:
                     797    797 ;Branched by table KFUN.
                     798    798 ;Executed when 'USB RD' key is pressed.
                     799    799 
01e8  cd 3a 04       800    800 	CALL	STEPDP		;Display the parameter that
                     801    801 				;is being entered now by calling
                     802    802 				;subroutine STEPDP.
01eb  c9             803    803 	RET
                     804    804 ;
                     805    805 ;***********************************************************
                     806    806 ; The following subroutines with name H???
                     807    807 ; are the service routines for hexadecimal
                     808    808 ; keys corresponding to each STATE.  They
                     809    809 ; are all branched by table HTAB and STATE.
                     810    810 
01ec  c3 bb 03       811    811 HFIX	JP	IGNORE		;When the display is fixed pattern
                     812    812 				;hexadecimal keys are illegal.
                     813    813 				;Disable all LED's as a warning
                     814    814 				;message to the user.  This is what
                     815    815 				;routine IGNORE does.
                     816    816 ;
01ef  2a de ff       817    817 HDA	LD	HL, (ADSAVE)	;Get the address being displayed
                     818    818 				;now from (ADSAVE)
01f2  cd f6 05       819    819 	CALL	RAMCHK		;Check if it is in RAM.
01f5  c2 bb 03       820    820 	JP	NZ, IGNORE	;If not, ignore this key and
                     821    821 				;send out a warning message.
01f8  cd ee 03       822    822 	CALL	PRECL1		;If this is the first hexadecimal
                     823    823 				;key entered after function or sub-
                     824    824 				;function key, reset the data of that
                     825    825 				;address to 0. (by routine PERCL1)
01fb  79             826    826 	LD	A, C		;The key-code is saved in C by
                     827    827 				;routine KHEX.  Restore it to A.
01fc  ed 6f          828    828 	RLD			;Rotate the key-code (4 bits) into
                     829    829 				;the address obtained above. (in HL)
01fe  cd 0b 04       830    830 	CALL	MEMDP2		;Display the address and data,
                     831    831 				;then set STATE to 2 (DA).
0201  c9             832    832 	RET
                     833    833 ;
0202  21 de ff       834    834 HAD:	LD	HL, ADSAVE
0205  cd fa 03       835    835 	CALL	PRECL2		;If this is the first hexadecimal
                     836    836 				;key after function key is entered,
                     837    837 				;set the contents of ADSAVE to 0.
0208  79             838    838 	LD	A, C		;The key-code is saved in C
                     839    839 				;by routine KHEX.
                     840    840 				;The next three instructions shift
                     841    841 				;the addres being displayed by
                     842    842 				;one digit.
0209  ed 6f          843    843 	RLD
020b  23             844    844 	INC	HL
020c  ed 6f          845    845 	RLD
020e  cd 02 04       846    846 	CALL	MEMDP1		;Display the address and its
                     847    847 				;data.  Also, set STATE to 1.
0211  c9             848    848 	RET
                     849    849 ;
                     850    850 HRGAD:
                     851    851 HRGFIX:
0212  79             852    852 	LD	A, C
0213  dd 21 b6 ff    853    853 	LD	IX, DISPBF
0217  21 e3 ff       854    854 	LD	HL, STMINOR
021a  87             855    855 	ADD	A, A		;The key-code is the register
                     856    856 				;name.  Double it and store it
021b  77             857    857 	LD	(HL), A		;into STMINOR.
                     858    858 
021c  cd 73 04       859    859 	CALL	REGDP8		;Display register and set
                     860    860 				;STATE to 8. (RGAD)
021f  c9             861    861 	RET
                     862    862 ;
                     863    863 HRT:
                     864    864 HWT:
                     865    865 HRL:
0220  cd 55 04       866    866 HMV:	CALL	LOCSTBF		;Use STMINOR and STEPBF
                     867    867 				;to calculate the address
                     868    868 				;of current parameter in
                     869    869 				;step buffer.
0223  cd fa 03       870    870 	CALL	PRECL2		;If this is the first hex
                     871    871 				;key entered, clear the
                     872    872 				;parameter (2 bytes) by
                     873    873 				;PRECL2.
0226  79             874    874 	LD	A, C		;C contains the key-code
0227  ed 6f          875    875 	RLD			;Rotate the parameter (2 bytes)
                     876    876 				;1 digit left with the key-code.
                     877    877 
0229  23             878    878 	INC	HL
022a  ed 6f          879    879 	RLD
022c  cd 3a 04       880    880 	CALL	STEPDP		;Display the parameter.
022f  c9             881    881 	RET
                     882    882 ;
0230  cd bb 04       883    883 HRGDA	CALL	LOCRGBF		;Calculate the address of
                     884    884 				;the register being modified.
0233  cd ee 03       885    885 	CALL	PRECL1		;If this is the first hex
                     886    886 				;key entered.  Clear the register
                     887    887 				;(1 byte) by PRECL1.
0236  79             888    888 	LD	A, C		;C contains the key-code
0237  ed 6f          889    889 	RLD			;Rotate user's register (1 byte)
                     890    890 				;1 digit left with the key-code.
                     891    891 
0239  cd 77 04       892    892 	CALL	REGDP9		;Display the register and set
                     893    893 				;STATE to 9 (RGDA).
023c  c9             894    894 	RET
                     895    895 ;
                     896    896 ;***********************************************************
                     897    897  ;The following routines with name
                     898    898  ;I???? are the service routines for
                     899    899  ;'+' key corresponding to each STATE
                     900    900  ;They are all branched by table ITAB
                     901    901  ;and STATE
                     902    902 
                     903    903 IFIX:
                     904    904 IRGFIX:
023d  c3 bb 03       905    905 	JP	IGNORE		;'+' key is illegal for state
                     906    906 				;FIX or RGFIX, ignore it.
                     907    907 ;
                     908    908 IAD:
0240  2a de ff       909    909 IDA:	LD	HL, (ADSAVE)	;Increase the address being
                     910    910 				;displayed now (in ADSAVE)
                     911    911 				;by 1.
0243  23             912    912 	INC	HL
0244  22 de ff       913    913 	LD	(ADSAVE), HL
0247  cd 0b 04       914    914 	CALL	MEMDP2		;Display the address and data,
                     915    915 				;then set the STATE to 2 (DA).
024a  c9             916    916 	RET
                     917    917 ;
                     918    918 IRT:
                     919    919 IWT:
                     920    920 IRL:
024b  21 e3 ff       921    921 IMV:	LD	HL, STMINOR	;STMINOR contains the
                     922    922 				;parameter count, increment
                     923    923 				;it by one.
024e  34             924    924 	INC	(HL)
024f  cd 5f 04       925    925 	CALL	LOCSTNA		;Check if the count is
                     926    926 				;overflowed.
0252  20 04          927    927 	JR	NZ, ISTEP	;If not overflowed, continue
                     928    928 				;at ISTEP
0254  35             929    929 	DEC	(HL)		;Otherwise, restore the count
                     930    930 				;and ignore the '+' key.
0255  c3 bb 03       931    931 	JP	IGNORE
0258  cd 3a 04       932    932 ISTEP	CALL	STEPDP		;Display the parameter at
                     933    933 				;step buffer.
025b  c9             934    934 	RET
                     935    935 ;
                     936    936 IRGAD:
025c  21 e3 ff       937    937 IRGDA:	LD	HL, STMINOR	;In these states, the STMINOR
                     938    938 				;contains the register name.
                     939    939 				;Increase it by 1.  If it
                     940    940 				;reaches the last one, reset
                     941    941 				;it to the first one (0).
025f  34             942    942 	INC	(HL)
0260  3e 1f          943    943 	LD	A, 1FH
0262  be             944    944 	CP	(HL)
0263  30 02          945    945 	JR	NC, IRGNA
0265  36 00          946    946 	LD	(HL), 0
0267  cd 77 04       947    947 IRGNA	CALL	REGDP9		;Display the register and
                     948    948 				;set STATE to 9
026a  c9             949    949 	RET
                     950    950 ;
                     951    951 ;***********************************************************
                     952    952  ;The following routines with name
                     953    953  ;D???? are the service routines for
                     954    954  ;'-' key corresponding to each state.
                     955    955  ;They are all branched by table DTAB
                     956    956  ;and STATE.
                     957    957 
                     958    958 DFIX:
                     959    959 DRGFIX:
026b  c3 bb 03       960    960 	JP	IGNORE		;'-' key is illegal for
                     961    961 				;these states.  Ignore it.
                     962    962 ;
                     963    963 DAD:
026e  2a de ff       964    964 DDA:	LD	HL, (ADSAVE)	;Decrease the address being
                     965    965 				;displayed now (in ADSAVE)
                     966    966 				;by one.
0271  2b             967    967 	DEC	HL
0272  22 de ff       968    968 	LD	(ADSAVE), HL
0275  cd 0b 04       969    969 	CALL	MEMDP2		;Display the address and data,
                     970    970 				;set STATE to 2 (DA).
0278  c9             971    971 	RET
                     972    972 ;
                     973    973 DRT:
                     974    974 DWT:
                     975    975 DRL:
0279  21 e3 ff       976    976 DMV:	LD	HL, STMINOR	;In these states, STMINOR contains
                     977    977 				;the parameter count.  Decrease it by one.
                     978    978 				;If overflow occurs, restore STMINOR and
                     979    979 				;ignore the '-' key.  Otherwise continue
                     980    980 				;at DSTEP.
                     981    981 
027c  35             982    982 	DEC	(HL)
027d  cd 5f 04       983    983 	CALL	LOCSTNA
0280  20 04          984    984 	JR	NZ, DSTEP
0282  34             985    985 	INC	(HL)
0283  c3 bb 03       986    986 	JP	IGNORE
0286  cd 3a 04       987    987 DSTEP	CALL	STEPDP		;Display the parameter.
0289  c9             988    988 	RET
                     989    989 ;
                     990    990 DRGAD:
028a  21 e3 ff       991    991 DRGDA:	LD	HL, STMINOR	;In these states, STMINOR
                     992    992 				;contains the register name.
                     993    993 				;Decrease it by one.  If it
                     994    994 				;goes below zero,  set it to
                     995    995 				;the highest value (1F).
028d  35             996    996 	DEC	(HL)
028e  3e 1f          997    997 	LD	A, 01FH
0290  be             998    998 	CP	(HL)
0291  30 02          999    999 	JR	NC, DRGNA
0293  36 1f         1000   1000 	LD	(HL), 1FH
0295  cd 77 04      1001   1001 DRGNA	CALL	REGDP9		;Display the register and
                    1002   1002 				;set STATE to 9.
0298  c9            1003   1003 	RET
                    1004   1004 ;
                    1005   1005 ;***********************************************************
                    1006   1006  ;The following routines with name
                    1007   1007  ;G???? are the service routines for
                    1008   1008  ;'GO' key corresponding to each
                    1009   1009  ;state.  They are all branced by
                    1010   1010  ;table GTAB and STATE.
                    1011   1011 
                    1012   1012 GFIX:
                    1013   1013 GRGFIX:
                    1014   1014 GRGAD:
0299  c3 bb 03      1015   1015 GRGDA:	JP	IGNORE		;'GO' key is illegal for
                    1016   1016 				;these states.  Ignore it.
                    1017   1017 ;
                    1018   1018 GAD:
029c  2a e0 ff      1019   1019 GDA:	LD	HL, (BRAD)	;Get the address of break
                    1020   1020 				;point.
029f  36 ef         1021   1021 	LD	(HL), 0EFH	;Instruction RST28H.
                    1022   1022 				;The content of break address
                    1023   1023 				;is changed to RST 28H before
                    1024   1024 				;the control is transfered to
                    1025   1025 				;user's program.  This
                    1026   1026 				;will cause a trap when user's
                    1027   1027 				;PC passes this point.
02a1  3e ff         1028   1028 	LD	A, 0FFH		;Save FF into TEMP.  This data
                    1029   1029 				;will be output to port C later.
                    1030   1030 				;FF is used to disable break point.
02a3  32 ea ff      1031   1031 PREOUT	LD	(TEMP), A	;Store A into TEMP.
02a6  3a d2 ff      1032   1032 	LD	A, (USERIF)	;Save two instructions into
                    1033   1033 				;TEMP and TEMP+1.  THese two
                    1034   1034 				;instructions will be executed
                    1035   1035 				;later.  If the user's IFF
                    1036   1036 				;(interrupt flip-flop) is 1,
                    1037   1037 				;the instructions are 'EI RET'.
                    1038   1038 				;Otherwise, they are 'DI RET'.
02a9  cb 47         1039   1039 	BIT	0, A
02ab  21 fb c9      1040   1040 	LD	HL, 0C9FBH	;'EI', 'RET'
02ae  20 02         1041   1041 	JR	NZ, EIDI
02b0  2e f3         1042   1042 	LD	L, 0F3H		;'DI'
02b2  22 eb ff      1043   1043 EIDI	LD	(TEMP+1), HL
02b5  31 bc ff      1044   1044 	LD	SP, REGBF	;Restore user's registers by
                    1045   1045 				;setting SP to REGBF (register
                    1046   1046 				;buffer) and continuously popping
                    1047   1047 				;the stack.
02b8  f1            1048   1048 	POP	AF
02b9  c1            1049   1049 	POP	BC
02ba  d1            1050   1050 	POP	DE
02bb  e1            1051   1051 	POP	HL
02bc  08            1052   1052 	EX	AF, AF'
02bd  f1            1053   1053 	POP	AF
02be  08            1054   1054 	EX	AF, AF'
02bf  d9            1055   1055 	EXX
02c0  c1            1056   1056 	POP	BC
02c1  d1            1057   1057 	POP	DE
02c2  e1            1058   1058 	POP	HL
02c3  d9            1059   1059 	EXX
02c4  dd e1         1060   1060 	POP	IX
02c6  fd e1         1061   1061 	POP	IY
02c8  ed 7b d0 ff   1062   1062 	LD	SP, (USERSP)	;Restore user's SP.
02cc  32 bd ff      1063   1063 	LD	(USERAF+1), A	;Temporarily save A
02cf  3a d3 ff      1064   1064 	LD	A, (USERIF+1)	;Restore user's I
02d2  ed 47         1065   1065 	LD	I, A
                    1066   1066 				;The next 3 instructions
02d4  e5            1067   1067 	PUSH	HL		;push the address being
                    1068   1068 				;displayed now (in ADSAVE)
                    1069   1069 				;onto stack without changing
                    1070   1070 				;HL register.  This address will be
                    1071   1071 				;treated as user's new PC.
02d5  2a de ff      1072   1072 	LD	HL, (ADSAVE)
02d8  e3            1073   1073 	EX	(SP), HL
02d9  3a ea ff      1074   1074 	LD	A, (TEMP)	;Output the data stored in
                    1075   1075 				;TEMP to port C of 8255
                    1076   1076 				;This data is prepared by
                    1077   1077 				;routine KSTEP or GAD or
                    1078   1078 				;GDA.  In first case, it is
                    1079   1079 				;10111111 and will enable
                    1080   1080 				;break point.  In other
                    1081   1081 				;cases, it is FF and will
                    1082   1082 				;disable break point.
                    1083   1083 				;If break is enabled, non-
                    1084   1084 				;maskable interrupt will occur
                    1085   1085 				;5 M1's after the OUT instruction.
02dc  d3 02         1086   1086 	OUT	(DIGIT), A
02de  3a bd ff      1087   1087 	LD	A, (USERAF+1)	;1st M1,
                    1088   1088 				;Restore A register.
02e1  c3 eb ff      1089   1089 	JP	TEMP+1		;2nd M1,
                    1090   1090 				;Execute the two instructions
                    1091   1091 				;stored in RAM.  They are:
                    1092   1092 				;    EI (or DI)     ;3rd M1
                    1093   1093 				;    RET            ;4th M1
                    1094   1094 				;The starting address of user's
                    1095   1095 				;program has been pushed onto
                    1096   1096 				;the top of the stack.  RET pops
                    1097   1097 				;out this address and transfers
                    1098   1098 				;control to it.  The first M1
                    1099   1099 				;of user's program will be the
                    1100   1100 				;5th M1 after OUT. If break point
                    1101   1101 				;is enabled, NMI will occur after
                    1102   1102 				;this instruction is completed.
                    1103   1103 				;This is the mechanism of single
                    1104   1104 				;step.
                    1105   1105 ;
                    1106   1106 ;***********************************************************
02e4  21 af ff      1107   1107 GMV	LD	HL, STEPBF
02e7  cd 3d 05      1108   1108 	CALL	GETP		;Load parameters from
                    1109   1109 				;step buffer into registers.
                    1110   1110 				;Also check if the parameters
                    1111   1111 				;are legal.  After GETP,
                    1112   1112 				;HL = start address of source
                    1113   1113 				;BC = length to MOVE.
02ea  38 67         1114   1114 	JR	C, ERROR	;Jump to ERROR if the
                    1115   1115 				;parameters are illegal. (I.e., Ending
                    1116   1116 				;address < starting address.)
02ec  ed 5b b3 ff   1117   1117 	LD	DE, (STEPBF+4)	;Load destination
                    1118   1118 				;address into DE.
02f0  ed 52         1119   1119 	SBC	HL, DE		;Compare HL and DE to
                    1120   1120 				;determine move up or down.
02f2  30 0c         1121   1121 	JR	NC, MVUP
                    1122   1122 				;Move down:
02f4  eb            1123   1123 	EX	DE, HL		;HL = destination address
02f5  09            1124   1124 	ADD	HL, BC		;HL = dest. address + length
02f6  2b            1125   1125 	DEC	HL		;HL = end address of dest.
02f7  eb            1126   1126 	EX	DE, HL		;DE = end address of dest.
02f8  2a b1 ff      1127   1127 	LD	HL, (STEPBF+2)	;HL = end address of source
02fb  ed b8         1128   1128 	LDDR			;block transfer instruction
02fd  13            1129   1129 	INC	DE		;DE = last address moved
02fe  18 1c         1130   1130 	JR	ENDFUN		;Continue at ENDFUN
                    1131   1131 MVUP:				;Move up:
0300  19            1132   1132 	ADD	HL, DE		;HL is destroyed by
                    1133   1133 				;SBC HL, DE.  Restore HL.
0301  ed b0         1134   1134 	LDIR			;block transfer
0303  1b            1135   1135 	DEC	DE		;DE = last address moved
0304  18 16         1136   1136 	JR	ENDFUN		;Continue at ENDFUN
                    1137   1137 ;
                    1138   1138 ;***********************************************************
0306  ed 5b af ff   1139   1139 GRL	LD	DE, (STEPBF)	;Load starting address
                    1140   1140 				;into DE.
030a  13            1141   1141 	INC	DE		;Increase this address by 2.
                    1142   1142 				;Relative address is used in
                    1143   1143 				;instruction JR or DJNZ.
                    1144   1144 				;The codes for them are 2 bytes.
                    1145   1145 				;The PC is increased by 2 after
                    1146   1146 				;opcode is fetched.
030b  13            1147   1147 	INC	DE
030c  2a b1 ff      1148   1148 	LD	HL, (STEPBF+2)	;Load destination
                    1149   1149 				;address into HL.
030f  b7            1150   1150 	OR	A
0310  ed 52         1151   1151 	SBC	HL, DE		;Calculate difference.
0312  7d            1152   1152 	LD	A, L		;Check if the offset is between
                    1153   1153 				;+127 (007FH) and -128 (FF80H).
                    1154   1154 				;If the offset is positive, both H
                    1155   1155 				;and bit 7 of L must be zero; if it
                    1156   1156 				;is negative, H and bit 7 of L must
                    1157   1157 				;be FF and 1.  In both cases, adding
                    1158   1158 				;H with bit 7 of L results in 0.
0313  17            1159   1159 	RLA			;Rotate bit 7 of L into carry flag.
0314  7c            1160   1160 	LD	A, H
0315  ce 00         1161   1161 	ADC	A, 0		;ADD H and bit 7 of L.
0317  20 3a         1162   1162 	JR	NZ, ERROR	;Branch to ERROR if
                    1163   1163 				;the results is nonzero.
0319  7d            1164   1164 	LD	A, L
031a  1b            1165   1165 	DEC	DE
031b  12            1166   1166 	LD	(DE), A		;Save the offset into
                    1167   1167 				;the next byte of opcode.
                    1168   1168 				;(DJNZ or JR)
                    1169   1169 ;
                    1170   1170 ENDFUN:
031c  ed 53 de ff   1171   1171 	LD	(ADSAVE), DE	;Save DE into ADSAVE.
0320  cd 0b 04      1172   1172 	CALL	MEMDP2		;Display this address and
                    1173   1173 				;its data.  Set STATE to 2.
0323  c9            1174   1174 	RET
                    1175   1175 ;
                    1176   1176 ;***********************************************************
                    1177   1177 GWT:
0324  cd 2d 05      1178   1178 	CALL	SUM1		;Load parameters from
                    1179   1179 				;step buffer into registers.
                    1180   1180 				;Check if the parameters
                    1181   1181 				;are legal.  If legal, calculate
                    1182   1182 				;the sum of all data to be output
                    1183   1183 				;to tape.
0327  38 2a         1184   1184 	JR	C, ERROR	;Branch to ERROR if the
                    1185   1185 				;parameters are illegal. (length is
                    1186   1186 				;negative)
0329  32 b5 ff      1187   1187 	LD	(STEPBF+6), A	;Store the checksum into
                    1188   1188 				;STPEGBF+6.
032c  21 a0 0f      1189   1189 	LD	HL, 4000	;Output 1 kHz square
                    1190   1190 				;wave for 4000 cycles.
                    1191   1191 				;Leading sync. signal.
032f  cd de 05      1192   1192 	CALL	TONE1K
0332  21 af ff      1193   1193 	LD	HL, STEPBF	;Output 7 bytes starting
                    1194   1194 				;at STEPBF. (Include:
                    1195   1195 				;filename, starting, ending
                    1196   1196 				;address and checksum)
0335  01 07 00      1197   1197 	LD	BC, 7
0338  cd a7 05      1198   1198 	CALL	TAPEOUT
033b  21 a0 0f      1199   1199 	LD	HL, 4000	;Output 2 kHz square
                    1200   1200 				;wave for 4000 cycles.
                    1201   1201 				;Middle sync.  The file name of the
                    1202   1202 				;file being read will be displayed
                    1203   1203 				;in this interval.
033e  cd e2 05      1204   1204 	CALL	TONE2K
0341  cd 3a 05      1205   1205 	CALL	GETPTR		;Load parameters into
                    1206   1206 				;registers. (Starting, ending and
                    1207   1207 				;length).
0344  cd a7 05      1208   1208 	CALL	TAPEOUT		;Output user's data.
0347  21 a0 0f      1209   1209 	LD	HL, 4000	;Output 4000 cycles of
                    1210   1210 				;2 kHz square wave.
                    1211   1211 				;(Tail sync.)
034a  cd e2 05      1212   1212 	CALL	TONE2K
034d  ed 5b b3 ff   1213   1213 ENDTAPE	LD	DE, (STEPBF+4)	;DE = last address
0351  18 c9         1214   1214 	JR	ENDFUN		;Continue at ENDFUN
                    1215   1215 
0353  dd 21 a9 07   1216   1216 ERROR	LD	IX, ERR_	;IX points to '-Err  '
0357  c3 d0 00      1217   1217 	JP	SETST0		;Set STATE to 0 by
                    1218   1218 				;branching to SETST0.
                    1219   1219 ;
                    1220   1220 ;***********************************************************
                    1221   1221 GRT:
035a  2a af ff      1222   1222 	LD	HL, (STEPBF)	;Temporarily save filename.
035d  22 ea ff      1223   1223 	LD	(TEMP), HL
0360  3e 40         1224   1224 LEAD	LD	A, 01000000B	;decimal point
0362  d3 01         1225   1225 	OUT	(SEG7), A	;When searching for filename,
                    1226   1226 				;the display is blank initially.
                    1227   1227 				;If the data read from MIC is
                    1228   1228 				;acceptable 0 or 1, the display
                    1229   1229 				;becomes '......'.
0364  21 e8 03      1230   1230 	LD	HL, 1000
0367  cd 8c 05      1231   1231 LEAD1	CALL	PERIOD		;The return of PERIOD
                    1232   1232 				;is in flag:
                    1233   1233 				;  NC -- tape input is 1 kHz;
                    1234   1234 				;   C -- otherwise.
036a  38 f4         1235   1235 	JR	C, LEAD		;Loop until leading sync
                    1236   1236 				;is detected.
036c  2b            1237   1237 	DEC	HL		;Decrease HL by one when
                    1238   1238 				;one period is detected.
036d  7c            1239   1239 	LD	A, H
036e  b5            1240   1240 	OR	L		;Check if both H and L are 0.
036f  20 f6         1241   1241 	JR	NZ, LEAD1	;Wait for 1000 periods.
                    1242   1242 				;The leading sync is accepted
                    1243   1243 				;if it is longer than 1000
                    1244   1244 				;cycles (1 second).
0371  cd 8c 05      1245   1245 LEAD2	CALL	PERIOD
0374  30 fb         1246   1246 	JR	NC, LEAD2	;Wait for all leading sync to
                    1247   1247 				;pass over.
                    1248   1248 
0376  21 af ff      1249   1249 	LD	HL, STEPBF	;Load 7 bytes from
                    1250   1250 				;tape into STEPBF.
0379  01 07 00      1251   1251 	LD	BC, 7
037c  cd 4d 05      1252   1252 	CALL	TAPEIN
037f  38 df         1253   1253 	JR	C, LEAD		;Jump to LEAD if input
                    1254   1254 				;is not succesful.
0381  ed 5b af ff   1255   1255 	LD	DE, (STEPBF)	;Get filename from
                    1256   1256 				;step buffer.
0385  cd 65 06      1257   1257 	CALL	ADDRDP		;Convert it to display
                    1258   1258 				;format.
0388  06 96         1259   1259 	LD	B, 150		;Display it for 1.5 sec.
038a  cd 24 06      1260   1260 FILEDP	CALL	SCAN1
038d  10 fb         1261   1261 	DJNZ	FILEDP
038f  2a ea ff      1262   1262 	LD	HL, (TEMP)	;Check if the input
                    1263   1263 				;filename equals to the
                    1264   1264 				;specified filename.
0392  b7            1265   1265 	OR	A
0393  ed 52         1266   1266 	SBC	HL, DE
0395  20 c9         1267   1267 	JR	NZ, LEAD	;If not, find the leading
                    1268   1268 				;sync of next file.
                    1269   1269 
0397  3e 02         1270   1270 	LD	A, 00000010B	;segment '-'
0399  d3 01         1271   1271 	OUT	(SEG7), A	;If filename is found
                    1272   1272 				;Display '------'.
039b  cd 3a 05      1273   1273 	CALL	GETPTR		;The parameters (starting,
                    1274   1274 				;ending address and checksum
                    1275   1275 				;have been loaded into
                    1276   1276 				;STEPBF.  Load them into
                    1277   1277 				;registers, calculate the block
                    1278   1278 				;length and check if they are
                    1279   1279 				;legal.
039e  38 b3         1280   1280 	JR	C, ERROR	;Jump to ERROR if the
                    1281   1281 				;parameters are illegal.
03a0  cd 4d 05      1282   1282 	CALL	TAPEIN		;Input user's data.
03a3  38 ae         1283   1283 	JR	C, ERROR	;Jump to ERROR if input
                    1284   1284 				;is not succesful.
03a5  cd 2d 05      1285   1285 	CALL	SUM1		;Calculate the sum of all
                    1286   1286 				;input data.
03a8  21 b5 ff      1287   1287 	LD	HL, STEPBF+6
03ab  be            1288   1288 	CP	(HL)		;Compare it with the
                    1289   1289 				;checksum calculated and stored by
                    1290   1290 				;'USB WR'.
03ac  20 a5         1291   1291 	JR	NZ, ERROR	;Jump to ERROR if not
                    1292   1292 				;matched.
03ae  18 9d         1293   1293 	JR	ENDTAPE		;Continue at ENDTAPE.
                    1294   1294 ;
                    1295   1295 ;***********************************************************
                    1296   1296 BRANCH:
                    1297   1297 ;Branch table format:
                    1298   1298 ;   byte 1,2 : address of the 1st routine in
                    1299   1299 ;              each group.
                    1300   1300 ;   byte 3   : difference between the address
                    1301   1301 ;              of 1st and 1st routine, which is
                    1302   1302 ;              of course 0.
                    1303   1303 ;   byte 4   : difference between the address
                    1304   1304 ;              of 2nd and 1st routine
                    1305   1305 ;   byte 5   : difference between the address
                    1306   1306 ;              of 3rd and 1st routine
                    1307   1307 ;    ...
                    1308   1308 ;    ...
                    1309   1309 ;    ...
                    1310   1310 ; HL : address of branch table
                    1311   1311 ; A  : the routine number in its group
                    1312   1312 ; Such branch tables can save table length and avoid page
                    1313   1313 ; (256 bytes) boundary problems.
                    1314   1314 
03b0  5e            1315   1315 	LD	E, (HL)		;Load the address of 1st
                    1316   1316 				;routine in the group into
                    1317   1317 				;DE register.
03b1  23            1318   1318 	INC	HL
03b2  56            1319   1319 	LD	D, (HL)
03b3  23            1320   1320 	INC	HL		;Locate the pointer of difference
                    1321   1321 				;table.
03b4  85            1322   1322 	ADD	A, L
03b5  6f            1323   1323 	LD	L, A
03b6  6e            1324   1324 	LD	L, (HL)		;Load the address
                    1325   1325 				;difference into L.
03b7  26 00         1326   1326 	LD	H, 0
03b9  19            1327   1327 	ADD	HL, DE		;Get routine's real address
03ba  e9            1328   1328 	JP	(HL)		;Jump to it.
                    1329   1329 ;
                    1330   1330 ;***********************************************************
                    1331   1331 IGNORE:
03bb  21 e6 ff      1332   1332 	LD	HL, TEST
03be  cb fe         1333   1333 	SET	7, (HL)		;Routine SCAN will check bit
                    1334   1334 				;7 of TEST.  If it is set,
                    1335   1335 				;all LEDs will be disabled.
                    1336   1336 				;This is a warning message to
                    1337   1337 				;the user when a illegal key
                    1338   1338 				;is entered.
03c0  c9            1339   1339 	RET
                    1340   1340 ;
                    1341   1341 ;***********************************************************
                    1342   1342 INI:
                    1343   1343 ; Power-up initialization.
03c1  dd 21 a5 07   1344   1344 	LD	IX, BLANK	;BLANK is the initial display
                    1345   1345 				;pattern.
                    1346   1346 				;Display the following
                    1347   1347 				;patterns sequence, each 0.16
                    1348   1348 				;seconds:
                    1349   1349 				;    '      '
                    1350   1350 				;    '     H'
                    1351   1351 				;    '    HE'
                    1352   1352 				;    '   HEL'
                    1353   1353 				;    '  HELL'
                    1354   1354 				;    ' HELLO'
                    1355   1355 				;    'HELLO '
                    1356   1356 
03c5  0e 07         1357   1357 	LD	C, 7		;pattern count
03c7  06 10         1358   1358 INI1	LD	B, 16		;Display 0.16 second.
03c9  cd 24 06      1359   1359 INI2	CALL	SCAN1
03cc  10 fb         1360   1360 	DJNZ	INI2
03ce  dd 2b         1361   1361 	DEC	IX		;next pattern
03d0  0d            1362   1362 	DEC	C
03d1  20 f4         1363   1363 	JR	NZ, INI1
                    1364   1364 ;
03d3  3e a5         1365   1365 	LD	A, PWCODE
03d5  c3 b3 06      1366   1366 	JP	INI3
03d8  21 66 00      1367   1367 INI4	LD	HL, NMI
03db  22 ee ff      1368   1368 	LD	(IM1AD), HL	;Set the service routine
                    1369   1369 				;of RST 38H to NMI, which is the
                    1370   1370 				;nonmaskable interrupt service
                    1371   1371 				;routine for break point and
                    1372   1372 				;single step.
                    1373   1373 CLRBR:
                    1374   1374 ; Clear break point by setting
                    1375   1375 ; the break point address to
                    1376   1376 ; FFFF.  This is a non-existant
                    1377   1377 ; address, so break can never
                    1378   1378 ; happen.
                    1379   1379 
03de  21 ff ff      1380   1380 	LD	HL, 0FFFFH
03e1  22 e0 ff      1381   1381 	LD	(BRAD), HL
03e4  c9            1382   1382 	RET
                    1383   1383 ;
                    1384   1384 TESTM:
                    1385   1385 ; Check if the display is of 'addres-data'
                    1386   1386 ; form, i.e. STATE 1 or 2.
                    1387   1387 ; The result is stored in zero flag.
                    1388   1388 ;   Z:	yes
                    1389   1389 ;  NZ:	no
                    1390   1390 
03e5  3a e4 ff      1391   1391 	LD	A, (STATE)
03e8  fe 01         1392   1392 	CP	1
03ea  c8            1393   1393 	RET	Z
03eb  fe 02         1394   1394 	CP	2
03ed  c9            1395   1395 	RET
                    1396   1396 ;
                    1397   1397 PRECL1:
                    1398   1398 ; Pre-clear 1 byte.
                    1399   1399 ; If bit 0 of TEST is not 0, load 0 into (HL).
                    1400   1400 ; Bit 0 of TEST is cleared after check.
                    1401   1401 ; Only AF register is destroyed.
                    1402   1402 
03ee  3a e6 ff      1403   1403 	LD	A, (TEST)
03f1  b7            1404   1404 	OR	A		;Is bit 0 of TEST zero?
03f2  c8            1405   1405 	RET	Z
03f3  3e 00         1406   1406 	LD	A, 0
03f5  77            1407   1407 	LD	(HL), A		;Clear (HL)
03f6  32 e6 ff      1408   1408 	LD	(TEST), A	;Clear TEST too.
03f9  c9            1409   1409 	RET
                    1410   1410 ;
                    1411   1411 PRECL2:
                    1412   1412 ; Pre-clear 2 bytes.
                    1413   1413 ; If bit 0 of TEST is nonzero, clear (HL)
                    1414   1414 ; and (HL+1).
                    1415   1415 ; Only AF register is destroyed.
                    1416   1416 
03fa  cd ee 03      1417   1417 	CALL	PRECL1
03fd  c8            1418   1418 	RET	Z
03fe  23            1419   1419 	INC	HL
03ff  77            1420   1420 	LD	(HL), A
0400  2b            1421   1421 	DEC	HL
0401  c9            1422   1422 	RET
                    1423   1423 ;
                    1424   1424 ;***********************************************************
                    1425   1425 ; Memory display format: (address-data)
                    1426   1426 
                    1427   1427 ;      i) A.A.A.A. D D -- State is AD.  Four decimal points
                    1428   1428 ;                         under the address field indicate
                    1429   1429 ;                         that the numeric key entered will
                    1430   1430 ;                         be interpreted as memory address.
                    1431   1431 ;     ii) A A A A  D.D.-- State is DA.  Two decimal points
                    1432   1432 ;                         under the data field indicate
                    1433   1433 ;                         the monitor is expecting user to
                    1434   1434 ;                         enter memory data.
                    1435   1435 ;    iii) A.A.A.A. D.D.-- Six decimal points indicate the
                    1436   1436 ;                         address being displayed is set
                    1437   1437 ;                         as a break point.
                    1438   1438 
                    1439   1439 MEMDP1:
0402  3e 01         1440   1440 	LD	A, 1		;Next STATE = 1
0404  06 04         1441   1441 	LD	B, 4		;4 decimal points active
0406  21 b8 ff      1442   1442 	LD	HL, DISPBF+2	;The first active decimal
                    1443   1443 				;point is in DISPBF+2, the
                    1444   1444 				;last in DISPBF+5.
0409  18 07         1445   1445 	JR	SAV12		;Continue at SAV12.
                    1446   1446 MEMDP2:
040b  3e 02         1447   1447 	LD	A, 2		;Next STATE = 2
040d  06 02         1448   1448 	LD	B, 2		;2 active decimal points
040f  21 b6 ff      1449   1449 	LD	HL, DISPBF	;1st decimal point is in
                    1450   1450 				;DISPBF, 2nd in DISPBF+1.
0412  32 e4 ff      1451   1451 SAV12	LD	(STATE), A	;Update STATE
0415  d9            1452   1452 	EXX			;Save register HL, BC, DE
0416  ed 5b de ff   1453   1453 	LD	DE, (ADSAVE)	;The address to be
                    1454   1454 				;displayed is stored in
                    1455   1455 				;(ADSAVE).  Load it into
                    1456   1456 				;DE register.
041a  cd 65 06      1457   1457 	CALL	ADDRDP		;Convert this address to
                    1458   1458 				;display format and store it
                    1459   1459 				;into DISPBF+2 - DISPBF+5.
041d  1a            1460   1460 	LD	A, (DE)		;Load the data of this
                    1461   1461 				;address into A register
041e  cd 71 06      1462   1462 	CALL	DATADP		;Convert this data to
                    1463   1463 				;display format and store it
                    1464   1464 				;into DISPBF - DISPBF+1
                    1465   1465 BRTEST:
                    1466   1466 ; The next 3 instructions serve to refresh the
                    1467   1467 ; data at break address every time memory is
                    1468   1468 ; displayed.
0421  2a e0 ff      1469   1469 	LD	HL, (BRAD)	;Get break point address.
0424  7e            1470   1470 	LD	A, (HL)		;Get the data of this
                    1471   1471 				;address into A register.
0425  32 e2 ff      1472   1472 	LD	(BRDA), A	;Store it into BRDA (break data).
0428  b7            1473   1473 	OR	A
0429  ed 52         1474   1474 	SBC	HL, DE		;Check if the address to
                    1475   1475 				;be displayed is break point.
042b  20 06         1476   1476 	JR	NZ, SETPT1	;If not, jump to SETPT1.
042d  06 06         1477   1477 	LD	B, 6		;6 active decimal points.
042f  21 b6 ff      1478   1478 	LD	HL, DISPBF	;1st decimal point is in
                    1479   1479 				;DISPBF; 6th in DISPBF+5.
0432  d9            1480   1480 	EXX
0433  d9            1481   1481 SETPT1	EXX
0434  cb f6         1482   1482 SETPT	SET	6,(HL)		;Set decimal points.
                    1483   1483 				;Count in B, first address
                    1484   1484 				;in HL register.
0436  23            1485   1485 	INC	HL
0437  10 fb         1486   1486 	DJNZ	SETPT
0439  c9            1487   1487 	RET
                    1488   1488 ;
                    1489   1489 ;***********************************************************
                    1490   1490 ; Step display format: (this format is used when user is
                    1491   1491 ; entering parameters for Move, Rela, WRtape, RDtape.)
                    1492   1492 
                    1493   1493 ;         P.P.P.P. - N
                    1494   1494 
                    1495   1495 ; 'P' is the digit of parameter.  Four decimal points
                    1496   1496 ; indicate P's are being modified now.  N is the mnemonic of
                    1497   1497 ; the parameter:
                    1498   1498 ;      i) Move   S -- starting address
                    1499   1499 ;                E -- ending address
                    1500   1500 ;                D -- destination address
                    1501   1501 ;     ii) Rela   S -- source address
                    1502   1502 ;                D -- destination address
                    1503   1503 ;    iii) WRtape F -- file name
                    1504   1504 ;                S -- starting address
                    1505   1505 ;                E -- ending address
                    1506   1506 ;     iv) Rdtape F -- filename
                    1507   1507 
                    1508   1508 STEPDP:
                    1509   1509 ;Display step buffer and its parameter name.
                    1510   1510 ;Input:	STATE
                    1511   1511 ;	STMINOR (parameter count)
                    1512   1512 ;registers destroyed: AF, BC, DE, HL
                    1513   1513 
043a  cd 55 04      1514   1514 	CALL	LOCSTBF		;Get parameter address
043d  5e            1515   1515 	LD	E, (HL)		;Load parameter into DE
043e  23            1516   1516 	INC	HL
043f  56            1517   1517 	LD	D, (HL)
0440  cd 65 06      1518   1518 	CALL	ADDRDP		;Convert this paramter to
                    1519   1519 				;display format (4 digits)
                    1520   1520 				;and store it into DISPBF+2
                    1521   1521 				; - DISPBF+5
0443  21 b8 ff      1522   1522 	LD	HL, DISPBF+2	;Set 4 decimal points
                    1523   1523 				;From DISPBF+2 to DISPBF+5
0446  06 04         1524   1524 	LD	B, 4
0448  cd 34 04      1525   1525 	CALL	SETPT
044b  cd 5f 04      1526   1526 	CALL	LOCSTNA		;Get parameter name.
044e  6f            1527   1527 	LD	L, A
044f  26 02         1528   1528 	LD	H, 2		;Pattern '-' for 2nd rightmost
                    1529   1529 				;digit.
0451  22 b6 ff      1530   1530 	LD	(DISPBF), HL
0454  c9            1531   1531 	RET
                    1532   1532 ;
                    1533   1533 LOCSTBF:
                    1534   1534 ;Get the location of paramter.
                    1535   1535 ; address = STEPBF + STMINOR*2
                    1536   1536 ;registers destroyed: AF, HL
                    1537   1537 
0455  3a e3 ff      1538   1538 	LD	A, (STMINOR)	;Get parameter count.
0458  87            1539   1539 	ADD	A, A		;Each parameter has 2 bytes
0459  21 af ff      1540   1540 	LD	HL, STEPBF	;Get base address
045c  85            1541   1541 	ADD	A, L
045d  6f            1542   1542 	LD	L, A
045e  c9            1543   1543 	RET
                    1544   1544 ;
                    1545   1545 LOCSTNA
                    1546   1546  ;Get parameter name.
                    1547   1547  ;Input: STATE, STMINOR
                    1548   1548  ;Output: parameter name in A, and Z flag.
                    1549   1549 
                    1550   1550  ;registers destroyed: AF, DE
045f  3a e4 ff      1551   1551 	LD	A, (STATE)	;Get STATE.
                    1552   1552 				;Possible states are:
                    1553   1553 				;4,5,6,7. (Move, Rel,
                    1554   1554 				;WRtape, RDtape)
0462  d6 04         1555   1555 	SUB	4		;Change 4,5,6,7 to
                    1556   1556 				;0,1,2,3
0464  87            1557   1557 	ADD	A, A		;Each state has 4 bytes for names
0465  87            1558   1558 	ADD	A, A
0466  11 bc 07      1559   1559 	LD	DE, STEPTAB
0469  83            1560   1560 	ADD	A, E
046a  5f            1561   1561 	LD	E, A		;Now, DE contains the
                    1562   1562 				;address of 1st name
                    1563   1563 				;for each state.
046b  3a e3 ff      1564   1564 	LD	A, (STMINOR)	;Get parameter count
046e  83            1565   1565 	ADD	A, E		;DE <--- DE + A
046f  5f            1566   1566 	LD	E, A
0470  1a            1567   1567 	LD	A, (DE)		;Get parameter name.
0471  b7            1568   1568 	OR	A		;Change zero flag.  If the
                    1569   1569 				;returned pattern (in A) is
                    1570   1570 				;zero,  the '+' or '-' must
                    1571   1571 				;have been pressed beyond legal
                    1572   1572 				;parameter boundary. (Check if
                    1573   1573 				;parameter name got from STEPTAB
                    1574   1574 				;is zero)
0472  c9            1575   1575 	RET
                    1576   1576 ;
                    1577   1577 ;***********************************************************
                    1578   1578 ; Register display format:
                    1579   1579 
                    1580   1580 ;       i)  X X X X  Y Y -- State is REGAD.  The numeric
                    1581   1581 ;                           data entered is interpreted as 
                    1582   1582 ;                           register name.
                    1583   1583 ;                           YY is the register name, the
                    1584   1584 ;                           data of that register pair is,
                    1585   1585 ;                           XXXX.
                    1586   1586 
                    1587   1587 ;      ii)  X X X.X. Y Y or
                    1588   1588 ;     iii)  X.X.X X  Y Y -- State is REGDA.  The unit of
                    1589   1589 ;                           register modification is byte.
                    1590   1590 ;                           The numeric data enterd will
                    1591   1591 ;                           change the byte with decimal
                    1592   1592 ;                           points under it.  Decimal points
                    1593   1593 ;                           can be moved by '+' and '-' keys
                    1594   1594 
                    1595   1595 REGDP8:
                    1596   1596 ; Display register and set STATE to 8.
                    1597   1597 
0473  3e 08         1598   1598 	LD	A, 8		;Next state = 8
0475  18 02         1599   1599 	JR	RGSTIN
                    1600   1600 
                    1601   1601 REGDP9:
                    1602   1602 ; Display register and set STATE to 9
                    1603   1603 
0477  3e 09         1604   1604 	LD	A, 9		;Next state = 9
                    1605   1605 
                    1606   1606 RGSTIN:
                    1607   1607 ; Update STATE by register A.
                    1608   1608 ; Display user's  register (count
                    1609   1609 ; contained in STMINOR).
                    1610   1610 ; registers destroyed: AF, BC, DE, HL
                    1611   1611 
0479  32 e4 ff      1612   1612 	LD	(STATE), A	;Update STATE
047c  3a e3 ff      1613   1613 	LD	A, (STMINOR)	;Get register coutn.
047f  cb 87         1614   1614 	RES	0, A		;Registers are displayed by
                    1615   1615 				;pairs.  Find the count
                    1616   1616 				;of pair leader.  (count of
                    1617   1617 				;the lower one)
0481  47            1618   1618 	LD	B, A		;Temprorarily save A.
0482  cd ae 04      1619   1619 	CALL	RGNADP		;Find register count.
                    1620   1620 				;Store them into DISPBF
                    1621   1621 				;and DISPBF+1.
0485  78            1622   1622 	LD	A, B		;Restore A (register pair leader).
0486  cd be 04      1623   1623 	CALL	LOCRG		;Get the address of
                    1624   1624 				;user's register.
0489  5e            1625   1625 	LD	E, (HL)		;Get register data. (2 bytes)
048a  23            1626   1626 	INC	HL
048b  56            1627   1627 	LD	D, (HL)
048c  ed 53 de ff   1628   1628 	LD	(ADSAVE), DE	;Convert them to display
                    1629   1629 				;format and store into
                    1630   1630 				;display buffer.
0490  cd 65 06      1631   1631 	CALL	ADDRDP
0493  3a e4 ff      1632   1632 	LD	A, (STATE)
0496  fe 09         1633   1633 	CP	9		;If STATE equals to 9 (RGDA),
                    1634   1634 				;set 2 decimal points.
                    1635   1635 				;Otherwise return here.
0498  c0            1636   1636 	RET	NZ
0499  21 b8 ff      1637   1637 	LD	HL, DISPBF+2
049c  3a e3 ff      1638   1638 	LD	A, (STMINOR)	;Get register name.
049f  cb 47         1639   1639 	BIT	0, A		;If this register is
                    1640   1640 				;group leader, set decimal
                    1641   1641 				;points of two central digits.
                    1642   1642 				;Otherwise set two left digits.
04a1  28 02         1643   1643 	JR	Z, LOCPT
04a3  23            1644   1644 	INC	HL
04a4  23            1645   1645 	INC	HL
04a5  cb f6         1646   1646 LOCPT	SET	6, (HL)		;Set decimapl points of
                    1647   1647 				;(HL) and (HL+1)
04a7  23            1648   1648 	INC	HL
04a8  cb f6         1649   1649 	SET	6, (HL)
04aa  cd c4 04      1650   1650 	CALL	FCONV		;Convert user's flag (F, F')
                    1651   1651 				;to binary display format.
04ad  c9            1652   1652 	RET
                    1653   1653 ;
                    1654   1654 RGNADP:
                    1655   1655 ; Get the patterns of register names and
                    1656   1656 ; store them into DISPBF and DISPBF+1.
                    1657   1657 ; Input: A contains register count of
                    1658   1658 ;        pair leader.
                    1659   1659 ; registers destroyed: AF,DE,HL
                    1660   1660 
04ae  21 d0 07      1661   1661 	LD	HL, RGTAB	;Get address of pattern
                    1662   1662 				;table.
04b1  85            1663   1663 	ADD	A, L
04b2  6f            1664   1664 	LD	L, A
04b3  5e            1665   1665 	LD	E, (HL)		;Get first pattern
04b4  23            1666   1666 	INC	HL
04b5  56            1667   1667 	LD	D, (HL)		;Get 2nd pattern.
04b6  ed 53 b6 ff   1668   1668 	LD	(DISPBF), DE
04ba  c9            1669   1669 	RET
                    1670   1670 ;
                    1671   1671 LOCRGBF:
                    1672   1672 ; Get the address of user's register.
                    1673   1673 ; Register name contained is STMINOR.
                    1674   1674 ; Destroys HL, AF.
                    1675   1675 
04bb  3a e3 ff      1676   1676 	LD	A, (STMINOR)
04be  21 bc ff      1677   1677 LOCRG	LD	HL, REGBF
04c1  85            1678   1678 	ADD	A, L
04c2  6f            1679   1679 	LD	L, A
04c3  c9            1680   1680 	RET
                    1681   1681 ;
                    1682   1682 FCONV:
                    1683   1683 ; Encode or decode user's flag register.
                    1684   1684 ; STMINOR contains the name of the flag
                    1685   1685 ; being displayed now.
                    1686   1686 ; registers destroyed: AF, BC, HL.
                    1687   1687 
04c4  3a e3 ff      1688   1688 	LD	A, (STMINOR)	;Get register name.
04c7  b7            1689   1689 	OR	A		;Clear carry flag.
04c8  1f            1690   1690 	RRA			;name of I register: 17H,
                    1691   1691 				;name of IFF: 16H.
                    1692   1692 				;Rotate right one bit, both
                    1693   1693 				;become 0BH.
04c9  fe 0b         1694   1694 	CP	0BH
04cb  28 09         1695   1695 	JR	Z, FLAGX	;Jump to FLAGX if
                    1696   1696 				;I or IFF is being
                    1697   1697 				;displayed now.
04cd  4f            1698   1698 	LD	C, A		;Otherwise, mask out bit
                    1699   1699 				;1 to bit 7 fof user's IFF.
                    1700   1700 				;IFF is only 1 bit, monitor
                    1701   1701 				;uses one byte to store it,
                    1702   1702 				;masking out bit 1-7 is to
                    1703   1703 				;ignore the useless bits.
                    1704   1704 				;This is done only when the
                    1705   1705 				;user is not modifying IFF.
                    1706   1706 				;If user is modifying IFF,
                    1707   1707 				;monitor will display whatever
                    1708   1708 				;he enters, even if bit 1-7
                    1709   1709 				;are not all zero.
                    1710   1710 				;A register is not changed
                    1711   1711 				;after doing this.
04ce  21 d2 ff      1712   1712 	LD	HL, USERIF
04d1  7e            1713   1713 	LD	A, (HL)
04d2  e6 01         1714   1714 	AND	00000001B
04d4  77            1715   1715 	LD	(HL), A
04d5  79            1716   1716 	LD	A, C
04d6  fe 0c         1717   1717 FLAGX	CP	0CH		;If STMINOR contains
                    1718   1718 				;the name of SZXH, XPNC,
                    1719   1719 				;SZXH' or XPNC', after
                    1720   1720 				;rotating right one bit
                    1721   1721 				;it will be greater than
                    1722   1722 				;or equal to 0CH.
                    1723   1723 				;Decode user's flag if it
                    1724   1724 				;is not being modified now,
                    1725   1725 				;encode it otherwise.
04d8  30 1f         1726   1726 	JR	NC, FCONV2
04da  3a bc ff      1727   1727 FCONV1	LD	A, (USERAF)	;Get user's F register
04dd  cd 18 05      1728   1728 	CALL	DECODE		;Decode upper 4 bits.
04e0  22 d4 ff      1729   1729 	LD	(FLAGH), HL
04e3  cd 18 05      1730   1730 	CALL	DECODE		;Decode lower 4 bits.
04e6  22 d6 ff      1731   1731 	LD	(FLAGL), HL
04e9  3a c4 ff      1732   1732 	LD	A, (UAFP)	;Get user's F' register.
04ec  cd 18 05      1733   1733 	CALL	DECODE
04ef  22 d8 ff      1734   1734 	LD	(FLAGHP), HL
04f2  cd 18 05      1735   1735 	CALL	DECODE
04f5  22 da ff      1736   1736 	LD	(FLAGLP), HL
04f8  c9            1737   1737 	RET
04f9  2a d4 ff      1738   1738 FCONV2	LD	HL, (FLAGH)	;Get the binary form
                    1739   1739 				;of 4 upper bits of
                    1740   1740 				;user's F register.
04fc  cd 23 05      1741   1741 	CALL	ENCODE		;Encode it.
04ff  2a d6 ff      1742   1742 	LD	HL, (FLAGL)	;Encode 4 lower bits.
0502  cd 23 05      1743   1743 	CALL	ENCODE
0505  32 bc ff      1744   1744 	LD	(USERAF), A	;Save the encoded
                    1745   1745 				;result into USERAF.
0508  2a d8 ff      1746   1746 	LD	HL, (FLAGHP)	;Encode F' register.
050b  cd 23 05      1747   1747 	CALL	ENCODE
050e  2a da ff      1748   1748 	LD	HL, (FLAGLP)
0511  cd 23 05      1749   1749 	CALL	ENCODE
0514  32 c4 ff      1750   1750 	LD	(UAFP), A
0517  c9            1751   1751 	RET
                    1752   1752 ;
                    1753   1753 DECODE:
                    1754   1754 ; Decode bit 7-4 of A register.
                    1755   1755 ; Each bit is extended to 4 bits.
                    1756   1756 ; 0 becomes 0000, 1 becomes 0001.
                    1757   1757 ; The output is stored in HL, which
                    1758   1758 ; is 16 bits in length.  Also, after
                    1759   1759 ; execution, bits 7-4 of A register are
                    1760   1760 ; bits 3-0 of A before execution.
                    1761   1761 ; Registers destroyed: AF, B, HL
                    1762   1762 
0518  06 04         1763   1763 	LD	B, 4		;Loop 4 times
051a  29            1764   1764 DRL4	ADD	HL, HL		;Clear rightmost 3
                    1765   1765 				;bits of HL.
051b  29            1766   1766 	ADD	HL, HL
051c  29            1767   1767 	ADD	HL, HL
051d  07            1768   1768 	RLCA
051e  ed 6a         1769   1769 	ADC	HL, HL		;The 4th bit of HL
                    1770   1770 				;is determined by carry
                    1771   1771 				;flag, which is the MSB
                    1772   1772 				;of A register.
0520  10 f8         1773   1773 	DJNZ	DRL4
0522  c9            1774   1774 	RET
                    1775   1775 ;
                    1776   1776 ENCODE:
                    1777   1777 ; Encode HL register.  Each 4 bits of HL
                    1778   1778 ; are encoded to 1 bit. 0000 become 0,
                    1779   1779 ; 0001 become 1.  The result is stored
                    1780   1780 ; in bit 3-0 of A register.  Also, after
                    1781   1781 ; execution, bit 7-4 of A are bit 3-0
                    1782   1782 ; before execution.
                    1783   1783 ; Registers AF, B, HL are destroyed.
                    1784   1784 
0523  06 04         1785   1785 	LD	B, 4		;Loop 4 times.
0525  29            1786   1786 ERL4	ADD	HL, HL		;Shift HL left 4 bits.
                    1787   1787 				;Bit 12 of HL will be
                    1788   1788 				;shifted into carry flag.
0526  29            1789   1789 	ADD	HL, HL
0527  29            1790   1790 	ADD	HL, HL
0528  29            1791   1791 	ADD	HL, HL
0529  17            1792   1792 	RLA			;Rotate carry flag into
                    1793   1793 				;A register.
052a  10 f9         1794   1794 	DJNZ	ERL4
052c  c9            1795   1795 	RET
                    1796   1796 ;
                    1797   1797 ;***********************************************************
                    1798   1798 SUM1:
                    1799   1799 ; Calculate the sum of the data in a memory
                    1800   1800 ; block.  The starting and ending address
                    1801   1801 ; of this block are stored in STEPBF+2 - STEPBF+4
                    1802   1802 ;   Registers AF, BC, DE, HL are destroyed.
                    1803   1803 
052d  cd 3a 05      1804   1804 	CALL	GETPTR		;Get parameters from
                    1805   1805 				;step buffer.
0530  d8            1806   1806 	RET	C		;Return if the parameters
                    1807   1807 				;are illegal.
                    1808   1808 SUM:
                    1809   1809 ; Calculate the sum of a memory block.
                    1810   1810 ; HL contains the starting address of
                    1811   1811 ; this block, BC contains the length.
                    1812   1812 ; The result is stored in A.  Registers
                    1813   1813 ; AF, BC, HL are destroyed.
                    1814   1814 
0531  af            1815   1815 	XOR	A		;Clear A
0532  86            1816   1816 SUMCAL	ADD	A, (HL)		;Add
0533  ed a1         1817   1817 	CPI
0535  ea 32 05      1818   1818 	JP	PE, SUMCAL
0538  b7            1819   1819 	OR	A		;Clear flags.
0539  c9            1820   1820 	RET
                    1821   1821 ;
                    1822   1822 GETPTR:
                    1823   1823 ; Get parameters from step buffer.
                    1824   1824 ; Input:  (STEPBF+2) and (STEPBF+3) contain
                    1825   1825 ;         starting address.
                    1826   1826 ;         (STEPBF+4) and (STEPBF+5) contain
                    1827   1827 ;         ending address.
                    1828   1828 ; Output: HL register contains the starting
                    1829   1829 ;         address.
                    1830   1830 ;         BC register contains the length.
                    1831   1831 ;         Carry flag 0 -- BC positive
                    1832   1832 ;                    1 -- BC negative
                    1833   1833 ; Destroyed registers: AF, BC, DE, HL.
                    1834   1834 
053a  21 b1 ff      1835   1835 	LD	HL, STEPBF+2
053d  5e            1836   1836 GETP	LD	E, (HL)		;Load starting address
                    1837   1837 				;into DE.
053e  23            1838   1838 	INC	HL
053f  56            1839   1839 	LD	D, (HL)
0540  23            1840   1840 	INC	HL
0541  4e            1841   1841 	LD	C, (HL)
0542  23            1842   1842 	INC	HL		;Load ending address
                    1843   1843 				;into HL.
0543  66            1844   1844 	LD	H, (HL)
0544  69            1845   1845 	LD	L, C
0545  b7            1846   1846 	OR	A		;Clear carry flag.
0546  ed 52         1847   1847 	SBC	HL, DE		;Find difference.
                    1848   1848 				;Carry flag is changed here.
0548  4d            1849   1849 	LD	C, L
0549  44            1850   1850 	LD	B, H
054a  03            1851   1851 	INC 	BC		;Now BC contains the
                    1852   1852 				;length.
054b  eb            1853   1853 	EX	DE, HL		;Now HL contains the
                    1854   1854 				;starting address.
054c  c9            1855   1855 	RET
                    1856   1856 ;
                    1857   1857 TAPEIN:
                    1858   1858 ; Load a memory block from tape.
                    1859   1859 ; Input: HL -- starting address of the block
                    1860   1860 ;        BC -- length of the block
                    1861   1861 ; Output: Carry flag 1 -- reading error
                    1862   1862 ;                    0 -- no error
                    1863   1863 ; Destroyed registers: AF, BC, DE, HL, AF', BC', DE', HL'
                    1864   1864 
054d  af            1865   1865 	XOR	A		;Clear carry flag.
                    1866   1866 				;At beginning, the reading is
                    1867   1867 				;no error.
054e  08            1868   1868 	EX	AF, AF'
054f  cd 5a 05      1869   1869 TLOOP	CALL	GETBYTE		;Read 1 byte from tape.
0552  73            1870   1870 	LD	(HL), E		;Store it into memory.
0553  ed a1         1871   1871 	CPI
0555  ea 4f 05      1872   1872 	JP	PE, TLOOP	;Loop until length
                    1873   1873 				;is zero.
0558  08            1874   1874 	EX	AF, AF'
0559  c9            1875   1875 	RET
                    1876   1876 ;
                    1877   1877 GETBYTE:
                    1878   1878 ; Read one byte from tape.
                    1879   1879 ; Output: E -- data read
                    1880   1880 ;         Carry of F' 1 -- reading error
                    1881   1881 ;                     0 -- no error
                    1882   1882 ; Destroy registers: AF, DE, AF', BC', DE', HL',
                    1883   1883 ;Byte format:
                    1884   1884 
                    1885   1885 ; start bit bit bit bit bit bit bit bit stop
                    1886   1886 ;  bit   0   1   2   3   4   5   6   7   bit
                    1887   1887 
055a  cd 6b 05      1888   1888 	CALL	GETBIT		;Get start bit.
055d  16 08         1889   1889 	LD	D, 8		;Loop 8 times
055f  cd 6b 05      1890   1890 BLOOP	CALL	GETBIT		;Get one data bit.
                    1891   1891 				;Result in carry flag.
0562  cb 1b         1892   1892 	RR	E		;Rotate it into E.
0564  15            1893   1893 	DEC	D
0565  20 f8         1894   1894 	JR	NZ, BLOOP
0567  cd 6b 05      1895   1895 	CALL	GETBIT		;Get stop bit.
056a  c9            1896   1896 	RET
                    1897   1897 ;
                    1898   1898 ;
                    1899   1899 GETBIT:
                    1900   1900 ; Read one bit from tape.
                    1901   1901 ; Output: Carry of F:  0 -- this bit is 0
                    1902   1902 ;                      1 -- this bit is 1
                    1903   1903 ;         Carry of F': 1 -- reading error
                    1904   1904 ;                      0 -- no error
                    1905   1905 ; Destroyed registers: AF, AF', BC', DE', HL'
                    1906   1906 ; Bit format:
                    1907   1907 
                    1908   1908 ;   0 -- 2 kHz 8 cycles + 1kHz 2 cycles.
                    1909   1909 ;   1 -- 2 kHz 4 cycles + 1kHz 4 cycles.
                    1910   1910 
056b  d9            1911   1911 	EXX			;Save HL, BC, DE registers
                    1912   1912 
                    1913   1913 ; The tape-bit format of both 0 and 1 are
                    1914   1914 ; the same form: a high freq part followed by a
                    1915   1915 ; low freq part. The difference between 0 and 1
                    1916   1916 ; is the number of high freq cycles and low freq
                    1917   1917 ; cycles.  Thus, a high freq period may have
                    1918   1918 ; two meanings:
                    1919   1919 ;  i) It is used to count the number of high
                    1920   1920 ;     freq cycles of the current tape-bit;
                    1921   1921 ; ii) If a high freq period is detected
                    1922   1922 ;     immediately after a low freq period, then
                    1923   1923 ;     this period is the first cycle of next
                    1924   1924 ;     tape-bit and is used as a terminator of the
                    1925   1925 ;     last tape-bit.
                    1926   1926 
                    1927   1927 ; Bit 0 of H register is used to indicate the usage
                    1928   1928 ; of a high freq period.  If this bit is zero, high
                    1929   1929 ; freq period causes counter increment for the current
                    1930   1930 ; tape-bit.  If the high freq part has passed, bit 0
                    1931   1931 ; of H is set and the next high freq period will be used
                    1932   1932 ; as a terminator.
                    1933   1933 ; L register is used to up/down count the number of periods.
                    1934   1934 ; when a high freq period is read, L is increased by
                    1935   1935 ; 1; when a low freq period is read, L is decreased
                    1936   1936 ; by 2. (The time duration for each count is 0.5 ms.)
                    1937   1937 ; At the end of a tape-bit, positive and negative L
                    1938   1938 ; stand for 0 and 1 respectively.
                    1939   1939 
056c  21 00 00      1940   1940 	LD	HL, 0		;Clear bit 0 of H,
                    1941   1941 				;Set L to 0.
056f  cd 8c 05      1942   1942 COUNT	CALL	PERIOD		;Read one period.
0572  14            1943   1943 	INC	D		;The next 2 instructions
                    1944   1944 				;check if D is zero.  Carry
                    1945   1945 				;flag is not affected.
0573  15            1946   1946 	DEC	D
0574  20 11         1947   1947 	JR	NZ, TERR	;If D is not zero, jump
                    1948   1948 				;to error routine TERR.
                    1949   1949 				;(Because the period is too
                    1950   1950 				;much longer than that of 1 kHz.)
0576  38 06         1951   1951 	JR	C, SHORTP	;If the period is short
                    1952   1952 				;(2 kHz), jump to SHORTP.
0578  2d            1953   1953 	DEC	L		;The period is 1 kHz,
                    1954   1954 				;decrease L by 2.  And set
                    1955   1955 				;bit 0 of H to indicate this
                    1956   1956 				;tape-bit has passed high freq
                    1957   1957 				;part and reaches its low freq part.
0579  2d            1958   1958 	DEC	L
057a  cb c4         1959   1959 	SET	0, H
057c  18 f1         1960   1960 	JR	COUNT
057e  2c            1961   1961 SHORTP	INC	L		;The period is 2 kHz,
                    1962   1962 				;increase L by 1.
057f  cb 44         1963   1963 	BIT	0, H		;If the tape-bit has passed
                    1964   1964 				;its high freq part, high frequency
                    1965   1965 				;means this bit is all over and
                    1966   1966 				;next bit has started.
0581  28 ec         1967   1967 	JR	Z, COUNT
                    1968   1968 				;L = (# of 2kHz periods) - 
                    1969   1969 				;    2*(# of 1kHz periods)
0583  cb 15         1970   1970 	RL	L
                    1971   1971 				; 0 --- NCarry (L positive)
                    1972   1972 				; 1 ---  Carry (L negative)
                    1973   1973 				;The positive or negative sign of
                    1974   1974 				;L corresponds to the tape-bit data.
                    1975   1975 				;'RL  L' will shift the sign bit of
                    1976   1976 				;L into carry flag.  After this
                    1977   1977 				;instruction, the carry flag
                    1978   1978 				;contains the tape-bit.
0585  d9            1979   1979 	EXX			;Restore BC', DE', HL'
0586  c9            1980   1980 	RET
0587  08            1981   1981 TERR	EX	AF, AF'
0588  37            1982   1982 	SCF			;Set carry flag of F' to indicate error.
0589  08            1983   1983 	EX	AF, AF'
058a  d9            1984   1984 	EXX
058b  c9            1985   1985 	RET
                    1986   1986 ;
                    1987   1987 PERIOD:
                    1988   1988 ; Wait the tape to pass one period.
                    1989   1989 ; The time duration is stored in DE.  The
                    1990   1990 ; unit is loop count.  Typical value for
                    1991   1991 ; 2kHz is 28, for 1 kHz is 56.
                    1992   1992 ; Use (56+28)/2 as threshold.  The returned
                    1993   1993 ; result is in carry flag. (1 kHz -- NC, 2 kHz -- C)
                    1994   1994 ; Registers destroyed: AF, DE
                    1995   1995 
058c  11 00 00      1996   1996 	LD	DE, 0
058f  db 00         1997   1997 LOOPH	IN	A, (KIN)	;Bit 7 of port A is Tapein.
0591  13            1998   1998 	INC	DE
0592  17            1999   1999 	RLA
0593  38 fa         2000   2000 	JR	C, LOOPH	;Loop until input goes low.
0595  3e ff         2001   2001 	LD	A, 11111111B	;Echo the tape input to
                    2002   2002 				;speaker.
0597  d3 02         2003   2003 	OUT	(DIGIT), A
0599  db 00         2004   2004 LOOPL	IN	A, (KIN)
059b  13            2005   2005 	INC	DE
059c  17            2006   2006 	RLA
059d  30 fa         2007   2007 	JR	NC, LOOPL	;Loop until input goes high.
059f  3e 7f         2008   2008 	LD	A, 01111111B	;Echo the tape input to
                    2009   2009 				;speaker.
05a1  d3 02         2010   2010 	OUT	(DIGIT), A
05a3  7b            2011   2011 	LD	A, E		;Compare the result with
                    2012   2012 				;the threshold.
05a4  fe 2a         2013   2013 	CP	MPERIOD
05a6  c9            2014   2014 	RET
                    2015   2015 ;
                    2016   2016 ;***********************************************************
                    2017   2017 TAPEOUT:
                    2018   2018 ; Output a memory block to tape.
                    2019   2019 ; Input: HL -- starting address of the block
                    2020   2020 ;        BC -- length of the block
                    2021   2021 ; Destroyed registers: AF, BC, DE, HL, BC', DE', HL'
                    2022   2022 
05a7  5e            2023   2023 	LD	E, (HL)		;Get the data.
05a8  cd b1 05      2024   2024 	CALL	OUTBYTE		;Output to tape.
05ab  ed a1         2025   2025 	CPI
05ad  ea a7 05      2026   2026 	JP	PE, TAPEOUT	; Loop until finished.
05b0  c9            2027   2027 	RET
                    2028   2028 ;
                    2029   2029 OUTBYTE:
                    2030   2030 ; Output one byte to tape.  For tape-byte
                    2031   2031 ; format, see coments on GETBYTE.
                    2032   2032 ; Input: E -- data
                    2033   2033 ; Destroyed registers: AF, DE, BC', DE', HL'
                    2034   2034 
05b1  16 08         2035   2035 	LD	D, 8		;Loop 8 times
05b3  b7            2036   2036 	OR	A		;Clear carry flag.
05b4  cd c4 05      2037   2037 	CALL	OUTBIT		;Output start bit.
05b7  cb 1b         2038   2038 OLOOP	RR	E		;Rotate data into carry
05b9  cd c4 05      2039   2039 	CALL	OUTBIT		;Output the carry
05bc  15            2040   2040 	DEC	D
05bd  20 f8         2041   2041 	JR	NZ, OLOOP
05bf  37            2042   2042 	SCF			;Set carry flag.
05c0  cd c4 05      2043   2043 	CALL	OUTBIT		;Output stop bit
05c3  c9            2044   2044 	RET
                    2045   2045 ;
                    2046   2046 OUTBIT:
                    2047   2047 ; Output one bit to tape.
                    2048   2048 ; Input: data in carry flag.
                    2049   2049 ; Destroyed registers: AF, BC', DE', HL'
05c4  d9            2050   2050 	EXX			;Save BC, DE, HL.
05c5  26 00         2051   2051 	LD	H, 0
05c7  38 09         2052   2052 	JR	C, OUT1		;If data=1, output 1.
                    2053   2053 OUT0:				;2kHz 8 cycles, 1kHz 2 cycles.
05c9  2e 08         2054   2054 	LD	L, ZERO_2K
05cb  cd e2 05      2055   2055 	CALL	TONE2K
05ce  2e 02         2056   2056 	LD	L, ZERO_1K
05d0  18 07         2057   2057 	JR	BITEND
                    2058   2058 ;
                    2059   2059 OUT1:				;2kHz 4 cycles, 1kHz 4 cycles.
05d2  2e 04         2060   2060 	LD	L, ONE_2K
05d4  cd e2 05      2061   2061 	CALL	TONE2K
05d7  2e 04         2062   2062 	LD	L, ONE_1K
05d9  cd de 05      2063   2063 BITEND	CALL	TONE1K
05dc  d9            2064   2064 	EXX			;Restore registers.
05dd  c9            2065   2065 	RET
                    2066   2066 ;
                    2067   2067 ;***********************************************************
                    2068   2068 ;
                    2069   2069 ;        UTILITY SUBROUTINES
                    2070   2070 ;
                    2071   2071 ;***********************************************************
                    2072   2072 ;
                    2073   2073 ; Function: Generate square wave to the MIC & speaker
                    2074   2074 ;           on 'HELLO '
                    2075   2075 ; Input:    C -- period = 2*(44+13*C) clock states.
                    2076   2076 ;          HL -- number of periods.
                    2077   2077 ; Output:  none.
                    2078   2078 ; Destroyed registers: AF, B, DE, HL.
                    2079   2079 ; Call: none
                    2080   2080 
                    2081   2081 TONE1K:
05de  0e 41         2082   2082 	LD	C, F1KHZ
05e0  18 02         2083   2083 	JR	TONE
                    2084   2084 TONE2K:
05e2  0e 1f         2085   2085 	LD	C, F2KHZ
                    2086   2086 TONE:				;Half period: 44+13*C states
05e4  29            2087   2087 	ADD	HL, HL		;Double for half-cycle count
05e5  11 01 00      2088   2088 	LD	DE, 1
05e8  3e ff         2089   2089 	LD	A, 0FFH
05ea  d3 02         2090   2090 SQWAVE	OUT	(DIGIT), A	;Bit-7 tapeout
05ec  41            2091   2091 	LD	B, C
05ed  10 fe         2092   2092 	DJNZ	$		;Half period delay
05ef  ee 80         2093   2093 	XOR	80H		;Toggle output
05f1  ed 52         2094   2094 	SBC	HL, DE		;Decrement one count
05f3  20 f5         2095   2095 	JR	NZ, SQWAVE
05f5  c9            2096   2096 	RET
                    2097   2097 ;
                    2098   2098 ;***********************************************************
                    2099   2099 ; Function: check if a memory address is in RAM.
                    2100   2100 ; Input: HL -- address to be checked.
                    2101   2101 ; Output: Zero flag -- 0, ROM or nonexistant;
                    2102   2102 ;                      1, RAM.
                    2103   2103 ; Destroyed registers: AF
                    2104   2104 ; Call: none
                    2105   2105 
                    2106   2106 RAMCHK:
05f6  7e            2107   2107 	LD	A, (HL)
05f7  2f            2108   2108 	CPL
05f8  77            2109   2109 	LD	(HL), A
05f9  7e            2110   2110 	LD	A, (HL)
05fa  2f            2111   2111 	CPL
05fb  77            2112   2112 	LD	(HL), A
05fc  be            2113   2113 	CP	(HL)
05fd  c9            2114   2114 	RET
                    2115   2115 ;
                    2116   2116 ;***********************************************************
                    2117   2117 ; Function: Scan the keyboard and display.  Loop until
                    2118   2118 ;           a key is detected.  If the key is already
                    2119   2119 ;           pressed when this routien starts execution,
                    2120   2120 ;           return when next key is entered.
                    2121   2121 ; Input:    IX points to the buffer containing the display
                    2122   2122 ;           patterns.  6 LEDs require 6 byte data.
                    2123   2123 ;           (IX) contains the pattern for rightmost LED,
                    2124   2124 ;           (IX+5) contains the pattern for leftmost LED.
                    2125   2125 ; Output:   A = internal code of the key pressed.
                    2126   2126 ; Destroyed registers: AF, B, HL, AF', BC', DE'.
                    2127   2127 ;                      All other registers except IY are
                    2128   2128 ;                      also changed during execution, but
                    2129   2129 ;                      they are restored before return.
                    2130   2130 ; Call: SCAN1
                    2131   2131 
                    2132   2132 SCAN:
05fe  dd e5         2133   2133 	PUSH	IX		;Save IX.
0600  21 e6 ff      2134   2134 	LD	HL, TEST
0603  cb 7e         2135   2135 	BIT	7, (HL)		;This bit is set if the user
                    2136   2136 				;has entered illegal key.  The
                    2137   2137 				;display will be disables as
                    2138   2138 				;a warning to the user.  This
                    2139   2139 				;is done by replacing the display
                    2140   2140 				;buffer pointer IX by BLANK.
0605  28 04         2141   2141 	JR	Z, SCPRE
0607  dd 21 a5 07   2142   2142 	LD	IX, BLANK
                    2143   2143 
                    2144   2144 ; Wait until all keys are released for 40 ms.
                    2145   2145 ; (The execution time of SCAN1 is 10 ms,
                    2146   2146 ; 40 = 10 * 4.)
                    2147   2147 
060b  06 04         2148   2148 SCPRE	LD	B, 4
060d  cd 24 06      2149   2149 SCNX	CALL	SCAN1
0610  30 f9         2150   2150 	JR	NC, SCPRE	;If any key is pressed re-load
                    2151   2151 				;the debounce counter B by 4.
0612  10 f9         2152   2152 	DJNZ	SCNX
0614  cb be         2153   2153 	RES	7, (HL)		;Clear error-flag.
0616  dd e1         2154   2154 	POP	IX		;Restore original IX.
                    2155   2155 
                    2156   2156 ; Loop until any key is pressed.
                    2157   2157 
0618  cd 24 06      2158   2158 SCLOOP	CALL	SCAN1
061b  38 fb         2159   2159 	JR	C, SCLOOP
                    2160   2160 
                    2161   2161 ; Convert the key-position-code returned by SCAN1 to
                    2162   2162 ; key-internal-code.  This is done by table-lookup.
                    2163   2163 ; The table used is KEYTAB.
                    2164   2164 
061d  21 7b 07      2165   2165 KEYMAP	LD	HL, KEYTAB
0620  85            2166   2166 	ADD	A, L
0621  6f            2167   2167 	LD	L, A
0622  7e            2168   2168 	LD	A, (HL)
0623  c9            2169   2169 	RET
                    2170   2170 ;
                    2171   2171 ;***********************************************************
                    2172   2172 ; Function: Scan keyboard and display one cycle.
                    2173   2173 ;           Total execution time is about 10 ms (exactly
                    2174   2174 ;           9.95 ms, 17812 clock states @ 1.79 MHz).
                    2175   2175 ; Input: Same as SCAN.
                    2176   2176 ; Output:  i) no key during one scan
                    2177   2177 ;                  Carry flag -- 1
                    2178   2178 ;         ii) key pressed during one scan
                    2179   2179 ;                  Carry flag -- 0,
                    2180   2180 ;                  A -- position code of the key pressed.
                    2181   2181 ;                  If more than one key is pressed, A
                    2182   2182 ;                  contains the largest position-code.
                    2183   2183 ;                  (This key is the last key scanned.)
                    2184   2184 ; Destroyed registers: AF, AF', BC', DE' (see SCAN comments)
                    2185   2185 ; CALL: none.
                    2186   2186 
                    2187   2187 SCAN1:
                    2188   2188 ;In hardware, the display and keyboard are
                    2189   2189 ;arranged as a 6 by 6 matrix.  Each column
                    2190   2190 ;corresponds to one LED and six key buttons.
                    2191   2191 ;In normal operation, at most one column is
                    2192   2192 ;active.  The pattern of the active LED is the
                    2193   2193 ;data output on port C of 8255.  The data input
                    2194   2194 ;from bit 0-5 of port A are the status of key
                    2195   2195 ;buttons in the active column.  All signals on
                    2196   2196 ;I/O port are active low.
                    2197   2197 
0624  37            2198   2198 	SCF			;Set carry flag.
0625  08            2199   2199 	EX	AF, AF'
0626  d9            2200   2200 	EXX
                    2201   2201 
                    2202   2202 ;Carry flag of F' is used to return the status of
                    2203   2203 ;the keyboard.  If any key is pressed during one
                    2204   2204 ;scan, the flag is reset; otherwise it is set.
                    2205   2205 ;Initially, this flag is set.  A' register is used
                    2206   2206 ;to store the position-code of the key pressed.
                    2207   2207 ;In this routine, 36 key positions are checked one
                    2208   2208 ;by one.  C register contains the code of the key
                    2209   2209 ;being checked.  The value of C is 0 at the beginning
                    2210   2210 ;and is increased by 1 after each check.  So the code
                    2211   2211 ;ranges from 0 to 23H (total 36 positions).  On each
                    2212   2212 ;check, if the input bit is 0 (key pressed), C register
                    2213   2213 ;is copied into A'.  The carry flag of F' is set also.
                    2214   2214 ;When some key is detected, the key positions after
                    2215   2215 ;this key will still be checked.  So if more than
                    2216   2216 ;one key are pressed during one scan, the code of the
                    2217   2217 ;last one will be returned.
                    2218   2218 
0627  0e 00         2219   2219 	LD	C, 0		;Initial position code
0629  1e c1         2220   2220 	LD	E, 11000001B	;Scan from rightmost digit
062b  26 06         2221   2221 	LD	H, 6
                    2222   2222 				;to the active column.
062d  7b            2223   2223 KCOL	LD	A, E
062e  d3 02         2224   2224 	OUT	(DIGIT), A	;Activate one column.
0630  dd 7e 00      2225   2225 	LD	A, (IX+0)
0633  d3 01         2226   2226 	OUT	(SEG7), A
0635  06 c9         2227   2227 	LD	B, COLDEL
0637  10 fe         2228   2228 	DJNZ	$		;Delay 1.5 ms per digit.
0639  af            2229   2229 	XOR	A		;Deactivate all display segments
063a  d3 01         2230   2230 	OUT	(SEG7), A
063c  7b            2231   2231 	LD	A, E
063d  2f            2232   2232 	CPL
063e  f6 c0         2233   2233 	OR	11000000B
0640  d3 02         2234   2234 	OUT	(DIGIT), A
0642  06 06         2235   2235 	LD	B, 6		;Each column has 6 keys.
0644  db 00         2236   2236 	IN	A, (KIN)	;Now, bit 0-5 of A contain
                    2237   2237 				;the status of the 6 keys
                    2238   2238 				;in the active column.
0646  57            2239   2239 	LD	D, A		;Store A into D.
0647  cb 1a         2240   2240 KROW	RR	D		;Rotate D 1 bit right, bit 0
                    2241   2241 				;of D will be rotated into
                    2242   2242 				;carry flag.
0649  38 02         2243   2243 	JR	C, NOKEY	;Skip next 2 instructions
                    2244   2244 				;if the key is not pressed.
                    2245   2245 				;The next 2 instructions
                    2246   2246 				;store the current position-code
                    2247   2247 				;into A' and reset carry flag
                    2248   2248 				;of F' register.
064b  79            2249   2249 	LD	A, C		;Key-in, get key position.
064c  08            2250   2250 	EX	AF, AF'		;Save A & Carry in AF'.
064d  0c            2251   2251 NOKEY	INC	C		;Increase current key-code by 1.
064e  10 f7         2252   2252 	DJNZ	KROW		;Loop until 6 keys in the
                    2253   2253 				;active columns are checked.
0650  dd 23         2254   2254 	INC	IX
0652  7b            2255   2255 	LD	A, E
0653  e6 3f         2256   2256 	AND	00111111B
0655  cb 07         2257   2257 	RLC	A
0657  f6 c0         2258   2258 	OR	11000000B
0659  5f            2259   2259 	LD	E, A
065a  25            2260   2260 	DEC	H
065b  20 d0         2261   2261 	JR	NZ, KCOL
065d  11 fa ff      2262   2262 	LD	DE, -6
0660  dd 19         2263   2263 	ADD	IX, DE		;Get original IX.
0662  d9            2264   2264 	EXX
0663  08            2265   2265 	EX	AF, AF'
0664  c9            2266   2266 	RET
                    2267   2267 ;
                    2268   2268 ;***********************************************************
                    2269   2269 ; Function: Convert the 2 byte data stored in DE to
                    2270   2270 ;           7-segment display format.  The output is stored
                    2271   2271 ;           in the address field of DISPBF (display buffer),
                    2272   2272 ;           most significant digit in DISPBF+5.
                    2273   2273 ;           This routine is usually used by monitor only.
                    2274   2274 ; Destroyed registers: AF, HL.
                    2275   2275 ; Call: HEX7SG
                    2276   2276 
                    2277   2277 ADDRDP:
0665  21 b8 ff      2278   2278 	LD	HL, DISPBF+2
0668  7b            2279   2279 	LD	A, E
0669  cd 78 06      2280   2280 	CALL	HEX7SG
066c  7a            2281   2281 	LD	A, D
066d  cd 78 06      2282   2282 	CALL	HEX7SG
0670  c9            2283   2283 	RET
                    2284   2284 ;
                    2285   2285 ;***********************************************************
                    2286   2286 ; Function: Convert the data stored in A to 7-segment
                    2287   2287 ;           display format.  1 byte is converted to 2
                    2288   2288 ;           digits.  The result is stored in the data
                    2289   2289 ;           field of display buffer (DISPBF).
                    2290   2290 ;           This routine is usually used by monitor only.
                    2291   2291 ; Destroyed registers: AF, HL.
                    2292   2292 ; Call: HEX7SG
                    2293   2293 
                    2294   2294 DATADP:
0671  21 b6 ff      2295   2295 	LD	HL, DISPBF
0674  cd 78 06      2296   2296 	CALL	HEX7SG
0677  c9            2297   2297 	RET
                    2298   2298 ;
                    2299   2299 ;***********************************************************
                    2300   2300 ; Function: Convert binary data to 7-segment display
                    2301   2301 ;           format.
                    2302   2302 ; Input: 1 byte in A register
                    2303   2303 ;        HL points to the result buffer.
                    2304   2304 ; Output: Pattern for 2 digits.  Low order digit in (HL),
                    2305   2305 ;         high order digit in (HL+1).
                    2306   2306 ;         HL becomes HL+2.
                    2307   2307 ; Destroyed registers: AF, HL.
                    2308   2308 ; Call: HEX7
                    2309   2309 
                    2310   2310 HEX7SG:
0678  f5            2311   2311 	PUSH	AF
0679  cd 89 06      2312   2312 	CALL	HEX7
067c  77            2313   2313 	LD	(HL), A
067d  23            2314   2314 	INC	HL
067e  f1            2315   2315 	POP	AF
067f  0f            2316   2316 	RRCA
0680  0f            2317   2317 	RRCA
0681  0f            2318   2318 	RRCA
0682  0f            2319   2319 	RRCA
0683  cd 89 06      2320   2320 	CALL	HEX7
0686  77            2321   2321 	LD	(HL), A
0687  23            2322   2322 	INC	HL
0688  c9            2323   2323 	RET
                    2324   2324 ;
                    2325   2325 ;***********************************************************
                    2326   2326 ; Function: Convert binary data to 7-segment display
                    2327   2327 ;           format.
                    2328   2328 ; Input:  A -- LSB 4 bits contains the binary data
                    2329   2329 ; Output: A -- display pattern for 1 digit.
                    2330   2330 ; Destroyed registers: AF
                    2331   2331 ; Call: none
                    2332   2332 
                    2333   2333 HEX7:
0689  e5            2334   2334 	PUSH	HL
068a  21 f0 07      2335   2335 	LD	HL, SEGTAB
068d  e6 0f         2336   2336 	AND	0FH
068f  85            2337   2337 	ADD	A, L
0690  6f            2338   2338 	LD	L, A
0691  7e            2339   2339 	LD	A, (HL)
0692  e1            2340   2340 	POP	HL
0693  c9            2341   2341 	RET
                    2342   2342 ;
                    2343   2343 ;
                    2344   2344 ;***********************************************************
                    2345   2345 ; Function: RAM 8000-FFFF self-check.
                    2346   2346 ; Input: none
                    2347   2347 ; Output: none
                    2348   2348 ; Destroyed registers: AF, BC, HL
                    2349   2349 ; Call: RAMCHK
                    2350   2350 
                    2351   2351 RAMTEST:
0694  21 00 80      2352   2352 	LD	HL, 8000H
0697  01 00 80      2353   2353 	LD	BC, 8000H
069a  cd f6 05      2354   2354 RAMT	CALL	RAMCHK
069d  28 01         2355   2355 	JR	Z, TNEXT
069f  76            2356   2356 	HALT			;If error
06a0  ed a1         2357   2357 TNEXT	CPI
06a2  ea 9a 06      2358   2358 	JP	PE, RAMT
06a5  c7            2359   2359 	RST	00H		;Display 'HELLO '.
                    2360   2360 ;
                    2361   2361 ;***********************************************************
                    2362   2362 ;Monitor ROM self-check.  Add the data of address
                    2363   2363 ;0000 - 0800.  If the sum equals to 0, reset the monitor
                    2364   2364 ;and display 'HELLO '.  If the sum is not 0, which
                    2365   2365 ;indicates error, HALT. Summed by adding without carry.
                    2366   2366 ;Input: none.
                    2367   2367 ;Output: none.
                    2368   2368 ;Destroyed registers: AF, BC, HL.
                    2369   2369 ;Call: SUM.
                    2370   2370 
                    2371   2371 ROMTEST:
06a6  21 00 00      2372   2372 	LD	HL, 0
06a9  01 00 08      2373   2373 	LD	BC, 0800H
06ac  cd 31 05      2374   2374 	CALL	SUM
06af  28 01         2375   2375 	JR	Z, SUMOK
06b1  00            2376   2376 	NOP
                    2377   2377 ;	HALT			;If error.
06b2  c7            2378   2378 SUMOK	RST	00H		;Display 'HELLO '.
06b3  32 e5 ff      2379   2379 INI3	LD	(POWERUP), A	;Load power-code into (POWERUP).
                    2380   2380 				;The monitor uses the location to decide
                    2381   2381 				;wether a reset signal is on power-up.
06b6  3e 55         2382   2382 	LD	A, 55H
06b8  32 f0 ff      2383   2383 	LD	(BEEPSET), A
06bb  3e 44         2384   2384 	LD	A, 44H
06bd  32 f1 ff      2385   2385 	LD	(FBEEP), A	;Beep frequency when key is pressed.
06c0  21 f2 ff      2386   2386 	LD	HL, TBEEP
06c3  36 2f         2387   2387 	LD	(HL), 2FH	;Time duration of beep when
06c5  23            2388   2388 	INC	HL		;key is pressed.
06c6  36 00         2389   2389 	LD	(HL), 0
06c8  c3 d8 03      2390   2390 	JP	INI4
                    2391   2391 
06cb  f5            2392   2392 BEEP	PUSH	AF
06cc  21 f1 ff      2393   2393 	LD	HL, FBEEP
06cf  4e            2394   2394 	LD	C, (HL)
06d0  2a f2 ff      2395   2395 	LD	HL, (TBEEP)
06d3  3a f0 ff      2396   2396 	LD	A, (BEEPSET)
06d6  fe 55         2397   2397 	CP	55H
06d8  20 03         2398   2398 	JR	NZ, NOTONE	;There's no beep sound when the key is
                    2399   2399 				;pressed if data of (BEEPSET) is not 55H.
06da  cd e4 05      2400   2400 	CALL	TONE
                    2401   2401 NOTONE:
06dd  f1            2402   2402 	POP	AF
06de  c3 e9 00      2403   2403 	JP	KEYEXEC		;After a key is detected, determine
                    2404   2404 				;what action should the monitor take.
                    2405   2405 				;KEYEXEC uses the next 3 fators
                    2406   2406 				;to get the entry point of proper
                    2407   2407 				;service routine: key-code, STATE
                    2408   2408 				;and STMINOR (Minor-State).
                    2409   2409 ; Below are the branch tables for each key and
                    2410   2410 ; state.  The first entry of each table is
                    2411   2411 ; a base address, other entrys are the offset to
                    2412   2412 ; this address.  Offset is only one byte long,
                    2413   2413 ; which is much shorter than the 2-byte address.
                    2414   2414 ; This can save the monitor code space.
                    2415   2415 
                    2416   2416 	ORG	0737H
                    2417   2417 KSUBFUN
0737  1b 01         2418   2418 	DEFW	KINC
0739  00            2419   2419 	DEFB	KINC-KINC	;XXX - Should all be +, not -.
073a  05            2420   2420 	DEFB	-KINC-KDEC	;XXX - Should be -KINC+KDEC.
073b  0a            2421   2421 	DEFB	-KINC-KGO
073c  0f            2422   2422 	DEFB	-KINC-KSTEP
073d  1a            2423   2423 	DEFB	-KINC-KDATA
073e  2c            2424   2424 	DEFB	-KINC-KSBR
073f  42            2425   2425 	DEFB	-KINC-KINS
0740  7b            2426   2426 	DEFB	-KINC-KDEL
0741  c2 01         2427   2427 KFUN	DEFW	KPC
0743  00            2428   2428 	DEFB	-KPC-KPC
0744  1c            2429   2429 	DEFB	-KPC-KADDR
0745  0a            2430   2430 	DEFB	-KPC-KCBR
0746  14            2431   2431 	DEFB	-KPC-KREG
0747  20            2432   2432 	DEFB	-KPC-KMV
0748  20            2433   2433 	DEFB	-KPC-KRL
0749  26            2434   2434 	DEFB	-KPC-KWT
074a  26            2435   2435 	DEFB	-KPC-KRT
074b  ec 01         2436   2436 HTAB	DEFW	HFIX
074d  00            2437   2437 	DEFB	-HFIX-HFIX
074e  16            2438   2438 	DEFB	-HFIX-HAD
074f  03            2439   2439 	DEFB	-HFIX-HDA
0750  26            2440   2440 	DEFB	-HFIX-HRGFIX
0751  34            2441   2441 	DEFB	-HFIX-HMV
0752  34            2442   2442 	DEFB	-HFIX-HRL
0753  34            2443   2443 	DEFB	-HFIX-HWT
0754  34            2444   2444 	DEFB	-HFIX-HRT
0755  26            2445   2445 	DEFB	-HFIX-HRGAD
0756  44            2446   2446 	DEFB	-HFIX-HRGDA
0757  3d 02         2447   2447 ITAB	DEFW	IFIX
0759  00            2448   2448 	DEFB	-IFIX-IFIX
075a  03            2449   2449 	DEFB	-IFIX-IAD
075b  03            2450   2450 	DEFB	-IFIX-IDA
075c  00            2451   2451 	DEFB	-IFIX-IRGFIX
075d  0e            2452   2452 	DEFB	-IFIX-IMV
075e  0e            2453   2453 	DEFB	-IFIX-IRL
075f  0e            2454   2454 	DEFB	-IFIX-IWT
0760  0e            2455   2455 	DEFB	-IFIX-IRT
0761  1f            2456   2456 	DEFB	-IFIX-IRGAD
0762  1f            2457   2457 	DEFB	-IFIX-IRGDA
0763  6b 02         2458   2458 DTAB	DEFW	DFIX
0765  00            2459   2459 	DEFB	-DFIX-DFIX
0766  03            2460   2460 	DEFB	-DFIX-DAD
0767  03            2461   2461 	DEFB	-DFIX-DDA
0768  00            2462   2462 	DEFB	-DFIX-DRGFIX
0769  0e            2463   2463 	DEFB	-DFIX-DMV
076a  0e            2464   2464 	DEFB	-DFIX-DRL
076b  0e            2465   2465 	DEFB	-DFIX-DWT
076c  0e            2466   2466 	DEFB	-DFIX-DRT
076d  1f            2467   2467 	DEFB	-DFIX-DRGAD
076e  1f            2468   2468 	DEFB	-DFIX-DRGDA
076f  99 02         2469   2469 GTAB	DEFW	GFIX
0771  00            2470   2470 	DEFB	-GFIX-GFIX
0772  03            2471   2471 	DEFB	-GFIX-GAD
0773  03            2472   2472 	DEFB	-GFIX-GDA
0774  00            2473   2473 	DEFB	-GFIX-GRGFIX
0775  4b            2474   2474 	DEFB	-GFIX-GMV
0776  6d            2475   2475 	DEFB	-GFIX-GRL
0777  8b            2476   2476 	DEFB	-GFIX-GWT
0778  c1            2477   2477 	DEFB	-GFIX-GRT
0779  00            2478   2478 	DEFB	-GFIX-GRGAD
077a  00            2479   2479 	DEFB	-GFIX-GRGDA
                    2480   2480 
                    2481   2481 ; Key-posistion-code to key-internal-code conversion table.
                    2482   2482 
                    2483   2483 KEYTAB:
077b  03            2484   2484 K0	DEFB	03H	;HEX_3
077c  07            2485   2485 K1	DEFB	07H	;HEX_7
077d  0b            2486   2486 K2	DEFB	0BH	;HEX_B
077e  0f            2487   2487 K3	DEFB	0FH	;HEX_F
077f  20            2488   2488 K4	DEFB	20H	;NOT USED
0780  21            2489   2489 K5	DEFB	21H	;NOT USED
0781  02            2490   2490 K6	DEFB	02H	;HEX_2
0782  06            2491   2491 K7	DEFB	06H	;HEX_6
0783  0a            2492   2492 K8	DEFB	0AH	;HEX_A
0784  0e            2493   2493 K9	DEFB	0EH	;HEX_E
0785  22            2494   2494 K0A	DEFB	22H	;NOT USED
0786  23            2495   2495 K0B	DEFB	23H	;NOT USED
0787  01            2496   2496 K0C	DEFB	01H	;HEX_1
0788  05            2497   2497 K0D	DEFB	05H	;HEX_5
0789  09            2498   2498 K0E	DEFB	09H	;HEX_9
078a  0d            2499   2499 K0F	DEFB	0DH	;HEX_D
078b  13            2500   2500 K10	DEFB	13H	;STEP
078c  1f            2501   2501 K11	DEFB	1FH	;TAPERD
078d  00            2502   2502 K12	DEFB	00H	;HEX_0
078e  04            2503   2503 K13	DEFB	04H	;HEX_4
078f  08            2504   2504 K14	DEFB	08H	;HEX_8
0790  0c            2505   2505 K15	DEFB	0CH	;HEX_C
0791  12            2506   2506 K16	DEFB	12H	;GO
0792  1e            2507   2507 K17	DEFB	1EH	;TAPEWR
0793  1a            2508   2508 K18	DEFB	1AH	;CBR
0794  18            2509   2509 K19	DEFB	18H	;PC
0795  1b            2510   2510 K1A	DEFB	1BH	;REG
0796  19            2511   2511 K1B	DEFB	19H	;ADDR
0797  17            2512   2512 K1C	DEFB	17H	;DEL
0798  1d            2513   2513 K1D	DEFB	1DH	;RELA
0799  15            2514   2514 K1E	DEFB	15H	;SBR
079a  11            2515   2515 K1F	DEFB	11H	;-
079b  14            2516   2516 K20	DEFB	14H	;DATA
079c  10            2517   2517 K21	DEFB	10H	;+
079d  16            2518   2518 K22	DEFB	16H	;INS
079e  1c            2519   2519 K23	DEFB	1CH	;MOVE
                    2520   2520 ;
                    2521   2521 ;
                    2522   2522 ;
                    2523   2523 ;
079f  00            2524   2524 HELLO	DEFB	000H		;' '
07a0  bd            2525   2525 	DEFB	0BDH		;'O'
07a1  85            2526   2526 	DEFB	085H		;'L'
07a2  85            2527   2527 	DEFB	085H		;'L'
07a3  8f            2528   2528 	DEFB	08FH		;'E'
07a4  37            2529   2529 	DEFB	037H		;'H'
07a5  00            2530   2530 BLANK	DEFB	0
07a6  00            2531   2531 	DEFB	0
07a7  00            2532   2532 	DEFB	0
07a8  00            2533   2533 	DEFB	0
07a9  00            2534   2534 ERR_	DEFB	0
07aa  00            2535   2535 	DEFB	0
07ab  03            2536   2536 	DEFB	003H		;'R'
07ac  03            2537   2537 	DEFB	003H		;'R'
07ad  8f            2538   2538 	DEFB	08FH		;'E'
07ae  02            2539   2539 	DEFB	002H		;'-'
07af  1f            2540   2540 SYS_SP	DEFB	01FH		;'P'
07b0  ae            2541   2541 	DEFB	0AEH		;'S'
07b1  02            2542   2542 	DEFB	002H		;'-'
07b2  ae            2543   2543 	DEFB	0AEH		;'S'
07b3  b6            2544   2544 	DEFB	0B6H		;'Y'
07b4  ae            2545   2545 	DEFB	0AEH		;'S'
07b5  1f            2546   2546 ERR_SP	DEFB	01FH		;'P'
07b6  ae            2547   2547 	DEFB	0AEH		;'S'
07b7  02            2548   2548 	DEFB	002H		;'-'
07b8  03            2549   2549 	DEFB	003H		;'R'
07b9  03            2550   2550 	DEFB	003H		;'R'
07ba  8f            2551   2551 	DEFB	08FH		;'E'
07bb  00            2552   2552 	DEFB	0
07bc  ae            2553   2553 STEPTAB	DEFB	0AEH		;'S'
07bd  8f            2554   2554 	DEFB	08FH		;'E'
07be  b3            2555   2555 	DEFB	0B3H		;'D'
07bf  00            2556   2556 	DEFB	0
07c0  ae            2557   2557 	DEFB	0AEH		;'S'
07c1  b3            2558   2558 	DEFB	0B3H		;'D'
07c2  00            2559   2559 	DEFB	0
07c3  00            2560   2560 	DEFB	0
07c4  0f            2561   2561 	DEFB	00FH		;'F'
07c5  ae            2562   2562 	DEFB	0AEH		;'S'
07c6  8f            2563   2563 	DEFB	08FH		;'E'
07c7  00            2564   2564 	DEFB	0
07c8  0f            2565   2565 	DEFB	00FH		;'F'
07c9  00            2566   2566 	DEFB	0
07ca  00            2567   2567 REG_	DEFB	0
07cb  00            2568   2568 	DEFB	0
07cc  02            2569   2569 	DEFB	002H		;'-'
07cd  be            2570   2570 	DEFB	0BEH		;'G'
07ce  8f            2571   2571 	DEFB	08FH		;'E'
07cf  03            2572   2572 	DEFB	003H		;'R'
07d0  0f 3f         2573   2573 RGTAB	DEFW	03F0FH		;'AF'
07d2  8d a7         2574   2574 	DEFW	0A78DH		;'BC'
07d4  8f b3         2575   2575 	DEFW	0B38FH		;'DE'
07d6  85 37         2576   2576 	DEFW	03785H		;'HL'
07d8  4f 3f         2577   2577 	DEFW	03F4FH		;'AF.'
07da  cd a7         2578   2578 	DEFW	0A7CDH		;'BC.'
07dc  cf b3         2579   2579 	DEFW	0B3CFH		;'DE.'
07de  c5 37         2580   2580 	DEFW	037C5H		;'HL.'
07e0  07 30         2581   2581 	DEFW	03007H		;'IX'
07e2  b6 30         2582   2582 	DEFW	030B6H		;'IY'
07e4  1f ae         2583   2583 	DEFW	0AE1FH		;'SP'
07e6  0f 30         2584   2584 	DEFW	0300FH		;'IF'
07e8  37 0f         2585   2585 	DEFW	00F37H		;'FH'
07ea  85 0f         2586   2586 	DEFW	00F85H		;'FL'
07ec  77 0f         2587   2587 	DEFW	00F77H		;'FH.'
07ee  c5 0f         2588   2588 	DEFW	00FC5H		;'FL.'
07f0  bd            2589   2589 SEGTAB	DEFB	0BDH		;'0'
07f1  30            2590   2590 	DEFB	030H		;'1'
07f2  9b            2591   2591 	DEFB	09BH		;'2'
07f3  ba            2592   2592 	DEFB	0BAH		;'3'
07f4  36            2593   2593 	DEFB	036H		;'4'
07f5  ae            2594   2594 	DEFB	0AEH		;'5'
07f6  af            2595   2595 	DEFB	0AFH		;'6'
07f7  38            2596   2596 	DEFB	038H		;'7'
07f8  bf            2597   2597 	DEFB	0BFH		;'8'
07f9  be            2598   2598 	DEFB	0BEH		;'9'
07fa  3f            2599   2599 	DEFB	03FH		;'A'
07fb  a7            2600   2600 	DEFB	0A7H		;'B'
07fc  8d            2601   2601 	DEFB	08DH		;'C'
07fd  b3            2602   2602 	DEFB	0B3H		;'D'
07fe  8f            2603   2603 	DEFB	08FH		;'E'
07ff  0f            2604   2604 	DEFB	00FH		;'F'
                    2605   2605 ;
                    2606   2606 ;***********************************************************
                    2607   2607 ;SYSTEM RAM AREA
                    2608   2608 	ORG	0FF9FH
ff9f                2609   2609 USERSTK	DEFS	16
                    2610   2610 
                    2611   2611 	ORG	0FFAFH
                    2612   2612 SYSSTK
ffaf                2613   2613 STEPBF	DEFS	7
ffb6                2614   2614 DISPBF	DEFS	6
                    2615   2615 
                    2616   2616 REGBF
ffbc                2617   2617 USERAF	DEFS	2
ffbe                2618   2618 USERBC	DEFS	2
ffc0                2619   2619 USERDE	DEFS	2
ffc2                2620   2620 USERHL	DEFS	2
ffc4                2621   2621 UAFP	DEFS	2
ffc6                2622   2622 UBCP	DEFS	2
ffc8                2623   2623 UDEP	DEFS	2
ffca                2624   2624 UHLP	DEFS	2
ffcc                2625   2625 USERIX	DEFS	2
ffce                2626   2626 USERIY	DEFS	2
ffd0                2627   2627 USERSP	DEFS	2
ffd2                2628   2628 USERIF	DEFS	2
ffd4                2629   2629 FLAGH	DEFS	2
ffd6                2630   2630 FLAGL	DEFS	2
ffd8                2631   2631 FLAGHP	DEFS	2
ffda                2632   2632 FLAGLP	DEFS	2
ffdc                2633   2633 USERPC	DEFS	2
ffde                2634   2634 ADSAVE	DEFS	2		;Contains addr being displayed now.
ffe0                2635   2635 BRAD	DEFS	2		;Break point address
ffe2                2636   2636 BRDA	DEFS	1		;Data of break point address
ffe3                2637   2637 STMINOR	DEFS	1		;Minor state
ffe4                2638   2638 STATE	DEFS	1		;State
ffe5                2639   2639 POWERUP	DEFS	1		;Power-up initialization
ffe6                2640   2640 TEST	DEFS	1		;Flag, bit 0 -- set when function or
                    2641   2641 				;subfunction key is hit. Bit 7 --
                    2642   2642 				;set when illegal key is entered.
ffe7                2643   2643 ATEMP	DEFS	1		;Temporary storage
ffe8                2644   2644 HLTEMP	DEFS	2		;Temporary storage
ffea                2645   2645 TEMP	DEFS	4		;See comments on routine GDA.
ffee                2646   2646 IM1AD	DEFS	2		;Contains addr of Opcode 'FF' service
                    2647   2647 				;routine. (RST 38H, mode 1 int, etc)
fff0                2648   2648 BEEPSET	DEFS	1		;Default value is 55H
fff1                2649   2649 FBEEP	DEFS	1		;Beep frequency
fff2                2650   2650 TBEEP	DEFS	2		;Time duration of beep
fff4                2651   2651 	END
