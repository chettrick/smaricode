0000                   1      1 KIN	EQU	00H		;8255 I port A
0001                   2      2 SEG7	EQU	01H		;8255 I port B
0002                   3      3 DIGIT	EQU	02H		;8255 I port C
0003                   4      4 P8255	EQU	03H		;8255 I control port
00A5                   5      5 PWCODE	EQU	0A5H		;Power-up code
                       6      6 ;ZSUM	EQU	71H		;XXX - This will make the sum of all
                       7      7 				;monitor codes to be zero
                       8      8 
                       9      9 ; The following EQUATEs are used for timing.
                      10     10 ; Their values depend on the CPU clock frequency.
                      11     11 ; (In this version, the crystal frequency is 1.79 MHz.)
                      12     12 
00C9                  13     13 COLDEL	EQU	201		;Column delay time for routine
                      14     14 				;SCAN and SCAN1
0041                  15     15 F1KHZ	EQU	65		;Delay count for 1 kHz square wave,
                      16     16 				;used by routine TONE1K.
001F                  17     17 F2KHZ	EQU	31		;Delay count for 2 kHz square wave,
                      18     18 				;used by routine TONE2K.
002A                  19     19 MPERIOD EQU	42		;1 kHz and 2 kHz threshold, used by
                      20     20 				;tape input routine PERIOD.
                      21     21 
                      22     22 ; The following EQUATEs are for tape modulation.
                      23     23 ; If the quality of tape recorder is good, the user may
                      24     24 ; change '4 4 2 8' to '2 2 1 4'. This will double
                      25     25 ; the tape data rate.
                      26     26 ; If the quality of tape recorder is poor, the user may
                      27     27 ; change '4 4 2 8' to '6 6 3 12'. This will improve
                      28     28 ; error performance but slow down the data rate.
                      29     29 ; Although the data format is changed the tape is still
                      30     30 ; compatible in each case, because only the ratio is
                      31     31 ; detected in the Tape-read.
                      32     32 
0004                  33     33 ONE_1K	EQU	4
0004                  34     34 ONE_2K	EQU	4
0002                  35     35 ZERO_1K	EQU	2
0008                  36     36 ZERO_2K	EQU	8
                      37     37 
                      38     38 ;***********************************************************
                      39     39 ; I/O port assignment: (8255 I)
                      40     40 
                      41     41 ; port A (address 00H):
                      42     42 ;	bit 7	-- I2C bus serial data bi-directional
                      43     43 ;	bit 6	-- 'USER KEY' on keyboard, active low
                      44     44 ;	bit 5-0	-- row of keyboard matrix input, active low
                      45     45 ; port B (address 01H): 7 segments of LED, active high
                      46     46 ;	bit 7	-- segment d
                      47     47 ;	bit 6	-- decimal point
                      48     48 ;	bit 5	-- segment c
                      49     49 ;	bit 4	-- segment b
                      50     50 ;	bit 3	-- segment a
                      51     51 ;	bit 2	-- segment f
                      52     52 ;	bit 1	-- segment g
                      53     53 ;	bit 0	-- segment e
                      54     54 ; port C (address 02H):
                      55     55 ;	bit 7	-- I2C bus serial clock output
                      56     56 ;	bit 6	-- BREAK enable. NMI (CPU pin 17) will go to
                      57     57 ;			low 5 M1's (machine cycle one) after this
                      58     58 ;			bit goes to low. (This bit is connected to
                      59     59 ;			the reset input of external counter.)
                      60     60 ;	bit 5-0	-- colums of keyboard and the display matrix,
                      61     61 ;			active high. Bit 5 is the leftmost column.
                      62     62 
                      63     63 ;***********************************************************
                      64     64 	ORG	00H		;Required to make sure assembler
                      65     65 RST00				;doesn't skip over address 0000H
                      66     66 
                      67     67 ; There are two cases that will generate a RESET signal:
                      68     68 ;	(i)  power-up
                      69     69 ;	(ii) 'RS' key pressed
                      70     70 ; In both cases, the following actions will be taken:
                      71     71 ;   a) disable interrupt, set interrupt mode to 0
                      72     72 ;      set I register to 00 and start execution
                      73     73 ;      at address 0000 (by Z80 CPU itself).
                      74     74 ;   b) initialize user's PC to the lowest RAM address;
                      75     75 ;   c) set user's SP to FF9FH;
                      76     76 ;   d) set user's I register to 00 and disable user's
                      77     77 ;      interrupt flip-flop;
                      78     78 ; In addition subroutine INI will be called on power-up
                      79     79 ; reset, which has the following effects:
                      80     80 ;   e) disable BREAK POINT;
                      81     81 ;   f) set the contents of location 0FFEEH and 0FFEFH to 66
                      82     82 ;      and 00 respectively. This will make instruction RST
                      83     83 ;      38H (opcode FF) have the same effect as BREAK.
                      84     84 ; Memory location POWERUP is used to distinguish power-up
                      85     85 ; from RS-key.  (POWERUP) contains random data when
                      86     86 ; power-up and contains PWCODE (0A5H) thereafter.
                      87     87 
0000  06 00           88     88 	LD	B, 0
0002  10 FE           89     89 	DJNZ	$		;Power-up delay
                      90     90 
                      91     91 ; Initialize 8255 to mode 0 with port A input,
                      92     92 ; port B and C output. The control word is 90H.
                      93     93 
0004  3E 90           94     94 	LD	A, 10010000B
0006  D3 03           95     95 	OUT	(P8255), A
                      96     96 
                      97     97 ; When the control word is sent to 8255, all output
                      98     98 ; ports are cleared to 0.  It is necessary to disable
                      99     99 ; BREAK and deactivate all I/O by sending 0C0H to
                     100    100 ; port C.
                     101    101 
0008  3E C0          102    102 	LD	A, 0C0H
000A  D3 02          103    103 	OUT	(DIGIT), A
000C  31 AF FF       104    104 	LD	SP, SYSSTK	;initial system stack
                     105    105 
                     106    106 ; If the content of location POWERUP is not equal to
                     107    107 ; PWCODE, call subroutine INI. Continue otherwise.
                     108    108 
000F  3A E5 FF       109    109 	LD	A, (POWERUP)
0012  FE A5          110    110 	CP	PWCODE
0014  C4 C1 03       111    111 	CALL	NZ, INI
                     112    112 
                     113    113 ; Determine the lowest RAM address by checking whether
                     114    114 ; address 1000H is RAM.  If yes, set user's PC to this
                     115    115 ; value.  Otherwise, set it to 8000H.
                     116    116 
0017  21 00 10       117    117 	LD	HL, 1000H
001A  CD F6 05       118    118 	CALL	RAMCHK
001D  28 02          119    119 	JR	Z, PREPC
001F  26 80          120    120 	LD	H, 80H
                     121    121 	
0021  22 DC FF       122    122 PREPC	LD	(USERPC), HL
0024  26 00          123    123 	LD	H, 0
                     124    124 
                     125    125 ; Address 28H and 30H are reserved for BREAK (RST 28H)
                     126    126 ; and software BREAK (RST 30H).  Skip these area, monitor
                     127    127 ; program resumes at RESET1.
                     128    128 
0026  18 0A          129    129 	JR	RESET1
                     130    130 ;
                     131    131 ;***********************************************************
                     132    132 	ORG	28H
                     133    133 RST28
                     134    134 
                     135    135 ; Address 28H is the entry point of BREAK trap.
                     136    136 ; If a location is set as a BREAK point, the monitor
                     137    137 ; will change the content of this location to C7 (RST 28H)
                     138    138 ; before transfering control to user's program.
                     139    139 ; In execution of user's program, a trap will occur if
                     140    140 ; user's PC passes this location.  The monitor then takes
                     141    141 ; over control and the content of BREAK address
                     142    142 ; will be restored.  Monitor takes care of everything
                     143    143 ; and makes the whole mechanism transparant to the user.
                     144    144 ; The return address pushed onto stack is the PC after
                     145    145 ; executing RST 28H.  The original break address should
                     146    146 ; be one less than that.  The following 3 instructions
                     147    147 ; decrease the content of (SP) by one without changing
                     148    148 ; HL.
                     149    149 
0028  E3             150    150 	EX	(SP), HL
0029  2B             151    151 	DEC	HL
002A  E3             152    152 	EX	(SP), HL
002B  22 E8 FF       153    153 	LD	(HLTEMP), HL
002E  18 0E          154    154 	JR	CONT28
                     155    155 ;
                     156    156 ;***********************************************************
                     157    157 	ORG	30H
                     158    158 RST30
                     159    159 
                     160    160 ; Instruction RST 30H (opcode F7) is usually used as:
                     161    161 ;   i) Software break;
                     162    162 ;  ii) Terminator of user's program.
                     163    163 ; The effect of this instruction is to save all user's
                     164    164 ; registers and return to monitor.
                     165    165 
0030  18 34          166    166 	JR	NMI
                     167    167 
                     168    168 ;***********************************************************
                     169    169 ; This is a part of reset routine.  Address 0028H and
                     170    170 ; 0030H are reserved for break point.  Reset routine
                     171    171 ; skips this area and resumes here.
                     172    172 ;
0032  22 D2 FF       173    173 RESET1	LD	(USERIF), HL	;set user's I register and
                     174    174 				;interrupt flip flop to 0
0035  18 1D          175    175 	JR	RESET2		;monitor resumes at RESET2
                     176    176 
                     177    177 ;***********************************************************
                     178    178 
                     179    179 ; The following byte makes the sum of the monitor
                     180    180 ; code in ROM zero. ROMTEST is a self-checking routine.
                     181    181 ; This routine requires the sum of ROM to be zero.
                     182    182 
                     183    183 ;	DEFB	ZSUM		;XXX - Calculate checksum.
                     184    184 ;
                     185    185 ;***********************************************************
                     186    186 	ORG	38H
                     187    187 RST38
                     188    188 
                     189    189 ; Entry point of RST 38H (opcode FF) or mode 1 interrupt.
                     190    190 ; Fetch the address stored in location 0FFEEH and 0FFEFH,
                     191    191 ; then jump to this address.  Initially, 0FFEEH and 0FFEFH
                     192    192 ; are set to 0066H.  So RST 38 will have the same effect
                     193    193 ; as software break.  By changing the content of 0FFEEH
                     194    194 ; and 0FFEFH, the user can define his or her own service
                     195    195 ; routine.
                     196    196 ; The next three instructions push the contents of 0FFEEH
                     197    197 ; and 0FFEFH to stack without changing any registers.
                     198    198 
0038  E5             199    199 	PUSH	HL
0039  2A EE FF       200    200 	LD	HL, (IM1AD)
003C  E3             201    201 	EX	(SP), HL
                     202    202 
                     203    203 ; The top of the stack is now the address of user
                     204    204 ; defined service routine.  Pop out this address then
                     205    205 ; branch to it.
                     206    206 
003D  C9             207    207 	RET
                     208    208 ;
                     209    209 ;***********************************************************
                     210    210 CONT28:
                     211    211 ; This is a part of break service routine.  It continues
                     212    212 ; the program at RST28.
                     213    213 
003E  32 E7 FF       214    214 	LD	(ATEMP), A
                     215    215 
                     216    216 ; The monitor has changed the content of user's
                     217    217 ; program at break address.  The next 3 instructions
                     218    218 ; restore the destroyed content.  BRAD contains the
                     219    219 ; break address, BRDA contains the original data at
                     220    220 ; break address.
                     221    221 
0041  2A E0 FF       222    222 	LD	HL, (BRAD)
0044  3A E2 FF       223    223 	LD	A, (BRDA)
0047  77             224    224 	LD	(HL), A
                     225    225 
                     226    226 ; Send break enable signal to hardware counter.
                     227    227 ; A nonmaskable interrupt will be issued at the 5th M1's.
                     228    228 
0048  3E 80          229    229 	LD	A, 10000000B
004A  D3 02          230    230 	OUT	(DIGIT), A
004C  3A E7 FF       231    231 	LD	A, (ATEMP)	;1st M1
004F  2A E8 FF       232    232 	LD	HL, (HLTEMP)	;2nd M1
0052  00             233    233 	NOP			;3rd M1
0053  C9             234    234 	RET			;4th M1
                     235    235 
                     236    236 ; Return to user's program.  Execute the instruction
                     237    237 ; at break address.  After finishing one instruction,
                     238    238 ; a nonmaskable interrupt happens and control is
                     239    239 ; transferred to the monitor again.
                     240    240 ;
                     241    241 RESET2:
0054  21 9F FF       242    242 	LD	HL, USERSTK
0057  22 D0 FF       243    243 	LD	(USERSP), HL	;set user's SP
005A  AF             244    244 	XOR	A
005B  32 E6 FF       245    245 	LD	(TEST), A
                     246    246 
                     247    247 ; TEST is a flag for monitor's own use.  Illegal key-in
                     248    248 ; blanking (bit 7 of TEST) and automatic leading zero
                     249    249 ; (bit 0) use this flag.  Clear it here.
                     250    250 
005E  DD 21 9F 07    251    251 	LD	IX, HELLO
                     252    252 
                     253    253 ; Address 0066H is the address for nonmaskable interrupt
                     254    254 ; Skip this area, monitor resumes at SETST0
                     255    255 
0062  C3 D0 00       256    256 	JP	SETST0
                     257    257 
                     258    258 ;***********************************************************
                     259    259 	ORG	66H
                     260    260 NMI
                     261    261 
                     262    262 ; Entry point of nonmaskable interrupt.  NMI will occur
                     263    263 ; when MONI key is pressed or when user's program is
                     264    264 ; breaked.  The service routine which starts here saves all
                     265    265 ; user's registers and status.  It also checks the validity
                     266    266 ; of user's SP.
                     267    267 
0066  32 E7 FF       268    268 	LD	(ATEMP), A	;save A register
0069  3E 90          269    269 	LD	A, 10010000B
006B  D3 03          270    270 	OUT	(P8255), A	;set 8255 to mode 0.
                     271    271 				;Port A input; B,C output.
006D  3E C0          272    272 	LD	A, 0C0H
006F  D3 02          273    273 	OUT	(DIGIT), A	;disable break and LED's
0071  3A E7 FF       274    274 	LD	A, (ATEMP)	;restore A register
0074  22 E8 FF       275    275 RGSAVE	LD	(HLTEMP), HL	;save register HL
0077  E1             276    276 	POP	HL		;get return address from stack
0078  22 DE FF       277    277 	LD	(ADSAVE), HL	;Save return address into
                     278    278 				;ADSAVE.
007B  22 DC FF       279    279 	LD	(USERPC), HL	;Set user's PC to return
                     280    280 				;address.
007E  2A E8 FF       281    281 	LD	HL, (HLTEMP)	;restore HL register
0081  ED 73 D0 FF    282    282 	LD	(USERSP), SP	;set user's SP to current SP
0085  31 D0 FF       283    283 	LD	SP, USERIY+2	;save other registers by
0088  FD E5          284    284 	PUSH	IY		;continously pushing them
008A  DD E5          285    285 	PUSH	IX		;onto stack
008C  D9             286    286 	EXX
008D  E5             287    287 	PUSH	HL
008E  D5             288    288 	PUSH	DE
008F  C5             289    289 	PUSH	BC
0090  D9             290    290 	EXX
0091  08             291    291 	EX	AF,AF'
0092  F5             292    292 	PUSH	AF
0093  08             293    293 	EX	AF,AF'
0094  E5             294    294 	PUSH	HL
0095  D5             295    295 	PUSH	DE
0096  C5             296    296 	PUSH	BC
0097  F5             297    297 	PUSH	AF
                     298    298 
                     299    299 ; The next two instructions save I register.
                     300    300 ; The interrupt flip-flop (IFF2) is copied into
                     301    301 ; parity flag (P/V) by instruction LD  A, I.
                     302    302 ; The interrupt status (enabled or disabled)
                     303    303 ; can be determined by testing parity flag.
                     304    304 
0098  ED 57          305    305 	LD	A, I
009A  32 D3 FF       306    306 	LD	(USERIF+1), A
                     307    307 
                     308    308 ; The next four instructions save IFF2 into
                     309    309 ; user's IFF.
                     310    310 
009D  3E 00          311    311 	LD	A, 0
009F  E2 A4 00       312    312 	JP	PO, SETIF	;PO -- P/V = 0
00A2  3E 01          313    313 	LD	A, 1
00A4  32 D2 FF       314    314 SETIF	LD	(USERIF), A
00A7  31 AF FF       315    315 	LD	SP, SYSSTK	;set SP to system stack
                     316    316 
                     317    317 ; The next 8 instructions check user's SP.
                     318    318 ; If the user's SP points to a location not
                     319    319 ; in RAM, display ERR-SP.
                     320    320 
00AA  2A D0 FF       321    321 	LD	HL, (USERSP)
00AD  DD 21 B5 07    322    322 	LD	IX, ERR_SP
00B1  2B             323    323 	DEC	HL
00B2  CD F6 05       324    324 	CALL	RAMCHK
00B5  20 19          325    325 	JR	NZ, SETST0
00B7  2B             326    326 	DEC	HL
00B8  CD F6 05       327    327 	CALL	RAMCHK
00BB  20 13          328    328 	JR	NZ, SETST0
                     329    329 
                     330    330 ; If the user's stack and system stack are
                     331    331 ; overlayed, display SYS-SP.  This checking
                     332    332 ; is done by the following instructions.
                     333    333 
00BD  DD 21 AF 07    334    334 	LD	IX, SYS_SP
00C1  00             335    335 	NOP
00C2  00             336    336 	NOP
                     337    337 
00C3  11 62 00       338    338 	LD	DE, (-USERSTK)+1
00C6  19             339    339 	ADD	HL, DE
00C7  38 07          340    340 	JR	C, SETST0
00C9  DD 21 B6 FF    341    341 	LD	IX, DISPBF
00CD  37             342    342 	SCF			;set carryflag to indicate
                     343    343 				;the user's SP is legal.
00CE  18 04          344    344 	JR	BRRST0
                     345    345 
                     346    346 ;
                     347    347 SETST0:
                     348    348 ; STATE is a memory location containing the monitor status.
                     349    349 ; It will be described in detail later.  STATE 0 stands
                     350    350 ; for fixed display pattern.  The initial pattern 'HELLO '
                     351    351 ; or message 'SYS-SP'... belong to this category.  The next
                     352    352 ; two instructions set STATE to zero.
                     353    353 
00D0  AF             354    354 	XOR	A		;set A to 0, also clear Carry flag
00D1  32 E4 FF       355    355 	LD	(STATE), A
00D4  3A E2 FF       356    356 BRRST0	LD	A, (BRDA)	;restore the data at
                     357    357 				;break address
00D7  2A E0 FF       358    358 	LD	HL, (BRAD)
00DA  77             359    359 	LD	(HL), A
                     360    360 
                     361    361 ; If the user's SP is legal (carry set), display user's
                     362    362 ; PC and the content at PC. Otherwise, display fixed
                     363    363 ; message (ERR-SP or SYS-SP or HELLO ).
                     364    364 
00DB  DC 0B 04       365    365 	CALL	C, MEMDP2
                     366    366 ;
                     367    367 ;
                     368    368 ;***********************************************************
                     369    369 ; Scan the display and keyboard. When a key is detected,
                     370    370 ; take proper action  according to the key pressed.
                     371    371 
                     372    372 MAIN:
00DE  31 AF FF       373    373 	LD	SP, SYSSTK	;Initialize system stack
00E1  CD FE 05       374    374 	CALL	SCAN		;Scan display and input keys.
                     375    375 				;Routine SCAN will not return until
                     376    376 				;any key is pressed.
00E4  CD CB 06       377    377 	CALL	BEEP		;After a key is detected, there
                     378    378 				;will be accompanied with a beep
                     379    379 				;sound.
00E7  18 F5          380    380 	JR	MAIN		;Back to MAIN, get more keys and
                     381    381 				;execute them.
                     382    382 ;
                     383    383 ;
                     384    384 ;***********************************************************
                     385    385 KEYEXEC:
                     386    386 
                     387    387 ; Input key dispatch routine.
                     388    388 ; This routine uses the key code returned by subroutine
                     389    389 ; SCAN, which is one byte stored in A register.  The
                     390    390 ; range of key codes is from 00 to 1FH.
                     391    391 
                     392    392 ;  (i) key code = 00 - 0FH :
                     393    393 ;      These are hexadecimal keys.  Branch to routine KHEX.
                     394    394 
00E9  FE 10          395    395 	CP	10H
00EB  38 24          396    396 	JR	C, KHEX
                     397    397 
                     398    398 ; If the key entered is not hexadecimal, it must be a
                     399    399 ; function or subfunction key.  This means the previous
                     400    400 ; numeric entry has terminated.  Bit 0 of TEST flag
                     401    401 ; must be set at the beginning of a new numeric entry.
                     402    402 ; This is done by the next two instructions.  (If bit 0
                     403    403 ; of TEST is set, the data buffer will be automatically
                     404    404 ; cleared when a hexadecimal key is entered.)
                     405    405 
00ED  21 E6 FF       406    406 	LD	HL, TEST
00F0  CB C6          407    407 	SET	0, (HL)
                     408    408 
                     409    409 ; (ii) key code = 10H - 17H :
                     410    410 ;      (+, -, GO, STEP, DATA, SBR, INS, DEL)
                     411    411 ;      There is no state corresponding to these keys.
                     412    412 ;      The response of them depends on the current
                     413    413 ;      state and minor-state. (E.g., the response of '+'
                     414    414 ;      key depends on the current function.  It is illegal
                     415    415 ;      when the display is 'HELLO ', but is legal when the
                     416    416 ;      display is of 'address-data' form.)  In this
                     417    417 ;      documentation, they are named 'sub-function key'.
                     418    418 ;      They are all branched by table KSUBFUN and routine
                     419    419 ;      BRANCH.
                     420    420 
00F2  D6 10          421    421 	SUB	10H
00F4  FE 08          422    422 	CP	8
00F6  21 37 07       423    423 	LD	HL, KSUBFUN
00F9  DA B0 03       424    424 	JP	C, BRANCH
                     425    425 
                     426    426 ;(iii) key code = 18H - 1FH
                     427    427 ;      (PC, Addr, CBr, Reg, Move, Rela, USB WR, USB RD)
                     428    428 ;      These keys are named 'function key'. They are
                     429    429 ;      acceptable at any time.  When they are hit, the
                     430    430 ;      monitor will unconditionally enter a new state.
                     431    431 ;      STMINOR contains the minor-state, which is required
                     432    432 ;      to dispatch some sub-function keys (e.g. +, -).
                     433    433 
00FC  DD 21 B6 FF    434    434 	LD	IX, DISPBF
0100  D6 08          435    435 	SUB	8
0102  21 E4 FF       436    436 	LD	HL, STATE
0105  77             437    437 	LD	(HL), A		;set STATE to key-code minus 18H
                     438    438 				;The STATE is updated here.  It will
                     439    439 				;be modified later by local service
                     440    440 				;routines if the function-key is PC,
                     441    441 				;Addr or CBr.  For other function-
                     442    442 				;keys, STATE will not be modified
                     443    443 				;later.
0106  21 E3 FF       444    444 	LD	HL, STMINOR
0109  36 00          445    445 	LD	(HL), 0		;set STMINOR to 0
010B  21 41 07       446    446 	LD	HL, KFUN	;KFUN is the base of the branch table
                     447    447 				;the offset is stored in A
010E  C3 B0 03       448    448 	JP	BRANCH
                     449    449 
                     450    450 ;
                     451    451 ;***********************************************************
                     452    452 ;STATE:
                     453    453 ;   0=FIX	;Display fixed pattern, e.g. 'HELLO '.
                     454    454 ;   1=AD	;The hex key entered is interpreted as
                     455    455 		;memory addres.
                     456    456 ;   2=DA	;The hex key entered is interpreted as
                     457    457 		;memory data.
                     458    458 ;   3=RGFIX	;Display fixed pattern: 'Reg-  ' and
                     459    459 		;expect register name to be entered.
                     460    460 ;   4=MV	;Expect parameters for 'Move' function.
                     461    461 ;   5=RL	;Expect parameters for 'Rela' function.
                     462    462 ;   6=WT	;Expect parameters for 'USBWR' function.
                     463    463 ;   7=RT	;Expect parameters for 'USBRD' function.
                     464    464 ;   8=RGAD	;Hex-key entered will be interpreted as
                     465    465 		;address name for registers.
                     466    466 ;   9=RGDA	;Hex-key entered will be interpreted as
                     467    467 		;data for registers.
                     468    468 ;
                     469    469 ; Subroutine naming conventions:
                     470    470 ;    (i) K???? -- K stands for key, ???? is the key name,
                     471    471 ;                 e.g. KINS corresponds to key 'INS'.  Each
                     472    472 ;                 time a key ???? is entered, the routine
                     473    473 ;                 with name K???? will be executed.  All of
                     474    474 ;                 them are branched by table KFUN or KSUBFUN
                     475    475 ;   (ii) H???? -- H stands for hexadecimal, ???? is the
                     476    476 ;                 current STATE.  For example, routine
                     477    477 ;                 HDA will be executed if the entered
                     478    478 ;                 key is hexadecimal and STATE is DA now.
                     479    479 ;                 These routines are branched by table
                     480    480 ;                 HTAB.
                     481    481 ;  (iii) I???? -- I stands for increment (+ key), ???? is
                     482    482 ;                 the current STATE.  E.g. IMV will be
                     483    483 ;                 executed when STATE is MV and '+' key
                     484    484 ;                 is entered.  These routines are branched
                     485    485 ;                 by table ITAB
                     486    486 ;   (iv) D???? -- D stands for decrement (- key), ???? is
                     487    487 ;                 the current STATE.  These routines are
                     488    488 ;                 branched using table DTAB.
                     489    489 ;    (v) G???? -- G stands for 'GO' key, ???? is the current
                     490    490 ;                 STATE.  These routines are branched using
                     491    491 ;                 table GTAB.
                     492    492 
                     493    493 ;***********************************************************
                     494    494 
                     495    495 ; Hexadecimal, '+', '-' and 'GO' keys may be entered after
                     496    496 ; different function keys.  The monitor uses branch tables
                     497    497 ; and STATE to determine the current function and branch
                     498    498 ; to the proper entry point.
                     499    499 ;
                     500    500 KHEX:
                     501    501 ;Executed when hexadecimal keys are pressed.
                     502    502 ;Use HTAB and STATE for further branch.
                     503    503 
0111  4F             504    504 	LD	C, A		;save A register in C
                     505    505 				;which is the hex key-code.
0112  21 4B 07       506    506 	LD	HL, HTAB
0115  3A E4 FF       507    507 BR1	LD	A, (STATE)
0118  C3 B0 03       508    508 	JP	BRANCH
                     509    509 
                     510    510 ;
                     511    511 KINC:
                     512    512 ;Branched by KSUBFUN table.
                     513    513 ;Executed when '+' key is pressed.
                     514    514 ;Use ITAB and STATE for further branch.
                     515    515 ;STATE will be stored in A register at BR1.
                     516    516 
011B  21 57 07       517    517 	LD	HL, ITAB
011E  18 F5          518    518 	JR	BR1
                     519    519 
                     520    520 ;
                     521    521 KDEC:
                     522    522 ;Branched by KSUBFUN table.
                     523    523 ;Executed when '-' key is pressed.
                     524    524 ;Use DTAB and STATE for further branch.
                     525    525 ;STATE will be stored in A register at BR1.
                     526    526 
0120  21 63 07       527    527 	LD	HL, DTAB
0123  18 F0          528    528 	JR	BR1
                     529    529 
                     530    530 ;
                     531    531 KGO:
                     532    532 ;Branched by KSUBFUN table.
                     533    533 ;Executed when 'GO' key is pressed.
                     534    534 ;Use DTAB and STATE for further branch.
                     535    535 ;STATE will be stored in A register at BR1.
                     536    536 
0125  21 6F 07       537    537 	LD	HL, GTAB
0128  18 EB          538    538 	JR	BR1
                     539    539 
                     540    540 ;
                     541    541 KSTEP:
                     542    542 ;Branched by table KSUBFUN.
                     543    543 ;Executed when 'STEP' key is pressed.
                     544    544 
012A  CD E5 03       545    545 	CALL	TESTM		;Check if the left 4 digits
                     546    546 				;of the display are a memory address.
012D  C2 BB 03       547    547 	JP	NZ, IGNORE	;If not, disable all LED's as
                     548    548 				;a warning to the user.  This
                     549    549 				;is done by routine IGNORE.
                     550    550 
0130  3E 80          551    551 	LD	A, 10000000B	;This data will be output
                     552    552 				;to port B to enable
                     553    553 				;BREAK.  It is done by
                     554    554 				;routine PREOUT.
0132  C3 A3 02       555    555 	JP	PREOUT
                     556    556 
                     557    557 ;
                     558    558 KDATA:
                     559    559 ;Branched by table KSUBFUN.
                     560    560 ;Executed when 'DATA' key is pressed.
                     561    561 
0135  CD E5 03       562    562 	CALL	TESTM		;Check if the left 4 digits
                     563    563 				;of the display are a memory address.
0138  20 04          564    564 	JR	NZ, TESTRG	;If not, branch to TESTRG
                     565    565 				;to check whether the display
                     566    566 				;is register or not.
013A  CD 0B 04       567    567 	CALL	MEMDP2		;If yes, display the data of
                     568    568 				;that address and set STATE
                     569    569 				;to 2.
013D  C9             570    570 	RET
013E  FE 08          571    571 TESTRG	CP	8		;check if the status is 8 or 9
                     572    572 				;(RGAD or RGDA).
0140  DA BB 03       573    573 	JP	C, IGNORE	;If not, ignore this key and
                     574    574 				;send out a warning message.
0143  CD 77 04       575    575 	CALL	REGDP9		;If yes, display register and
                     576    576 				;set status to 9 (RGDA).
0146  C9             577    577 	RET
                     578    578 
                     579    579 ;
                     580    580 KSBR:
                     581    581 ;Branched by table KSUBFUN.
                     582    582 ;Executed when 'SBr' key (set break point)
                     583    583 ;is pressed.
                     584    584 
0147  CD E5 03       585    585 	CALL	TESTM		;Check if the display is of
                     586    586 				;'address-data' form.
014A  C2 BB 03       587    587 	JP	NZ, IGNORE	;If not, ignore this key and
                     588    588 				;send out a warning message.
014D  2A DE FF       589    589 	LD	HL, (ADSAVE)	;If yes, get the address
                     590    590 				;being displayed now.
0150  CD F6 05       591    591 	CALL	RAMCHK		;Check if this address is
                     592    592 				;in RAM.
0153  C2 BB 03       593    593 	JP	NZ, IGNORE	;If not, ignore the 'SBR' key
                     594    594 				;and send out a warning message.
0156  22 E0 FF       595    595 	LD	(BRAD), HL	;If yes, set this address as
                     596    596 				;a break point.
0159  CD 0B 04       597    597 	CALL	MEMDP2		;Display the data of break
                     598    598 				;address and set STATE to
                     599    599 				;2 (DA).
015C  C9             600    600 	RET
                     601    601 
                     602    602 ;
                     603    603 KINS:
                     604    604 ;Branched by table KSUBFUN.
                     605    605 ;Executed when 'Ins' key (insert) is pressed.
                     606    606 
015D  CD E5 03       607    607 	CALL	TESTM		;Check if the display is of
                     608    608 				;'addres-data' form.
0160  C2 BB 03       609    609 	JP	NZ, IGNORE	;If not, ignore the 'INS' key
                     610    610 				;and send out a warning message.
0163  2A DE FF       611    611 	LD	HL, (ADSAVE)	;If yes, get the address being
                     612    612 				;displayed now.
                     613    613 
0166  00             614    614 	NOP
                     615    615 
0167  22 AF FF       616    616 	LD	(STEPBF), HL	;Store this address in
                     617    617 				;STEPBF and the next address
                     618    618 				;in STEPBF+4 for later use.
016A  23             619    619 	INC	HL
016B  22 B3 FF       620    620 	LD	(STEPBF+4), HL
016E  CD F6 05       621    621 	CALL	RAMCHK		;Check if the address to be
                     622    622 				;inserted is in RAM.
0171  C2 BB 03       623    623 	JP	NZ, IGNORE	;If not, ignore the 'INS' key
                     624    624 				;and send out a warning message.
                     625    625 				;If the address to be inserted
                     626    626 				;is in 1800-1DFF, store 1DFE into
                     627    627 				;STEPBF+2
                     628    628 				;Otherwise, ignore the 'INS' key.
                     629    629 				;This is done by the following
                     630    630 				;instructions.
0174  11 FE FD       631    631 	LD	DE, 0FDFEH
0177  7C             632    632 	LD	A, H
0178  FE 1E          633    633 	CP	1EH
017A  38 07          634    634 	JR	C, SKIPH1
017C  FE 20          635    635 	CP	20H
017E  DA BB 03       636    636 	JP	C, IGNORE
0181  16 27          637    637 	LD	D, 27H
0183  ED 53 B1 FF    638    638 SKIPH1	LD	(STEPBF+2), DE
                     639    639 
                     640    640 ;When one byte is inserted at some
                     641    641 ;address, all data below this address
                     642    642 ;will be shifted down one position.
                     643    643 ;The last location will be shifted out
                     644    644 ;and therefore lost.
                     645    645 ;The RAM is divided into 3 blocks as
                     646    646 ;insert is concerned.  They are:
                     647    647 ;1800-1DFF, 1E00-1FFF and 2000-27FF
                     648    648 ;The 2nd block cannot be inserted and
                     649    649 ;is usually used as data bank.  System
                     650    650 ;data that of course cannot be shifted
                     651    651 ;is also stored in this bank.  Each
                     652    652 ;block is independent of the other when
                     653    653 ;shift is performed, i.e. the data
                     654    654 ;shifted out of the first block will not
                     655    655 ;be propagated to next block.
                     656    656 ;The shift is accomplished by block
                     657    657 ;transfer, i.e. MOVE.  This is the
                     658    658 ;job of subroutine GMV.
                     659    659 ;Routine GMV needs 3 parameters which
                     660    660 ;are stored in step-buffer (STEPBF):
                     661    661 ;STEPBF: starting address (2 bytes);
                     662    662 ;STEPBF+2: ending address (2 bytes);
                     663    663 ;STEPBF+4: destination address (2 bytes).
                     664    664 
0187  CD E4 02       665    665 DOMV	CALL	GMV
018A  AF             666    666 	XOR	A		;After the RAM has been shifted down,
018B  12             667    667 	LD	(DE), A		;the data of the address to be inserted
                     668    668 				;is cleared to zero.  This is done by
                     669    669 				;these two instructions.  Register
                     670    670 				;DE contains inserted address after GMV
                     671    671 				;is performed.
                     672    672 
018C  2A B3 FF       673    673 	LD	HL, (STEPBF+4)	;Store the data in (STEPBF+4)
018F  22 DE FF       674    674 	LD	(ADSAVE), HL	;into (ADSAVE).
0192  CD 0B 04       675    675 	CALL	MEMDP2		;Display the address and data also
                     676    676 				;set STATE to 2.
0195  C9             677    677 	RET
                     678    678 ;
                     679    679 KDEL:
                     680    680 ;Branched by table KSUBFUN.
                     681    681 ;Executed when 'Del' (delete) key is pressed.
                     682    682 
0196  CD E5 03       683    683 	CALL	TESTM		;Check if the display is of
                     684    684 				;'address-data' form.
0199  C2 BB 03       685    685 	JP	NZ, IGNORE	;If not, ignore the 'Del' key and
                     686    686 				;send out a warning message.
                     687    687 				;'Delete' is quite similar to
                     688    688 				;'Insert',except that the memory
                     689    689 				;is shifted up up instead of shifted
                     690    690 				;down.  See the comments on
                     691    691 				;routine KINS for details.
019C  2A DE FF       692    692 	LD	HL, (ADSAVE)	;Get the address being displayed
                     693    693 				;now.  This is the address to
                     694    694 				;be deleted.
                     695    695 
                     696    696 
019F  00             697    697 	NOP
                     698    698 
01A0  22 B3 FF       699    699 	LD	(STEPBF+4), HL
01A3  CD F6 05       700    700 	CALL	RAMCHK		;Check if the address is in RAM.
01A6  C2 BB 03       701    701 	JP	NZ, IGNORE	;If not, ignore this key and
                     702    702 				;send out a warning message.
                     703    703 				;Following instructions prepare the
                     704    704 				;parameters for routine GMV in step-
                     705    705 				;buffer.  Refer to routine KINS for
                     706    706 				;detail.
01A9  11 00 FE       707    707 	LD	DE, 0FE00H
01AC  7C             708    708 	LD	A, H
01AD  FE FE          709    709 	CP	0FEH
01AF  38 07          710    710 	JR	C, SKIPH2
01B1  FE 20          711    711 	CP	20H
01B3  DA BB 03       712    712 	JP	C, IGNORE
01B6  16 28          713    713 	LD	D, 28H
01B8  ED 53 B1 FF    714    714 SKIPH2	LD	(STEPBF+2), DE
01BC  23             715    715 	INC	HL
01BD  22 AF FF       716    716 	LD	(STEPBF), HL
01C0  18 C5          717    717 	JR	DOMV
                     718    718 ;
                     719    719 ;***********************************************************
                     720    720 KPC:
                     721    721 ;Branched by table KFUN.
                     722    722 ;Executed when 'PC' key is pressed.
                     723    723 
01C2  2A DC FF       724    724 	LD	HL, (USERPC)	;Store the user's program
01C5  22 DE FF       725    725 	LD	(ADSAVE), HL	;counter into (ADSAVE)
01C8  CD 0B 04       726    726 	CALL	MEMDP2		;Routine MEMDP2 displays the
                     727    727 				;address in (ADSAVE) and its data.
                     728    728 				;It also sets the STATE to 2.
01CB  C9             729    729 	RET
                     730    730 ;
                     731    731 KCBR:
                     732    732 ;Branched by table KFUN.
                     733    733 ;Executed when 'CBr' (clear break point) key is pressed.
                     734    734 
01CC  CD DE 03       735    735 	CALL	CLRBR		;Call subroutine CLRBR to clear
                     736    736 				;break point.  When returned, the HL
                     737    737 				;register will contain FFFF.
01CF  22 DE FF       738    738 	LD	(ADSAVE), HL	;Store FFFF into (ADSAVE)
01D2  CD 0B 04       739    739 	CALL	MEMDP2		;Display address and its data.
                     740    740 						;Also set STATE to 2.
01D5  C9             741    741 	RET
                     742    742 ;
                     743    743 KREG:
                     744    744 ;Branched by table KFUN.
                     745    745 ;Executed when 'Reg' key is pressed.
01D6  DD 21 CA 07    746    746 	LD	IX, REG_	;Routine SCAN uses IX as a pointer
                     747    747 				;for display buffer.  Setting IX to REG
                     748    748 				;will cause SCAN to display 'Reg-  '
01DA  CD C4 04       749    749 	CALL	FCONV		;Decode user's flag F and F' to
                     750    750 				;binary display format.  This
                     751    751 				;format will be used later, when
                     752    752 				;user requires the monitor to
                     753    753 				;display decoded flag by pressing
                     754    754 				;keys 'SZXH', 'XPNC',...
01DD  C9             755    755 	RET
                     756    756 ;
                     757    757 KADDR:
                     758    758 ;Branched by table KFUN.
                     759    759 ; Executed when 'Addr' key is pressed.
                     760    760 
01DE  CD 02 04       761    761 	CALL	MEMDP1		;Display the address stored in
                     762    762 				;(ADSAVE) and its data.
                     763    763 				;Set STATE to 1 (AD).
01E1  C9             764    764 	RET
                     765    765 ;
                     766    766 ; Function Move, Relative, Read-tape and
                     767    767 ; Write-tape require from one to three
                     768    768 ; parameters.  They are stored in STEPBF
                     769    769 ; (step buffer).  STMINOR (minor status)
                     770    770 ; contains the number of parameters that has
                     771    771 ; been entered.  For Move and Relative, the
                     772    772 ; default value of the first parameter is
                     773    773 ; the address stored in (ADSAVE).  There
                     774    774 ; is no default value for the first parameter
                     775    775 ; (filename) of Read- and Write-tape.  When the
                     776    776 ; function keys are pressed, STMINOR is automatically
                     777    777 ; reset to 0.
                     778    778 ;
                     779    779 
                     780    780 KMV:
                     781    781 ;Branched by table KFUN.
                     782    782 ;Executed when 'Move' key is pressed.
                     783    783 KRL:
                     784    784 ;Branched by table KFUN.
                     785    785 ;Executed when 'Rela' (relative) key is pressed.
01E2  2A DE FF       786    786 	LD	HL, (ADSAVE)	;Store the contents of ADSAVE
01E5  22 AF FF       787    787 	LD	(STEPBF), HL	;into STEPBF as default value
                     788    788 				;of first parameter.
                     789    789 
                     790    790 KWT:
                     791    791 ;Branched by table KFUN.
                     792    792 ;Executed when 'USB WR' key is pressed.
                     793    793 
                     794    794 KRT:
                     795    795 ;Branched by table KFUN.
                     796    796 ;Executed when 'USB RD' key is pressed.
                     797    797 
01E8  CD 3A 04       798    798 	CALL	STEPDP		;Display the parameter that
                     799    799 				;is being entered now by calling
                     800    800 				;subroutine STEPDP.
01EB  C9             801    801 	RET
                     802    802 ;
                     803    803 ;***********************************************************
                     804    804 ; The following subroutines with name H???
                     805    805 ; are the service routines for hexadecimal
                     806    806 ; keys corresponding to each STATE.  They
                     807    807 ; are all branched by table HTAB and STATE.
                     808    808 
01EC  C3 BB 03       809    809 HFIX	JP	IGNORE		;When the display is fixed pattern
                     810    810 				;hexadecimal keys are illegal.
                     811    811 				;Disable all LED's as a warning
                     812    812 				;message to the user.  This is what
                     813    813 				;routine IGNORE does.
                     814    814 ;
01EF  2A DE FF       815    815 HDA	LD	HL, (ADSAVE)	;Get the address being displayed
                     816    816 				;now from (ADSAVE)
01F2  CD F6 05       817    817 	CALL	RAMCHK		;Check if it is in RAM.
01F5  C2 BB 03       818    818 	JP	NZ, IGNORE	;If not, ignore this key and
                     819    819 				;send out a warning message.
01F8  CD EE 03       820    820 	CALL	PRECL1		;If this is the first hexadecimal
                     821    821 				;key entered after function or sub-
                     822    822 				;function key, reset the data of that
                     823    823 				;address to 0. (by routine PERCL1)
01FB  79             824    824 	LD	A, C		;The key-code is saved in C by
                     825    825 				;routine KHEX.  Restore it to A.
01FC  ED 6F          826    826 	RLD			;Rotate the key-code (4 bits) into
                     827    827 				;the address obtained above. (in HL)
01FE  CD 0B 04       828    828 	CALL	MEMDP2		;Display the address and data,
                     829    829 				;then set STATE to 2 (DA).
0201  C9             830    830 	RET
                     831    831 ;
0202  21 DE FF       832    832 HAD:	LD	HL, ADSAVE
0205  CD FA 03       833    833 	CALL	PRECL2		;If this is the first hexadecimal
                     834    834 				;key after function key is entered,
                     835    835 				;set the contents of ADSAVE to 0.
0208  79             836    836 	LD	A, C		;The key-code is saved in C
                     837    837 				;by routine KHEX.
                     838    838 				;The next three instructions shift
                     839    839 				;the addres being displayed by
                     840    840 				;one digit.
0209  ED 6F          841    841 	RLD
020B  23             842    842 	INC	HL
020C  ED 6F          843    843 	RLD
020E  CD 02 04       844    844 	CALL	MEMDP1		;Display the address and its
                     845    845 				;data.  Also, set STATE to 1.
0211  C9             846    846 	RET
                     847    847 ;
                     848    848 HRGAD:
                     849    849 HRGFIX:
0212  79             850    850 	LD	A, C
0213  DD 21 B6 FF    851    851 	LD	IX, DISPBF
0217  21 E3 FF       852    852 	LD	HL, STMINOR
021A  87             853    853 	ADD	A, A		;The key-code is the register
                     854    854 				;name.  Double it and store it
021B  77             855    855 	LD	(HL), A		;into STMINOR.
                     856    856 
021C  CD 73 04       857    857 	CALL	REGDP8		;Display register and set
                     858    858 				;STATE to 8. (RGAD)
021F  C9             859    859 	RET
                     860    860 ;
                     861    861 HRT:
                     862    862 HWT:
                     863    863 HRL:
0220  CD 55 04       864    864 HMV:	CALL	LOCSTBF		;Use STMINOR and STEPBF
                     865    865 				;to calculate the address
                     866    866 				;of current parameter in
                     867    867 				;step buffer.
0223  CD FA 03       868    868 	CALL	PRECL2		;If this is the first hex
                     869    869 				;key entered, clear the
                     870    870 				;parameter (2 bytes) by
                     871    871 				;PRECL2.
0226  79             872    872 	LD	A, C		;C contains the key-code
0227  ED 6F          873    873 	RLD			;Rotate the parameter (2 bytes)
                     874    874 				;1 digit left with the key-code.
                     875    875 
0229  23             876    876 	INC	HL
022A  ED 6F          877    877 	RLD
022C  CD 3A 04       878    878 	CALL	STEPDP		;Display the parameter.
022F  C9             879    879 	RET
                     880    880 ;
0230  CD BB 04       881    881 HRGDA	CALL	LOCRGBF		;Calculate the address of
                     882    882 				;the register being modified.
0233  CD EE 03       883    883 	CALL	PRECL1		;If this is the first hex
                     884    884 				;key entered.  Clear the register
                     885    885 				;(1 byte) by PRECL1.
0236  79             886    886 	LD	A, C		;C contains the key-code
0237  ED 6F          887    887 	RLD			;Rotate user's register (1 byte)
                     888    888 				;1 digit left with the key-code.
                     889    889 
0239  CD 77 04       890    890 	CALL	REGDP9		;Display the register and set
                     891    891 				;STATE to 9 (RGDA).
023C  C9             892    892 	RET
                     893    893 ;
                     894    894 ;***********************************************************
                     895    895  ;The following routines with name
                     896    896  ;I???? are the service routines for
                     897    897  ;'+' key corresponding to each STATE
                     898    898  ;They are all branched by table ITAB
                     899    899  ;and STATE
                     900    900 
                     901    901 IFIX:
                     902    902 IRGFIX:
023D  C3 BB 03       903    903 	JP	IGNORE		;'+' key is illegal for state
                     904    904 				;FIX or RGFIX, ignore it.
                     905    905 ;
                     906    906 IAD:
0240  2A DE FF       907    907 IDA:	LD	HL, (ADSAVE)	;Increase the address being
                     908    908 				;displayed now (in ADSAVE)
                     909    909 				;by 1.
0243  23             910    910 	INC	HL
0244  22 DE FF       911    911 	LD	(ADSAVE), HL
0247  CD 0B 04       912    912 	CALL	MEMDP2		;Display the address and data,
                     913    913 				;then set the STATE to 2 (DA).
024A  C9             914    914 	RET
                     915    915 ;
                     916    916 IRT:
                     917    917 IWT:
                     918    918 IRL:
024B  21 E3 FF       919    919 IMV:	LD	HL, STMINOR	;STMINOR contains the
                     920    920 				;parameter count, increment
                     921    921 				;it by one.
024E  34             922    922 	INC	(HL)
024F  CD 5F 04       923    923 	CALL	LOCSTNA		;Check if the count is
                     924    924 				;overflowed.
0252  20 04          925    925 	JR	NZ, ISTEP	;If not overflowed, continue
                     926    926 				;at ISTEP
0254  35             927    927 	DEC	(HL)		;Otherwise, restore the count
                     928    928 				;and ignore the '+' key.
0255  C3 BB 03       929    929 	JP	IGNORE
0258  CD 3A 04       930    930 ISTEP	CALL	STEPDP		;Display the parameter at
                     931    931 				;step buffer.
025B  C9             932    932 	RET
                     933    933 ;
                     934    934 IRGAD:
025C  21 E3 FF       935    935 IRGDA:	LD	HL, STMINOR	;In these states, the STMINOR
                     936    936 				;contains the register name.
                     937    937 				;Increase it by 1.  If it
                     938    938 				;reaches the last one, reset
                     939    939 				;it to the first one (0).
025F  34             940    940 	INC	(HL)
0260  3E 1F          941    941 	LD	A, 1FH
0262  BE             942    942 	CP	(HL)
0263  30 02          943    943 	JR	NC, IRGNA
0265  36 00          944    944 	LD	(HL), 0
0267  CD 77 04       945    945 IRGNA	CALL	REGDP9		;Display the register and
                     946    946 				;set STATE to 9
026A  C9             947    947 	RET
                     948    948 ;
                     949    949 ;***********************************************************
                     950    950  ;The following routines with name
                     951    951  ;D???? are the service routines for
                     952    952  ;'-' key corresponding to each state.
                     953    953  ;They are all branched by table DTAB
                     954    954  ;and STATE.
                     955    955 
                     956    956 DFIX:
                     957    957 DRGFIX:
026B  C3 BB 03       958    958 	JP	IGNORE		;'-' key is illegal for
                     959    959 				;these states.  Ignore it.
                     960    960 ;
                     961    961 DAD:
026E  2A DE FF       962    962 DDA:	LD	HL, (ADSAVE)	;Decrease the address being
                     963    963 				;displayed now (in ADSAVE)
                     964    964 				;by one.
0271  2B             965    965 	DEC	HL
0272  22 DE FF       966    966 	LD	(ADSAVE), HL
0275  CD 0B 04       967    967 	CALL	MEMDP2		;Display the address and data,
                     968    968 				;set STATE to 2 (DA).
0278  C9             969    969 	RET
                     970    970 ;
                     971    971 DRT:
                     972    972 DWT:
                     973    973 DRL:
0279  21 E3 FF       974    974 DMV:	LD	HL, STMINOR	;In these states, STMINOR contains
                     975    975 				;the parameter count.  Decrease it by one.
                     976    976 				;If overflow occurs, restore STMINOR and
                     977    977 				;ignore the '-' key.  Otherwise continue
                     978    978 				;at DSTEP.
                     979    979 
027C  35             980    980 	DEC	(HL)
027D  CD 5F 04       981    981 	CALL	LOCSTNA
0280  20 04          982    982 	JR	NZ, DSTEP
0282  34             983    983 	INC	(HL)
0283  C3 BB 03       984    984 	JP	IGNORE
0286  CD 3A 04       985    985 DSTEP	CALL	STEPDP		;Display the parameter.
0289  C9             986    986 	RET
                     987    987 ;
                     988    988 DRGAD:
028A  21 E3 FF       989    989 DRGDA:	LD	HL, STMINOR	;In these states, STMINOR
                     990    990 				;contains the register name.
                     991    991 				;Decrease it by one.  If it
                     992    992 				;goes below zero,  set it to
                     993    993 				;the highest value (1F).
028D  35             994    994 	DEC	(HL)
028E  3E 1F          995    995 	LD	A, 01FH
0290  BE             996    996 	CP	(HL)
0291  30 02          997    997 	JR	NC, DRGNA
0293  36 1F          998    998 	LD	(HL), 1FH
0295  CD 77 04       999    999 DRGNA	CALL	REGDP9		;Display the register and
                    1000   1000 				;set STATE to 9.
0298  C9            1001   1001 	RET
                    1002   1002 ;
                    1003   1003 ;***********************************************************
                    1004   1004  ;The following routines with name
                    1005   1005  ;G???? are the service routines for
                    1006   1006  ;'GO' key corresponding to each
                    1007   1007  ;state.  They are all branced by
                    1008   1008  ;table GTAB and STATE.
                    1009   1009 
                    1010   1010 GFIX:
                    1011   1011 GRGFIX:
                    1012   1012 GRGAD:
0299  C3 BB 03      1013   1013 GRGDA:	JP	IGNORE		;'GO' key is illegal for
                    1014   1014 				;these states.  Ignore it.
                    1015   1015 ;
                    1016   1016 GAD:
029C  2A E0 FF      1017   1017 GDA:	LD	HL, (BRAD)	;Get the address of break
                    1018   1018 				;point.
029F  36 EF         1019   1019 	LD	(HL), 0EFH	;Instruction RST28H.
                    1020   1020 				;The content of break address
                    1021   1021 				;is changed to RST 28H before
                    1022   1022 				;the control is transfered to
                    1023   1023 				;user's program.  This
                    1024   1024 				;will cause a trap when user's
                    1025   1025 				;PC passes this point.
02A1  3E FF         1026   1026 	LD	A, 0FFH		;Save FF into TEMP.  This data
                    1027   1027 				;will be output to port C later.
                    1028   1028 				;FF is used to disable break point.
02A3  32 EA FF      1029   1029 PREOUT	LD	(TEMP), A	;Store A into TEMP.
02A6  3A D2 FF      1030   1030 	LD	A, (USERIF)	;Save two instructions into
                    1031   1031 				;TEMP and TEMP+1.  THese two
                    1032   1032 				;instructions will be executed
                    1033   1033 				;later.  If the user's IFF
                    1034   1034 				;(interrupt flip-flop) is 1,
                    1035   1035 				;the instructions are 'EI RET'.
                    1036   1036 				;Otherwise, they are 'DI RET'.
02A9  CB 47         1037   1037 	BIT	0, A
02AB  21 FB C9      1038   1038 	LD	HL, 0C9FBH	;'EI', 'RET'
02AE  20 02         1039   1039 	JR	NZ, EIDI
02B0  2E F3         1040   1040 	LD	L, 0F3H		;'DI'
02B2  22 EB FF      1041   1041 EIDI	LD	(TEMP+1), HL
02B5  31 BC FF      1042   1042 	LD	SP, REGBF	;Restore user's registers by
                    1043   1043 				;setting SP to REGBF (register
                    1044   1044 				;buffer) and continuously popping
                    1045   1045 				;the stack.
02B8  F1            1046   1046 	POP	AF
02B9  C1            1047   1047 	POP	BC
02BA  D1            1048   1048 	POP	DE
02BB  E1            1049   1049 	POP	HL
02BC  08            1050   1050 	EX	AF, AF'
02BD  F1            1051   1051 	POP	AF
02BE  08            1052   1052 	EX	AF, AF'
02BF  D9            1053   1053 	EXX
02C0  C1            1054   1054 	POP	BC
02C1  D1            1055   1055 	POP	DE
02C2  E1            1056   1056 	POP	HL
02C3  D9            1057   1057 	EXX
02C4  DD E1         1058   1058 	POP	IX
02C6  FD E1         1059   1059 	POP	IY
02C8  ED 7B D0 FF   1060   1060 	LD	SP, (USERSP)	;Restore user's SP.
02CC  32 BD FF      1061   1061 	LD	(USERAF+1), A	;Temporarily save A
02CF  3A D3 FF      1062   1062 	LD	A, (USERIF+1)	;Restore user's I
02D2  ED 47         1063   1063 	LD	I, A
                    1064   1064 				;The next 3 instructions
02D4  E5            1065   1065 	PUSH	HL		;push the address being
                    1066   1066 				;displayed now (in ADSAVE)
                    1067   1067 				;onto stack without changing
                    1068   1068 				;HL register.  This address will be
                    1069   1069 				;treated as user's new PC.
02D5  2A DE FF      1070   1070 	LD	HL, (ADSAVE)
02D8  E3            1071   1071 	EX	(SP), HL
02D9  3A EA FF      1072   1072 	LD	A, (TEMP)	;Output the data stored in
                    1073   1073 				;TEMP to port C of 8255
                    1074   1074 				;This data is prepared by
                    1075   1075 				;routine KSTEP or GAD or
                    1076   1076 				;GDA.  In first case, it is
                    1077   1077 				;10111111 and will enable
                    1078   1078 				;break point.  In other
                    1079   1079 				;cases, it is FF and will
                    1080   1080 				;disable break point.
                    1081   1081 				;If break is enabled, non-
                    1082   1082 				;maskable interrupt will occur
                    1083   1083 				;5 M1's after the OUT instruction.
02DC  D3 02         1084   1084 	OUT	(DIGIT), A
02DE  3A BD FF      1085   1085 	LD	A, (USERAF+1)	;1st M1,
                    1086   1086 				;Restore A register.
02E1  C3 EB FF      1087   1087 	JP	TEMP+1		;2nd M1,
                    1088   1088 				;Execute the two instructions
                    1089   1089 				;stored in RAM.  They are:
                    1090   1090 				;    EI (or DI)     ;3rd M1
                    1091   1091 				;    RET            ;4th M1
                    1092   1092 				;The starting address of user's
                    1093   1093 				;program has been pushed onto
                    1094   1094 				;the top of the stack.  RET pops
                    1095   1095 				;out this address and transfers
                    1096   1096 				;control to it.  The first M1
                    1097   1097 				;of user's program will be the
                    1098   1098 				;5th M1 after OUT. If break point
                    1099   1099 				;is enabled, NMI will occur after
                    1100   1100 				;this instruction is completed.
                    1101   1101 				;This is the mechanism of single
                    1102   1102 				;step.
                    1103   1103 ;
                    1104   1104 ;***********************************************************
02E4  21 AF FF      1105   1105 GMV	LD	HL, STEPBF
02E7  CD 3D 05      1106   1106 	CALL	GETP		;Load parameters from
                    1107   1107 				;step buffer into registers.
                    1108   1108 				;Also check if the parameters
                    1109   1109 				;are legal.  After GETP,
                    1110   1110 				;HL = start address of source
                    1111   1111 				;BC = length to MOVE.
02EA  38 67         1112   1112 	JR	C, ERROR	;Jump to ERROR if the
                    1113   1113 				;parameters are illegal. (I.e., Ending
                    1114   1114 				;address < starting address.)
02EC  ED 5B B3 FF   1115   1115 	LD	DE, (STEPBF+4)	;Load destination
                    1116   1116 				;address into DE.
02F0  ED 52         1117   1117 	SBC	HL, DE		;Compare HL and DE to
                    1118   1118 				;determine move up or down.
02F2  30 0C         1119   1119 	JR	NC, MVUP
                    1120   1120 				;Move down:
02F4  EB            1121   1121 	EX	DE, HL		;HL = destination address
02F5  09            1122   1122 	ADD	HL, BC		;HL = dest. address + length
02F6  2B            1123   1123 	DEC	HL		;HL = end address of dest.
02F7  EB            1124   1124 	EX	DE, HL		;DE = end address of dest.
02F8  2A B1 FF      1125   1125 	LD	HL, (STEPBF+2)	;HL = end address of source
02FB  ED B8         1126   1126 	LDDR			;block transfer instruction
02FD  13            1127   1127 	INC	DE		;DE = last address moved
02FE  18 1C         1128   1128 	JR	ENDFUN		;Continue at ENDFUN
                    1129   1129 MVUP:				;Move up:
0300  19            1130   1130 	ADD	HL, DE		;HL is destroyed by
                    1131   1131 				;SBC HL, DE.  Restore HL.
0301  ED B0         1132   1132 	LDIR			;block transfer
0303  1B            1133   1133 	DEC	DE		;DE = last address moved
0304  18 16         1134   1134 	JR	ENDFUN		;Continue at ENDFUN
                    1135   1135 ;
                    1136   1136 ;***********************************************************
0306  ED 5B AF FF   1137   1137 GRL	LD	DE, (STEPBF)	;Load starting address
                    1138   1138 				;into DE.
030A  13            1139   1139 	INC	DE		;Increase this address by 2.
                    1140   1140 				;Relative address is used in
                    1141   1141 				;instruction JR or DJNZ.
                    1142   1142 				;The codes for them are 2 bytes.
                    1143   1143 				;The PC is increased by 2 after
                    1144   1144 				;opcode is fetched.
030B  13            1145   1145 	INC	DE
030C  2A B1 FF      1146   1146 	LD	HL, (STEPBF+2)	;Load destination
                    1147   1147 				;address into HL.
030F  B7            1148   1148 	OR	A
0310  ED 52         1149   1149 	SBC	HL, DE		;Calculate difference.
0312  7D            1150   1150 	LD	A, L		;Check if the offset is between
                    1151   1151 				;+127 (007FH) and -128 (FF80H).
                    1152   1152 				;If the offset is positive, both H
                    1153   1153 				;and bit 7 of L must be zero; if it
                    1154   1154 				;is negative, H and bit 7 of L must
                    1155   1155 				;be FF and 1.  In both cases, adding
                    1156   1156 				;H with bit 7 of L results in 0.
0313  17            1157   1157 	RLA			;Rotate bit 7 of L into carry flag.
0314  7C            1158   1158 	LD	A, H
0315  CE 00         1159   1159 	ADC	A, 0		;ADD H and bit 7 of L.
0317  20 3A         1160   1160 	JR	NZ, ERROR	;Branch to ERROR if
                    1161   1161 				;the results is nonzero.
0319  7D            1162   1162 	LD	A, L
031A  1B            1163   1163 	DEC	DE
031B  12            1164   1164 	LD	(DE), A		;Save the offset into
                    1165   1165 				;the next byte of opcode.
                    1166   1166 				;(DJNZ or JR)
                    1167   1167 ;
                    1168   1168 ENDFUN:
031C  ED 53 DE FF   1169   1169 	LD	(ADSAVE), DE	;Save DE into ADSAVE.
0320  CD 0B 04      1170   1170 	CALL	MEMDP2		;Display this address and
                    1171   1171 				;its data.  Set STATE to 2.
0323  C9            1172   1172 	RET
                    1173   1173 ;
                    1174   1174 ;***********************************************************
                    1175   1175 GWT:
0324  CD 2D 05      1176   1176 	CALL	SUM1		;Load parameters from
                    1177   1177 				;step buffer into registers.
                    1178   1178 				;Check if the parameters
                    1179   1179 				;are legal.  If legal, calculate
                    1180   1180 				;the sum of all data to be output
                    1181   1181 				;to tape.
0327  38 2A         1182   1182 	JR	C, ERROR	;Branch to ERROR if the
                    1183   1183 				;parameters are illegal. (length is
                    1184   1184 				;negative)
0329  32 B5 FF      1185   1185 	LD	(STEPBF+6), A	;Store the checksum into
                    1186   1186 				;STPEGBF+6.
032C  21 A0 0F      1187   1187 	LD	HL, 4000	;Output 1 kHz square
                    1188   1188 				;wave for 4000 cycles.
                    1189   1189 				;Leading sync. signal.
032F  CD DE 05      1190   1190 	CALL	TONE1K
0332  21 AF FF      1191   1191 	LD	HL, STEPBF	;Output 7 bytes starting
                    1192   1192 				;at STEPBF. (Include:
                    1193   1193 				;filename, starting, ending
                    1194   1194 				;address and checksum)
0335  01 07 00      1195   1195 	LD	BC, 7
0338  CD A7 05      1196   1196 	CALL	TAPEOUT
033B  21 A0 0F      1197   1197 	LD	HL, 4000	;Output 2 kHz square
                    1198   1198 				;wave for 4000 cycles.
                    1199   1199 				;Middle sync.  The file name of the
                    1200   1200 				;file being read will be displayed
                    1201   1201 				;in this interval.
033E  CD E2 05      1202   1202 	CALL	TONE2K
0341  CD 3A 05      1203   1203 	CALL	GETPTR		;Load parameters into
                    1204   1204 				;registers. (Starting, ending and
                    1205   1205 				;length).
0344  CD A7 05      1206   1206 	CALL	TAPEOUT		;Output user's data.
0347  21 A0 0F      1207   1207 	LD	HL, 4000	;Output 4000 cycles of
                    1208   1208 				;2 kHz square wave.
                    1209   1209 				;(Tail sync.)
034A  CD E2 05      1210   1210 	CALL	TONE2K
034D  ED 5B B3 FF   1211   1211 ENDTAPE	LD	DE, (STEPBF+4)	;DE = last address
0351  18 C9         1212   1212 	JR	ENDFUN		;Continue at ENDFUN
                    1213   1213 
0353  DD 21 A9 07   1214   1214 ERROR	LD	IX, ERR_	;IX points to '-Err  '
0357  C3 D0 00      1215   1215 	JP	SETST0		;Set STATE to 0 by
                    1216   1216 				;branching to SETST0.
                    1217   1217 ;
                    1218   1218 ;***********************************************************
                    1219   1219 GRT:
035A  2A AF FF      1220   1220 	LD	HL, (STEPBF)	;Temporarily save filename.
035D  22 EA FF      1221   1221 	LD	(TEMP), HL
0360  3E 40         1222   1222 LEAD	LD	A, 01000000B	;decimal point
0362  D3 01         1223   1223 	OUT	(SEG7), A	;When searching for filename,
                    1224   1224 				;the display is blank initially.
                    1225   1225 				;If the data read from MIC is
                    1226   1226 				;acceptable 0 or 1, the display
                    1227   1227 				;becomes '......'.
0364  21 E8 03      1228   1228 	LD	HL, 1000
0367  CD 8C 05      1229   1229 LEAD1	CALL	PERIOD		;The return of PERIOD
                    1230   1230 				;is in flag:
                    1231   1231 				;  NC -- tape input is 1 kHz;
                    1232   1232 				;   C -- otherwise.
036A  38 F4         1233   1233 	JR	C, LEAD		;Loop until leading sync
                    1234   1234 				;is detected.
036C  2B            1235   1235 	DEC	HL		;Decrease HL by one when
                    1236   1236 				;one period is detected.
036D  7C            1237   1237 	LD	A, H
036E  B5            1238   1238 	OR	L		;Check if both H and L are 0.
036F  20 F6         1239   1239 	JR	NZ, LEAD1	;Wait for 1000 periods.
                    1240   1240 				;The leading sync is accepted
                    1241   1241 				;if it is longer than 1000
                    1242   1242 				;cycles (1 second).
0371  CD 8C 05      1243   1243 LEAD2	CALL	PERIOD
0374  30 FB         1244   1244 	JR	NC, LEAD2	;Wait for all leading sync to
                    1245   1245 				;pass over.
                    1246   1246 
0376  21 AF FF      1247   1247 	LD	HL, STEPBF	;Load 7 bytes from
                    1248   1248 				;tape into STEPBF.
0379  01 07 00      1249   1249 	LD	BC, 7
037C  CD 4D 05      1250   1250 	CALL	TAPEIN
037F  38 DF         1251   1251 	JR	C, LEAD		;Jump to LEAD if input
                    1252   1252 				;is not succesful.
0381  ED 5B AF FF   1253   1253 	LD	DE, (STEPBF)	;Get filename from
                    1254   1254 				;step buffer.
0385  CD 65 06      1255   1255 	CALL	ADDRDP		;Convert it to display
                    1256   1256 				;format.
0388  06 96         1257   1257 	LD	B, 150		;Display it for 1.5 sec.
038A  CD 24 06      1258   1258 FILEDP	CALL	SCAN1
038D  10 FB         1259   1259 	DJNZ	FILEDP
038F  2A EA FF      1260   1260 	LD	HL, (TEMP)	;Check if the input
                    1261   1261 				;filename equals to the
                    1262   1262 				;specified filename.
0392  B7            1263   1263 	OR	A
0393  ED 52         1264   1264 	SBC	HL, DE
0395  20 C9         1265   1265 	JR	NZ, LEAD	;If not, find the leading
                    1266   1266 				;sync of next file.
                    1267   1267 
0397  3E 02         1268   1268 	LD	A, 00000010B	;segment '-'
0399  D3 01         1269   1269 	OUT	(SEG7), A	;If filename is found
                    1270   1270 				;Display '------'.
039B  CD 3A 05      1271   1271 	CALL	GETPTR		;The parameters (starting,
                    1272   1272 				;ending address and checksum
                    1273   1273 				;have been loaded into
                    1274   1274 				;STEPBF.  Load them into
                    1275   1275 				;registers, calculate the block
                    1276   1276 				;length and check if they are
                    1277   1277 				;legal.
039E  38 B3         1278   1278 	JR	C, ERROR	;Jump to ERROR if the
                    1279   1279 				;parameters are illegal.
03A0  CD 4D 05      1280   1280 	CALL	TAPEIN		;Input user's data.
03A3  38 AE         1281   1281 	JR	C, ERROR	;Jump to ERROR if input
                    1282   1282 				;is not succesful.
03A5  CD 2D 05      1283   1283 	CALL	SUM1		;Calculate the sum of all
                    1284   1284 				;input data.
03A8  21 B5 FF      1285   1285 	LD	HL, STEPBF+6
03AB  BE            1286   1286 	CP	(HL)		;Compare it with the
                    1287   1287 				;checksum calculated and stored by
                    1288   1288 				;'USB WR'.
03AC  20 A5         1289   1289 	JR	NZ, ERROR	;Jump to ERROR if not
                    1290   1290 				;matched.
03AE  18 9D         1291   1291 	JR	ENDTAPE		;Continue at ENDTAPE.
                    1292   1292 ;
                    1293   1293 ;***********************************************************
                    1294   1294 BRANCH:
                    1295   1295 ;Branch table format:
                    1296   1296 ;   byte 1,2 : address of the 1st routine in
                    1297   1297 ;              each group.
                    1298   1298 ;   byte 3   : difference between the address
                    1299   1299 ;              of 1st and 1st routine, which is
                    1300   1300 ;              of course 0.
                    1301   1301 ;   byte 4   : difference between the address
                    1302   1302 ;              of 2nd and 1st routine
                    1303   1303 ;   byte 5   : difference between the address
                    1304   1304 ;              of 3rd and 1st routine
                    1305   1305 ;    ...
                    1306   1306 ;    ...
                    1307   1307 ;    ...
                    1308   1308 ; HL : address of branch table
                    1309   1309 ; A  : the routine number in its group
                    1310   1310 ; Such branch tables can save table length and avoid page
                    1311   1311 ; (256 bytes) boundary problems.
                    1312   1312 
03B0  5E            1313   1313 	LD	E, (HL)		;Load the address of 1st
                    1314   1314 				;routine in the group into
                    1315   1315 				;DE register.
03B1  23            1316   1316 	INC	HL
03B2  56            1317   1317 	LD	D, (HL)
03B3  23            1318   1318 	INC	HL		;Locate the pointer of difference
                    1319   1319 				;table.
03B4  85            1320   1320 	ADD	A, L
03B5  6F            1321   1321 	LD	L, A
03B6  6E            1322   1322 	LD	L, (HL)		;Load the address
                    1323   1323 				;difference into L.
03B7  26 00         1324   1324 	LD	H, 0
03B9  19            1325   1325 	ADD	HL, DE		;Get routine's real address
03BA  E9            1326   1326 	JP	(HL)		;Jump to it.
                    1327   1327 ;
                    1328   1328 ;***********************************************************
                    1329   1329 IGNORE:
03BB  21 E6 FF      1330   1330 	LD	HL, TEST
03BE  CB FE         1331   1331 	SET	7, (HL)		;Routine SCAN will check bit
                    1332   1332 				;7 of TEST.  If it is set,
                    1333   1333 				;all LEDs will be disabled.
                    1334   1334 				;This is a warning message to
                    1335   1335 				;the user when a illegal key
                    1336   1336 				;is entered.
03C0  C9            1337   1337 	RET
                    1338   1338 ;
                    1339   1339 ;***********************************************************
                    1340   1340 INI:
                    1341   1341 ; Power-up initialization.
03C1  DD 21 A5 07   1342   1342 	LD	IX, BLANK	;BLANK is the initial display
                    1343   1343 				;pattern.
                    1344   1344 				;Display the following
                    1345   1345 				;patterns sequence, each 0.16
                    1346   1346 				;seconds:
                    1347   1347 				;    '      '
                    1348   1348 				;    '     H'
                    1349   1349 				;    '    HE'
                    1350   1350 				;    '   HEL'
                    1351   1351 				;    '  HELL'
                    1352   1352 				;    ' HELLO'
                    1353   1353 				;    'HELLO '
                    1354   1354 
03C5  0E 07         1355   1355 	LD	C, 7		;pattern count
03C7  06 10         1356   1356 INI1	LD	B, 16		;Display 0.16 second.
03C9  CD 24 06      1357   1357 INI2	CALL	SCAN1
03CC  10 FB         1358   1358 	DJNZ	INI2
03CE  DD 2B         1359   1359 	DEC	IX		;next pattern
03D0  0D            1360   1360 	DEC	C
03D1  20 F4         1361   1361 	JR	NZ, INI1
                    1362   1362 ;
03D3  3E A5         1363   1363 	LD	A, PWCODE
03D5  C3 B3 06      1364   1364 	JP	INI3
03D8  21 66 00      1365   1365 INI4	LD	HL, NMI
03DB  22 EE FF      1366   1366 	LD	(IM1AD), HL	;Set the service routine
                    1367   1367 				;of RST 38H to NMI, which is the
                    1368   1368 				;nonmaskable interrupt service
                    1369   1369 				;routine for break point and
                    1370   1370 				;single step.
                    1371   1371 CLRBR:
                    1372   1372 ; Clear break point by setting
                    1373   1373 ; the break point address to
                    1374   1374 ; FFFF.  This is a non-existant
                    1375   1375 ; address, so break can never
                    1376   1376 ; happen.
                    1377   1377 
03DE  21 FF FF      1378   1378 	LD	HL, 0FFFFH
03E1  22 E0 FF      1379   1379 	LD	(BRAD), HL
03E4  C9            1380   1380 	RET
                    1381   1381 ;
                    1382   1382 TESTM:
                    1383   1383 ; Check if the display is of 'addres-data'
                    1384   1384 ; form, i.e. STATE 1 or 2.
                    1385   1385 ; The result is stored in zero flag.
                    1386   1386 ;   Z:	yes
                    1387   1387 ;  NZ:	no
                    1388   1388 
03E5  3A E4 FF      1389   1389 	LD	A, (STATE)
03E8  FE 01         1390   1390 	CP	1
03EA  C8            1391   1391 	RET	Z
03EB  FE 02         1392   1392 	CP	2
03ED  C9            1393   1393 	RET
                    1394   1394 ;
                    1395   1395 PRECL1:
                    1396   1396 ; Pre-clear 1 byte.
                    1397   1397 ; If bit 0 of TEST is not 0, load 0 into (HL).
                    1398   1398 ; Bit 0 of TEST is cleared after check.
                    1399   1399 ; Only AF register is destroyed.
                    1400   1400 
03EE  3A E6 FF      1401   1401 	LD	A, (TEST)
03F1  B7            1402   1402 	OR	A		;Is bit 0 of TEST zero?
03F2  C8            1403   1403 	RET	Z
03F3  3E 00         1404   1404 	LD	A, 0
03F5  77            1405   1405 	LD	(HL), A		;Clear (HL)
03F6  32 E6 FF      1406   1406 	LD	(TEST), A	;Clear TEST too.
03F9  C9            1407   1407 	RET
                    1408   1408 ;
                    1409   1409 PRECL2:
                    1410   1410 ; Pre-clear 2 bytes.
                    1411   1411 ; If bit 0 of TEST is nonzero, clear (HL)
                    1412   1412 ; and (HL+1).
                    1413   1413 ; Only AF register is destroyed.
                    1414   1414 
03FA  CD EE 03      1415   1415 	CALL	PRECL1
03FD  C8            1416   1416 	RET	Z
03FE  23            1417   1417 	INC	HL
03FF  77            1418   1418 	LD	(HL), A
0400  2B            1419   1419 	DEC	HL
0401  C9            1420   1420 	RET
                    1421   1421 ;
                    1422   1422 ;***********************************************************
                    1423   1423 ; Memory display format: (address-data)
                    1424   1424 
                    1425   1425 ;      i) A.A.A.A. D D -- State is AD.  Four decimal points
                    1426   1426 ;                         under the address field indicate
                    1427   1427 ;                         that the numeric key entered will
                    1428   1428 ;                         be interpreted as memory address.
                    1429   1429 ;     ii) A A A A  D.D.-- State is DA.  Two decimal points
                    1430   1430 ;                         under the data field indicate
                    1431   1431 ;                         the monitor is expecting user to
                    1432   1432 ;                         enter memory data.
                    1433   1433 ;    iii) A.A.A.A. D.D.-- Six decimal points indicate the
                    1434   1434 ;                         address being displayed is set
                    1435   1435 ;                         as a break point.
                    1436   1436 
                    1437   1437 MEMDP1:
0402  3E 01         1438   1438 	LD	A, 1		;Next STATE = 1
0404  06 04         1439   1439 	LD	B, 4		;4 decimal points active
0406  21 B8 FF      1440   1440 	LD	HL, DISPBF+2	;The first active decimal
                    1441   1441 				;point is in DISPBF+2, the
                    1442   1442 				;last in DISPBF+5.
0409  18 07         1443   1443 	JR	SAV12		;Continue at SAV12.
                    1444   1444 MEMDP2:
040B  3E 02         1445   1445 	LD	A, 2		;Next STATE = 2
040D  06 02         1446   1446 	LD	B, 2		;2 active decimal points
040F  21 B6 FF      1447   1447 	LD	HL, DISPBF	;1st decimal point is in
                    1448   1448 				;DISPBF, 2nd in DISPBF+1.
0412  32 E4 FF      1449   1449 SAV12	LD	(STATE), A	;Update STATE
0415  D9            1450   1450 	EXX			;Save register HL, BC, DE
0416  ED 5B DE FF   1451   1451 	LD	DE, (ADSAVE)	;The address to be
                    1452   1452 				;displayed is stored in
                    1453   1453 				;(ADSAVE).  Load it into
                    1454   1454 				;DE register.
041A  CD 65 06      1455   1455 	CALL	ADDRDP		;Convert this address to
                    1456   1456 				;display format and store it
                    1457   1457 				;into DISPBF+2 - DISPBF+5.
041D  1A            1458   1458 	LD	A, (DE)		;Load the data of this
                    1459   1459 				;address into A register
041E  CD 71 06      1460   1460 	CALL	DATADP		;Convert this data to
                    1461   1461 				;display format and store it
                    1462   1462 				;into DISPBF - DISPBF+1
                    1463   1463 BRTEST:
                    1464   1464 ; The next 3 instructions serve to refresh the
                    1465   1465 ; data at break address every time memory is
                    1466   1466 ; displayed.
0421  2A E0 FF      1467   1467 	LD	HL, (BRAD)	;Get break point address.
0424  7E            1468   1468 	LD	A, (HL)		;Get the data of this
                    1469   1469 				;address into A register.
0425  32 E2 FF      1470   1470 	LD	(BRDA), A	;Store it into BRDA (break data).
0428  B7            1471   1471 	OR	A
0429  ED 52         1472   1472 	SBC	HL, DE		;Check if the address to
                    1473   1473 				;be displayed is break point.
042B  20 06         1474   1474 	JR	NZ, SETPT1	;If not, jump to SETPT1.
042D  06 06         1475   1475 	LD	B, 6		;6 active decimal points.
042F  21 B6 FF      1476   1476 	LD	HL, DISPBF	;1st decimal point is in
                    1477   1477 				;DISPBF; 6th in DISPBF+5.
0432  D9            1478   1478 	EXX
0433  D9            1479   1479 SETPT1	EXX
0434  CB F6         1480   1480 SETPT	SET	6,(HL)		;Set decimal points.
                    1481   1481 				;Count in B, first address
                    1482   1482 				;in HL register.
0436  23            1483   1483 	INC	HL
0437  10 FB         1484   1484 	DJNZ	SETPT
0439  C9            1485   1485 	RET
                    1486   1486 ;
                    1487   1487 ;***********************************************************
                    1488   1488 ; Step display format: (this format is used when user is
                    1489   1489 ; entering parameters for Move, Rela, WRtape, RDtape.)
                    1490   1490 
                    1491   1491 ;         P.P.P.P. - N
                    1492   1492 
                    1493   1493 ; 'P' is the digit of parameter.  Four decimal points
                    1494   1494 ; indicate P's are being modified now.  N is the mnemonic of
                    1495   1495 ; the parameter:
                    1496   1496 ;      i) Move   S -- starting address
                    1497   1497 ;                E -- ending address
                    1498   1498 ;                D -- destination address
                    1499   1499 ;     ii) Rela   S -- source address
                    1500   1500 ;                D -- destination address
                    1501   1501 ;    iii) WRtape F -- file name
                    1502   1502 ;                S -- starting address
                    1503   1503 ;                E -- ending address
                    1504   1504 ;     iv) Rdtape F -- filename
                    1505   1505 
                    1506   1506 STEPDP:
                    1507   1507 ;Display step buffer and its parameter name.
                    1508   1508 ;Input:	STATE
                    1509   1509 ;	STMINOR (parameter count)
                    1510   1510 ;registers destroyed: AF, BC, DE, HL
                    1511   1511 
043A  CD 55 04      1512   1512 	CALL	LOCSTBF		;Get parameter address
043D  5E            1513   1513 	LD	E, (HL)		;Load parameter into DE
043E  23            1514   1514 	INC	HL
043F  56            1515   1515 	LD	D, (HL)
0440  CD 65 06      1516   1516 	CALL	ADDRDP		;Convert this paramter to
                    1517   1517 				;display format (4 digits)
                    1518   1518 				;and store it into DISPBF+2
                    1519   1519 				; - DISPBF+5
0443  21 B8 FF      1520   1520 	LD	HL, DISPBF+2	;Set 4 decimal points
                    1521   1521 				;From DISPBF+2 to DISPBF+5
0446  06 04         1522   1522 	LD	B, 4
0448  CD 34 04      1523   1523 	CALL	SETPT
044B  CD 5F 04      1524   1524 	CALL	LOCSTNA		;Get parameter name.
044E  6F            1525   1525 	LD	L, A
044F  26 02         1526   1526 	LD	H, 2		;Pattern '-' for 2nd rightmost
                    1527   1527 				;digit.
0451  22 B6 FF      1528   1528 	LD	(DISPBF), HL
0454  C9            1529   1529 	RET
                    1530   1530 ;
                    1531   1531 LOCSTBF:
                    1532   1532 ;Get the location of paramter.
                    1533   1533 ; address = STEPBF + STMINOR*2
                    1534   1534 ;registers destroyed: AF, HL
                    1535   1535 
0455  3A E3 FF      1536   1536 	LD	A, (STMINOR)	;Get parameter count.
0458  87            1537   1537 	ADD	A, A		;Each parameter has 2 bytes
0459  21 AF FF      1538   1538 	LD	HL, STEPBF	;Get base address
045C  85            1539   1539 	ADD	A, L
045D  6F            1540   1540 	LD	L, A
045E  C9            1541   1541 	RET
                    1542   1542 ;
                    1543   1543 LOCSTNA
                    1544   1544  ;Get parameter name.
                    1545   1545  ;Input: STATE, STMINOR
                    1546   1546  ;Output: parameter name in A, and Z flag.
                    1547   1547 
                    1548   1548  ;registers destroyed: AF, DE
045F  3A E4 FF      1549   1549 	LD	A, (STATE)	;Get STATE.
                    1550   1550 				;Possible states are:
                    1551   1551 				;4,5,6,7. (Move, Rel,
                    1552   1552 				;WRtape, RDtape)
0462  D6 04         1553   1553 	SUB	4		;Change 4,5,6,7 to
                    1554   1554 				;0,1,2,3
0464  87            1555   1555 	ADD	A, A		;Each state has 4 bytes for names
0465  87            1556   1556 	ADD	A, A
0466  11 BC 07      1557   1557 	LD	DE, STEPTAB
0469  83            1558   1558 	ADD	A, E
046A  5F            1559   1559 	LD	E, A		;Now, DE contains the
                    1560   1560 				;address of 1st name
                    1561   1561 				;for each state.
046B  3A E3 FF      1562   1562 	LD	A, (STMINOR)	;Get parameter count
046E  83            1563   1563 	ADD	A, E		;DE <--- DE + A
046F  5F            1564   1564 	LD	E, A
0470  1A            1565   1565 	LD	A, (DE)		;Get parameter name.
0471  B7            1566   1566 	OR	A		;Change zero flag.  If the
                    1567   1567 				;returned pattern (in A) is
                    1568   1568 				;zero,  the '+' or '-' must
                    1569   1569 				;have been pressed beyond legal
                    1570   1570 				;parameter boundary. (Check if
                    1571   1571 				;parameter name got from STEPTAB
                    1572   1572 				;is zero)
0472  C9            1573   1573 	RET
                    1574   1574 ;
                    1575   1575 ;***********************************************************
                    1576   1576 ; Register display format:
                    1577   1577 
                    1578   1578 ;       i)  X X X X  Y Y -- State is REGAD.  The numeric
                    1579   1579 ;                           data entered is interpreted as 
                    1580   1580 ;                           register name.
                    1581   1581 ;                           YY is the register name, the
                    1582   1582 ;                           data of that register pair is,
                    1583   1583 ;                           XXXX.
                    1584   1584 
                    1585   1585 ;      ii)  X X X.X. Y Y or
                    1586   1586 ;     iii)  X.X.X X  Y Y -- State is REGDA.  The unit of
                    1587   1587 ;                           register modification is byte.
                    1588   1588 ;                           The numeric data enterd will
                    1589   1589 ;                           change the byte with decimal
                    1590   1590 ;                           points under it.  Decimal points
                    1591   1591 ;                           can be moved by '+' and '-' keys
                    1592   1592 
                    1593   1593 REGDP8:
                    1594   1594 ; Display register and set STATE to 8.
                    1595   1595 
0473  3E 08         1596   1596 	LD	A, 8		;Next state = 8
0475  18 02         1597   1597 	JR	RGSTIN
                    1598   1598 
                    1599   1599 REGDP9:
                    1600   1600 ; Display register and set STATE to 9
                    1601   1601 
0477  3E 09         1602   1602 	LD	A, 9		;Next state = 9
                    1603   1603 
                    1604   1604 RGSTIN:
                    1605   1605 ; Update STATE by register A.
                    1606   1606 ; Display user's  register (count
                    1607   1607 ; contained in STMINOR).
                    1608   1608 ; registers destroyed: AF, BC, DE, HL
                    1609   1609 
0479  32 E4 FF      1610   1610 	LD	(STATE), A	;Update STATE
047C  3A E3 FF      1611   1611 	LD	A, (STMINOR)	;Get register coutn.
047F  CB 87         1612   1612 	RES	0, A		;Registers are displayed by
                    1613   1613 				;pairs.  Find the count
                    1614   1614 				;of pair leader.  (count of
                    1615   1615 				;the lower one)
0481  47            1616   1616 	LD	B, A		;Temprorarily save A.
0482  CD AE 04      1617   1617 	CALL	RGNADP		;Find register count.
                    1618   1618 				;Store them into DISPBF
                    1619   1619 				;and DISPBF+1.
0485  78            1620   1620 	LD	A, B		;Restore A (register pair leader).
0486  CD BE 04      1621   1621 	CALL	LOCRG		;Get the address of
                    1622   1622 				;user's register.
0489  5E            1623   1623 	LD	E, (HL)		;Get register data. (2 bytes)
048A  23            1624   1624 	INC	HL
048B  56            1625   1625 	LD	D, (HL)
048C  ED 53 DE FF   1626   1626 	LD	(ADSAVE), DE	;Convert them to display
                    1627   1627 				;format and store into
                    1628   1628 				;display buffer.
0490  CD 65 06      1629   1629 	CALL	ADDRDP
0493  3A E4 FF      1630   1630 	LD	A, (STATE)
0496  FE 09         1631   1631 	CP	9		;If STATE equals to 9 (RGDA),
                    1632   1632 				;set 2 decimal points.
                    1633   1633 				;Otherwise return here.
0498  C0            1634   1634 	RET	NZ
0499  21 B8 FF      1635   1635 	LD	HL, DISPBF+2
049C  3A E3 FF      1636   1636 	LD	A, (STMINOR)	;Get register name.
049F  CB 47         1637   1637 	BIT	0, A		;If this register is
                    1638   1638 				;group leader, set decimal
                    1639   1639 				;points of two central digits.
                    1640   1640 				;Otherwise set two left digits.
04A1  28 02         1641   1641 	JR	Z, LOCPT
04A3  23            1642   1642 	INC	HL
04A4  23            1643   1643 	INC	HL
04A5  CB F6         1644   1644 LOCPT	SET	6, (HL)		;Set decimapl points of
                    1645   1645 				;(HL) and (HL+1)
04A7  23            1646   1646 	INC	HL
04A8  CB F6         1647   1647 	SET	6, (HL)
04AA  CD C4 04      1648   1648 	CALL	FCONV		;Convert user's flag (F, F')
                    1649   1649 				;to binary display format.
04AD  C9            1650   1650 	RET
                    1651   1651 ;
                    1652   1652 RGNADP:
                    1653   1653 ; Get the patterns of register names and
                    1654   1654 ; store them into DISPBF and DISPBF+1.
                    1655   1655 ; Input: A contains register count of
                    1656   1656 ;        pair leader.
                    1657   1657 ; registers destroyed: AF,DE,HL
                    1658   1658 
04AE  21 D0 07      1659   1659 	LD	HL, RGTAB	;Get address of pattern
                    1660   1660 				;table.
04B1  85            1661   1661 	ADD	A, L
04B2  6F            1662   1662 	LD	L, A
04B3  5E            1663   1663 	LD	E, (HL)		;Get first pattern
04B4  23            1664   1664 	INC	HL
04B5  56            1665   1665 	LD	D, (HL)		;Get 2nd pattern.
04B6  ED 53 B6 FF   1666   1666 	LD	(DISPBF), DE
04BA  C9            1667   1667 	RET
                    1668   1668 ;
                    1669   1669 LOCRGBF:
                    1670   1670 ; Get the address of user's register.
                    1671   1671 ; Register name contained is STMINOR.
                    1672   1672 ; Destroys HL, AF.
                    1673   1673 
04BB  3A E3 FF      1674   1674 	LD	A, (STMINOR)
04BE  21 BC FF      1675   1675 LOCRG	LD	HL, REGBF
04C1  85            1676   1676 	ADD	A, L
04C2  6F            1677   1677 	LD	L, A
04C3  C9            1678   1678 	RET
                    1679   1679 ;
                    1680   1680 FCONV:
                    1681   1681 ; Encode or decode user's flag register.
                    1682   1682 ; STMINOR contains the name of the flag
                    1683   1683 ; being displayed now.
                    1684   1684 ; registers destroyed: AF, BC, HL.
                    1685   1685 
04C4  3A E3 FF      1686   1686 	LD	A, (STMINOR)	;Get register name.
04C7  B7            1687   1687 	OR	A		;Clear carry flag.
04C8  1F            1688   1688 	RRA			;name of I register: 17H,
                    1689   1689 				;name of IFF: 16H.
                    1690   1690 				;Rotate right one bit, both
                    1691   1691 				;become 0BH.
04C9  FE 0B         1692   1692 	CP	0BH
04CB  28 09         1693   1693 	JR	Z, FLAGX	;Jump to FLAGX if
                    1694   1694 				;I or IFF is being
                    1695   1695 				;displayed now.
04CD  4F            1696   1696 	LD	C, A		;Otherwise, mask out bit
                    1697   1697 				;1 to bit 7 fof user's IFF.
                    1698   1698 				;IFF is only 1 bit, monitor
                    1699   1699 				;uses one byte to store it,
                    1700   1700 				;masking out bit 1-7 is to
                    1701   1701 				;ignore the useless bits.
                    1702   1702 				;This is done only when the
                    1703   1703 				;user is not modifying IFF.
                    1704   1704 				;If user is modifying IFF,
                    1705   1705 				;monitor will display whatever
                    1706   1706 				;he enters, even if bit 1-7
                    1707   1707 				;are not all zero.
                    1708   1708 				;A register is not changed
                    1709   1709 				;after doing this.
04CE  21 D2 FF      1710   1710 	LD	HL, USERIF
04D1  7E            1711   1711 	LD	A, (HL)
04D2  E6 01         1712   1712 	AND	00000001B
04D4  77            1713   1713 	LD	(HL), A
04D5  79            1714   1714 	LD	A, C
04D6  FE 0C         1715   1715 FLAGX	CP	0CH		;If STMINOR contains
                    1716   1716 				;the name of SZXH, XPNC,
                    1717   1717 				;SZXH' or XPNC', after
                    1718   1718 				;rotating right one bit
                    1719   1719 				;it will be greater than
                    1720   1720 				;or equal to 0CH.
                    1721   1721 				;Decode user's flag if it
                    1722   1722 				;is not being modified now,
                    1723   1723 				;encode it otherwise.
04D8  30 1F         1724   1724 	JR	NC, FCONV2
04DA  3A BC FF      1725   1725 FCONV1	LD	A, (USERAF)	;Get user's F register
04DD  CD 18 05      1726   1726 	CALL	DECODE		;Decode upper 4 bits.
04E0  22 D4 FF      1727   1727 	LD	(FLAGH), HL
04E3  CD 18 05      1728   1728 	CALL	DECODE		;Decode lower 4 bits.
04E6  22 D6 FF      1729   1729 	LD	(FLAGL), HL
04E9  3A C4 FF      1730   1730 	LD	A, (UAFP)	;Get user's F' register.
04EC  CD 18 05      1731   1731 	CALL	DECODE
04EF  22 D8 FF      1732   1732 	LD	(FLAGHP), HL
04F2  CD 18 05      1733   1733 	CALL	DECODE
04F5  22 DA FF      1734   1734 	LD	(FLAGLP), HL
04F8  C9            1735   1735 	RET
04F9  2A D4 FF      1736   1736 FCONV2	LD	HL, (FLAGH)	;Get the binary form
                    1737   1737 				;of 4 upper bits of
                    1738   1738 				;user's F register.
04FC  CD 23 05      1739   1739 	CALL	ENCODE		;Encode it.
04FF  2A D6 FF      1740   1740 	LD	HL, (FLAGL)	;Encode 4 lower bits.
0502  CD 23 05      1741   1741 	CALL	ENCODE
0505  32 BC FF      1742   1742 	LD	(USERAF), A	;Save the encoded
                    1743   1743 				;result into USERAF.
0508  2A D8 FF      1744   1744 	LD	HL, (FLAGHP)	;Encode F' register.
050B  CD 23 05      1745   1745 	CALL	ENCODE
050E  2A DA FF      1746   1746 	LD	HL, (FLAGLP)
0511  CD 23 05      1747   1747 	CALL	ENCODE
0514  32 C4 FF      1748   1748 	LD	(UAFP), A
0517  C9            1749   1749 	RET
                    1750   1750 ;
                    1751   1751 DECODE:
                    1752   1752 ; Decode bit 7-4 of A register.
                    1753   1753 ; Each bit is extended to 4 bits.
                    1754   1754 ; 0 becomes 0000, 1 becomes 0001.
                    1755   1755 ; The output is stored in HL, which
                    1756   1756 ; is 16 bits in length.  Also, after
                    1757   1757 ; execution, bits 7-4 of A register are
                    1758   1758 ; bits 3-0 of A before execution.
                    1759   1759 ; Registers destroyed: AF, B, HL
                    1760   1760 
0518  06 04         1761   1761 	LD	B, 4		;Loop 4 times
051A  29            1762   1762 DRL4	ADD	HL, HL		;Clear rightmost 3
                    1763   1763 				;bits of HL.
051B  29            1764   1764 	ADD	HL, HL
051C  29            1765   1765 	ADD	HL, HL
051D  07            1766   1766 	RLCA
051E  ED 6A         1767   1767 	ADC	HL, HL		;The 4th bit of HL
                    1768   1768 				;is determined by carry
                    1769   1769 				;flag, which is the MSB
                    1770   1770 				;of A register.
0520  10 F8         1771   1771 	DJNZ	DRL4
0522  C9            1772   1772 	RET
                    1773   1773 ;
                    1774   1774 ENCODE:
                    1775   1775 ; Encode HL register.  Each 4 bits of HL
                    1776   1776 ; are encoded to 1 bit. 0000 become 0,
                    1777   1777 ; 0001 become 1.  The result is stored
                    1778   1778 ; in bit 3-0 of A register.  Also, after
                    1779   1779 ; execution, bit 7-4 of A are bit 3-0
                    1780   1780 ; before execution.
                    1781   1781 ; Registers AF, B, HL are destroyed.
                    1782   1782 
0523  06 04         1783   1783 	LD	B, 4		;Loop 4 times.
0525  29            1784   1784 ERL4	ADD	HL, HL		;Shift HL left 4 bits.
                    1785   1785 				;Bit 12 of HL will be
                    1786   1786 				;shifted into carry flag.
0526  29            1787   1787 	ADD	HL, HL
0527  29            1788   1788 	ADD	HL, HL
0528  29            1789   1789 	ADD	HL, HL
0529  17            1790   1790 	RLA			;Rotate carry flag into
                    1791   1791 				;A register.
052A  10 F9         1792   1792 	DJNZ	ERL4
052C  C9            1793   1793 	RET
                    1794   1794 ;
                    1795   1795 ;***********************************************************
                    1796   1796 SUM1:
                    1797   1797 ; Calculate the sum of the data in a memory
                    1798   1798 ; block.  The starting and ending address
                    1799   1799 ; of this block are stored in STEPBF+2 - STEPBF+4
                    1800   1800 ;   Registers AF, BC, DE, HL are destroyed.
                    1801   1801 
052D  CD 3A 05      1802   1802 	CALL	GETPTR		;Get parameters from
                    1803   1803 				;step buffer.
0530  D8            1804   1804 	RET	C		;Return if the parameters
                    1805   1805 				;are illegal.
                    1806   1806 SUM:
                    1807   1807 ; Calculate the sum of a memory block.
                    1808   1808 ; HL contains the starting address of
                    1809   1809 ; this block, BC contains the length.
                    1810   1810 ; The result is stored in A.  Registers
                    1811   1811 ; AF, BC, HL are destroyed.
                    1812   1812 
0531  AF            1813   1813 	XOR	A		;Clear A
0532  86            1814   1814 SUMCAL	ADD	A, (HL)		;Add
0533  ED A1         1815   1815 	CPI
0535  EA 32 05      1816   1816 	JP	PE, SUMCAL
0538  B7            1817   1817 	OR	A		;Clear flags.
0539  C9            1818   1818 	RET
                    1819   1819 ;
                    1820   1820 GETPTR:
                    1821   1821 ; Get parameters from step buffer.
                    1822   1822 ; Input:  (STEPBF+2) and (STEPBF+3) contain
                    1823   1823 ;         starting address.
                    1824   1824 ;         (STEPBF+4) and (STEPBF+5) contain
                    1825   1825 ;         ending address.
                    1826   1826 ; Output: HL register contains the starting
                    1827   1827 ;         address.
                    1828   1828 ;         BC register contains the length.
                    1829   1829 ;         Carry flag 0 -- BC positive
                    1830   1830 ;                    1 -- BC negative
                    1831   1831 ; Destroyed registers: AF, BC, DE, HL.
                    1832   1832 
053A  21 B1 FF      1833   1833 	LD	HL, STEPBF+2
053D  5E            1834   1834 GETP	LD	E, (HL)		;Load starting address
                    1835   1835 				;into DE.
053E  23            1836   1836 	INC	HL
053F  56            1837   1837 	LD	D, (HL)
0540  23            1838   1838 	INC	HL
0541  4E            1839   1839 	LD	C, (HL)
0542  23            1840   1840 	INC	HL		;Load ending address
                    1841   1841 				;into HL.
0543  66            1842   1842 	LD	H, (HL)
0544  69            1843   1843 	LD	L, C
0545  B7            1844   1844 	OR	A		;Clear carry flag.
0546  ED 52         1845   1845 	SBC	HL, DE		;Find difference.
                    1846   1846 				;Carry flag is changed here.
0548  4D            1847   1847 	LD	C, L
0549  44            1848   1848 	LD	B, H
054A  03            1849   1849 	INC 	BC		;Now BC contains the
                    1850   1850 				;length.
054B  EB            1851   1851 	EX	DE, HL		;Now HL contains the
                    1852   1852 				;starting address.
054C  C9            1853   1853 	RET
                    1854   1854 ;
                    1855   1855 TAPEIN:
                    1856   1856 ; Load a memory block from tape.
                    1857   1857 ; Input: HL -- starting address of the block
                    1858   1858 ;        BC -- length of the block
                    1859   1859 ; Output: Carry flag 1 -- reading error
                    1860   1860 ;                    0 -- no error
                    1861   1861 ; Destroyed registers: AF, BC, DE, HL, AF', BC', DE', HL'
                    1862   1862 
054D  AF            1863   1863 	XOR	A		;Clear carry flag.
                    1864   1864 				;At beginning, the reading is
                    1865   1865 				;no error.
054E  08            1866   1866 	EX	AF, AF'
054F  CD 5A 05      1867   1867 TLOOP	CALL	GETBYTE		;Read 1 byte from tape.
0552  73            1868   1868 	LD	(HL), E		;Store it into memory.
0553  ED A1         1869   1869 	CPI
0555  EA 4F 05      1870   1870 	JP	PE, TLOOP	;Loop until length
                    1871   1871 				;is zero.
0558  08            1872   1872 	EX	AF, AF'
0559  C9            1873   1873 	RET
                    1874   1874 ;
                    1875   1875 GETBYTE:
                    1876   1876 ; Read one byte from tape.
                    1877   1877 ; Output: E -- data read
                    1878   1878 ;         Carry of F' 1 -- reading error
                    1879   1879 ;                     0 -- no error
                    1880   1880 ; Destroy registers: AF, DE, AF', BC', DE', HL',
                    1881   1881 ;Byte format:
                    1882   1882 
                    1883   1883 ; start bit bit bit bit bit bit bit bit stop
                    1884   1884 ;  bit   0   1   2   3   4   5   6   7   bit
                    1885   1885 
055A  CD 6B 05      1886   1886 	CALL	GETBIT		;Get start bit.
055D  16 08         1887   1887 	LD	D, 8		;Loop 8 times
055F  CD 6B 05      1888   1888 BLOOP	CALL	GETBIT		;Get one data bit.
                    1889   1889 				;Result in carry flag.
0562  CB 1B         1890   1890 	RR	E		;Rotate it into E.
0564  15            1891   1891 	DEC	D
0565  20 F8         1892   1892 	JR	NZ, BLOOP
0567  CD 6B 05      1893   1893 	CALL	GETBIT		;Get stop bit.
056A  C9            1894   1894 	RET
                    1895   1895 ;
                    1896   1896 ;
                    1897   1897 GETBIT:
                    1898   1898 ; Read one bit from tape.
                    1899   1899 ; Output: Carry of F:  0 -- this bit is 0
                    1900   1900 ;                      1 -- this bit is 1
                    1901   1901 ;         Carry of F': 1 -- reading error
                    1902   1902 ;                      0 -- no error
                    1903   1903 ; Destroyed registers: AF, AF', BC', DE', HL'
                    1904   1904 ; Bit format:
                    1905   1905 
                    1906   1906 ;   0 -- 2 kHz 8 cycles + 1kHz 2 cycles.
                    1907   1907 ;   1 -- 2 kHz 4 cycles + 1kHz 4 cycles.
                    1908   1908 
056B  D9            1909   1909 	EXX			;Save HL, BC, DE registers
                    1910   1910 
                    1911   1911 ; The tape-bit format of both 0 and 1 are
                    1912   1912 ; the same form: a high freq part followed by a
                    1913   1913 ; low freq part. The difference between 0 and 1
                    1914   1914 ; is the number of high freq cycles and low freq
                    1915   1915 ; cycles.  Thus, a high freq period may have
                    1916   1916 ; two meanings:
                    1917   1917 ;  i) It is used to count the number of high
                    1918   1918 ;     freq cycles of the current tape-bit;
                    1919   1919 ; ii) If a high freq period is detected
                    1920   1920 ;     immediately after a low freq period, then
                    1921   1921 ;     this period is the first cycle of next
                    1922   1922 ;     tape-bit and is used as a terminator of the
                    1923   1923 ;     last tape-bit.
                    1924   1924 
                    1925   1925 ; Bit 0 of H register is used to indicate the usage
                    1926   1926 ; of a high freq period.  If this bit is zero, high
                    1927   1927 ; freq period causes counter increment for the current
                    1928   1928 ; tape-bit.  If the high freq part has passed, bit 0
                    1929   1929 ; of H is set and the next high freq period will be used
                    1930   1930 ; as a terminator.
                    1931   1931 ; L register is used to up/down count the number of periods.
                    1932   1932 ; when a high freq period is read, L is increased by
                    1933   1933 ; 1; when a low freq period is read, L is decreased
                    1934   1934 ; by 2. (The time duration for each count is 0.5 ms.)
                    1935   1935 ; At the end of a tape-bit, positive and negative L
                    1936   1936 ; stand for 0 and 1 respectively.
                    1937   1937 
056C  21 00 00      1938   1938 	LD	HL, 0		;Clear bit 0 of H,
                    1939   1939 				;Set L to 0.
056F  CD 8C 05      1940   1940 COUNT	CALL	PERIOD		;Read one period.
0572  14            1941   1941 	INC	D		;The next 2 instructions
                    1942   1942 				;check if D is zero.  Carry
                    1943   1943 				;flag is not affected.
0573  15            1944   1944 	DEC	D
0574  20 11         1945   1945 	JR	NZ, TERR	;If D is not zero, jump
                    1946   1946 				;to error routine TERR.
                    1947   1947 				;(Because the period is too
                    1948   1948 				;much longer than that of 1 kHz.)
0576  38 06         1949   1949 	JR	C, SHORTP	;If the period is short
                    1950   1950 				;(2 kHz), jump to SHORTP.
0578  2D            1951   1951 	DEC	L		;The period is 1 kHz,
                    1952   1952 				;decrease L by 2.  And set
                    1953   1953 				;bit 0 of H to indicate this
                    1954   1954 				;tape-bit has passed high freq
                    1955   1955 				;part and reaches its low freq part.
0579  2D            1956   1956 	DEC	L
057A  CB C4         1957   1957 	SET	0, H
057C  18 F1         1958   1958 	JR	COUNT
057E  2C            1959   1959 SHORTP	INC	L		;The period is 2 kHz,
                    1960   1960 				;increase L by 1.
057F  CB 44         1961   1961 	BIT	0, H		;If the tape-bit has passed
                    1962   1962 				;its high freq part, high frequency
                    1963   1963 				;means this bit is all over and
                    1964   1964 				;next bit has started.
0581  28 EC         1965   1965 	JR	Z, COUNT
                    1966   1966 				;L = (# of 2kHz periods) - 
                    1967   1967 				;    2*(# of 1kHz periods)
0583  CB 15         1968   1968 	RL	L
                    1969   1969 				; 0 --- NCarry (L positive)
                    1970   1970 				; 1 ---  Carry (L negative)
                    1971   1971 				;The positive or negative sign of
                    1972   1972 				;L corresponds to the tape-bit data.
                    1973   1973 				;'RL  L' will shift the sign bit of
                    1974   1974 				;L into carry flag.  After this
                    1975   1975 				;instruction, the carry flag
                    1976   1976 				;contains the tape-bit.
0585  D9            1977   1977 	EXX			;Restore BC', DE', HL'
0586  C9            1978   1978 	RET
0587  08            1979   1979 TERR	EX	AF, AF'
0588  37            1980   1980 	SCF			;Set carry flag of F' to indicate error.
0589  08            1981   1981 	EX	AF, AF'
058A  D9            1982   1982 	EXX
058B  C9            1983   1983 	RET
                    1984   1984 ;
                    1985   1985 PERIOD:
                    1986   1986 ; Wait the tape to pass one period.
                    1987   1987 ; The time duration is stored in DE.  The
                    1988   1988 ; unit is loop count.  Typical value for
                    1989   1989 ; 2kHz is 28, for 1 kHz is 56.
                    1990   1990 ; Use (56+28)/2 as threshold.  The returned
                    1991   1991 ; result is in carry flag. (1 kHz -- NC, 2 kHz -- C)
                    1992   1992 ; Registers destroyed: AF, DE
                    1993   1993 
058C  11 00 00      1994   1994 	LD	DE, 0
058F  DB 00         1995   1995 LOOPH	IN	A, (KIN)	;Bit 7 of port A is Tapein.
0591  13            1996   1996 	INC	DE
0592  17            1997   1997 	RLA
0593  38 FA         1998   1998 	JR	C, LOOPH	;Loop until input goes low.
0595  3E FF         1999   1999 	LD	A, 11111111B	;Echo the tape input to
                    2000   2000 				;speaker.
0597  D3 02         2001   2001 	OUT	(DIGIT), A
0599  DB 00         2002   2002 LOOPL	IN	A, (KIN)
059B  13            2003   2003 	INC	DE
059C  17            2004   2004 	RLA
059D  30 FA         2005   2005 	JR	NC, LOOPL	;Loop until input goes high.
059F  3E 7F         2006   2006 	LD	A, 01111111B	;Echo the tape input to
                    2007   2007 				;speaker.
05A1  D3 02         2008   2008 	OUT	(DIGIT), A
05A3  7B            2009   2009 	LD	A, E		;Compare the result with
                    2010   2010 				;the threshold.
05A4  FE 2A         2011   2011 	CP	MPERIOD
05A6  C9            2012   2012 	RET
                    2013   2013 ;
                    2014   2014 ;***********************************************************
                    2015   2015 TAPEOUT:
                    2016   2016 ; Output a memory block to tape.
                    2017   2017 ; Input: HL -- starting address of the block
                    2018   2018 ;        BC -- length of the block
                    2019   2019 ; Destroyed registers: AF, BC, DE, HL, BC', DE', HL'
                    2020   2020 
05A7  5E            2021   2021 	LD	E, (HL)		;Get the data.
05A8  CD B1 05      2022   2022 	CALL	OUTBYTE		;Output to tape.
05AB  ED A1         2023   2023 	CPI
05AD  EA A7 05      2024   2024 	JP	PE, TAPEOUT	; Loop until finished.
05B0  C9            2025   2025 	RET
                    2026   2026 ;
                    2027   2027 OUTBYTE:
                    2028   2028 ; Output one byte to tape.  For tape-byte
                    2029   2029 ; format, see coments on GETBYTE.
                    2030   2030 ; Input: E -- data
                    2031   2031 ; Destroyed registers: AF, DE, BC', DE', HL'
                    2032   2032 
05B1  16 08         2033   2033 	LD	D, 8		;Loop 8 times
05B3  B7            2034   2034 	OR	A		;Clear carry flag.
05B4  CD C4 05      2035   2035 	CALL	OUTBIT		;Output start bit.
05B7  CB 1B         2036   2036 OLOOP	RR	E		;Rotate data into carry
05B9  CD C4 05      2037   2037 	CALL	OUTBIT		;Output the carry
05BC  15            2038   2038 	DEC	D
05BD  20 F8         2039   2039 	JR	NZ, OLOOP
05BF  37            2040   2040 	SCF			;Set carry flag.
05C0  CD C4 05      2041   2041 	CALL	OUTBIT		;Output stop bit
05C3  C9            2042   2042 	RET
                    2043   2043 ;
                    2044   2044 OUTBIT:
                    2045   2045 ; Output one bit to tape.
                    2046   2046 ; Input: data in carry flag.
                    2047   2047 ; Destroyed registers: AF, BC', DE', HL'
05C4  D9            2048   2048 	EXX			;Save BC, DE, HL.
05C5  26 00         2049   2049 	LD	H, 0
05C7  38 09         2050   2050 	JR	C, OUT1		;If data=1, output 1.
                    2051   2051 OUT0:				;2kHz 8 cycles, 1kHz 2 cycles.
05C9  2E 08         2052   2052 	LD	L, ZERO_2K
05CB  CD E2 05      2053   2053 	CALL	TONE2K
05CE  2E 02         2054   2054 	LD	L, ZERO_1K
05D0  18 07         2055   2055 	JR	BITEND
                    2056   2056 ;
                    2057   2057 OUT1:				;2kHz 4 cycles, 1kHz 4 cycles.
05D2  2E 04         2058   2058 	LD	L, ONE_2K
05D4  CD E2 05      2059   2059 	CALL	TONE2K
05D7  2E 04         2060   2060 	LD	L, ONE_1K
05D9  CD DE 05      2061   2061 BITEND	CALL	TONE1K
05DC  D9            2062   2062 	EXX			;Restore registers.
05DD  C9            2063   2063 	RET
                    2064   2064 ;
                    2065   2065 ;***********************************************************
                    2066   2066 ;
                    2067   2067 ;        UTILITY SUBROUTINES
                    2068   2068 ;
                    2069   2069 ;***********************************************************
                    2070   2070 ;
                    2071   2071 ; Function: Generate square wave to the MIC & speaker
                    2072   2072 ;           on 'HELLO '
                    2073   2073 ; Input:    C -- period = 2*(44+13*C) clock states.
                    2074   2074 ;          HL -- number of periods.
                    2075   2075 ; Output:  none.
                    2076   2076 ; Destroyed registers: AF, B, DE, HL.
                    2077   2077 ; Call: none
                    2078   2078 
                    2079   2079 TONE1K:
05DE  0E 41         2080   2080 	LD	C, F1KHZ
05E0  18 02         2081   2081 	JR	TONE
                    2082   2082 TONE2K:
05E2  0E 1F         2083   2083 	LD	C, F2KHZ
                    2084   2084 TONE:				;Half period: 44+13*C states
05E4  29            2085   2085 	ADD	HL, HL		;Double for half-cycle count
05E5  11 01 00      2086   2086 	LD	DE, 1
05E8  3E FF         2087   2087 	LD	A, 0FFH
05EA  D3 02         2088   2088 SQWAVE	OUT	(DIGIT), A	;Bit-7 tapeout
05EC  41            2089   2089 	LD	B, C
05ED  10 FE         2090   2090 	DJNZ	$		;Half period delay
05EF  EE 80         2091   2091 	XOR	80H		;Toggle output
05F1  ED 52         2092   2092 	SBC	HL, DE		;Decrement one count
05F3  20 F5         2093   2093 	JR	NZ, SQWAVE
05F5  C9            2094   2094 	RET
                    2095   2095 ;
                    2096   2096 ;***********************************************************
                    2097   2097 ; Function: check if a memory address is in RAM.
                    2098   2098 ; Input: HL -- address to be checked.
                    2099   2099 ; Output: Zero flag -- 0, ROM or nonexistant;
                    2100   2100 ;                      1, RAM.
                    2101   2101 ; Destroyed registers: AF
                    2102   2102 ; Call: none
                    2103   2103 
                    2104   2104 RAMCHK:
05F6  7E            2105   2105 	LD	A, (HL)
05F7  2F            2106   2106 	CPL
05F8  77            2107   2107 	LD	(HL), A
05F9  7E            2108   2108 	LD	A, (HL)
05FA  2F            2109   2109 	CPL
05FB  77            2110   2110 	LD	(HL), A
05FC  BE            2111   2111 	CP	(HL)
05FD  C9            2112   2112 	RET
                    2113   2113 ;
                    2114   2114 ;***********************************************************
                    2115   2115 ; Function: Scan the keyboard and display.  Loop until
                    2116   2116 ;           a key is detected.  If the key is already
                    2117   2117 ;           pressed when this routien starts execution,
                    2118   2118 ;           return when next key is entered.
                    2119   2119 ; Input:    IX points to the buffer containing the display
                    2120   2120 ;           patterns.  6 LEDs require 6 byte data.
                    2121   2121 ;           (IX) contains the pattern for rightmost LED,
                    2122   2122 ;           (IX+5) contains the pattern for leftmost LED.
                    2123   2123 ; Output:   A = internal code of the key pressed.
                    2124   2124 ; Destroyed registers: AF, B, HL, AF', BC', DE'.
                    2125   2125 ;                      All other registers except IY are
                    2126   2126 ;                      also changed during execution, but
                    2127   2127 ;                      they are restored before return.
                    2128   2128 ; Call: SCAN1
                    2129   2129 
                    2130   2130 SCAN:
05FE  DD E5         2131   2131 	PUSH	IX		;Save IX.
0600  21 E6 FF      2132   2132 	LD	HL, TEST
0603  CB 7E         2133   2133 	BIT	7, (HL)		;This bit is set if the user
                    2134   2134 				;has entered illegal key.  The
                    2135   2135 				;display will be disables as
                    2136   2136 				;a warning to the user.  This
                    2137   2137 				;is done by replacing the display
                    2138   2138 				;buffer pointer IX by BLANK.
0605  28 04         2139   2139 	JR	Z, SCPRE
0607  DD 21 A5 07   2140   2140 	LD	IX, BLANK
                    2141   2141 
                    2142   2142 ; Wait until all keys are released for 40 ms.
                    2143   2143 ; (The execution time of SCAN1 is 10 ms,
                    2144   2144 ; 40 = 10 * 4.)
                    2145   2145 
060B  06 04         2146   2146 SCPRE	LD	B, 4
060D  CD 24 06      2147   2147 SCNX	CALL	SCAN1
0610  30 F9         2148   2148 	JR	NC, SCPRE	;If any key is pressed re-load
                    2149   2149 				;the debounce counter B by 4.
0612  10 F9         2150   2150 	DJNZ	SCNX
0614  CB BE         2151   2151 	RES	7, (HL)		;Clear error-flag.
0616  DD E1         2152   2152 	POP	IX		;Restore original IX.
                    2153   2153 
                    2154   2154 ; Loop until any key is pressed.
                    2155   2155 
0618  CD 24 06      2156   2156 SCLOOP	CALL	SCAN1
061B  38 FB         2157   2157 	JR	C, SCLOOP
                    2158   2158 
                    2159   2159 ; Convert the key-position-code returned by SCAN1 to
                    2160   2160 ; key-internal-code.  This is done by table-lookup.
                    2161   2161 ; The table used is KEYTAB.
                    2162   2162 
061D  21 7B 07      2163   2163 KEYMAP	LD	HL, KEYTAB
0620  85            2164   2164 	ADD	A, L
0621  6F            2165   2165 	LD	L, A
0622  7E            2166   2166 	LD	A, (HL)
0623  C9            2167   2167 	RET
                    2168   2168 ;
                    2169   2169 ;***********************************************************
                    2170   2170 ; Function: Scan keyboard and display one cycle.
                    2171   2171 ;           Total execution time is about 10 ms (exactly
                    2172   2172 ;           9.95 ms, 17812 clock states @ 1.79 MHz).
                    2173   2173 ; Input: Same as SCAN.
                    2174   2174 ; Output:  i) no key during one scan
                    2175   2175 ;                  Carry flag -- 1
                    2176   2176 ;         ii) key pressed during one scan
                    2177   2177 ;                  Carry flag -- 0,
                    2178   2178 ;                  A -- position code of the key pressed.
                    2179   2179 ;                  If more than one key is pressed, A
                    2180   2180 ;                  contains the largest position-code.
                    2181   2181 ;                  (This key is the last key scanned.)
                    2182   2182 ; Destroyed registers: AF, AF', BC', DE' (see SCAN comments)
                    2183   2183 ; CALL: none.
                    2184   2184 
                    2185   2185 SCAN1:
                    2186   2186 ;In hardware, the display and keyboard are
                    2187   2187 ;arranged as a 6 by 6 matrix.  Each column
                    2188   2188 ;corresponds to one LED and six key buttons.
                    2189   2189 ;In normal operation, at most one column is
                    2190   2190 ;active.  The pattern of the active LED is the
                    2191   2191 ;data output on port C of 8255.  The data input
                    2192   2192 ;from bit 0-5 of port A are the status of key
                    2193   2193 ;buttons in the active column.  All signals on
                    2194   2194 ;I/O port are active low.
                    2195   2195 
0624  37            2196   2196 	SCF			;Set carry flag.
0625  08            2197   2197 	EX	AF, AF'
0626  D9            2198   2198 	EXX
                    2199   2199 
                    2200   2200 ;Carry flag of F' is used to return the status of
                    2201   2201 ;the keyboard.  If any key is pressed during one
                    2202   2202 ;scan, the flag is reset; otherwise it is set.
                    2203   2203 ;Initially, this flag is set.  A' register is used
                    2204   2204 ;to store the position-code of the key pressed.
                    2205   2205 ;In this routine, 36 key positions are checked one
                    2206   2206 ;by one.  C register contains the code of the key
                    2207   2207 ;being checked.  The value of C is 0 at the beginning
                    2208   2208 ;and is increased by 1 after each check.  So the code
                    2209   2209 ;ranges from 0 to 23H (total 36 positions).  On each
                    2210   2210 ;check, if the input bit is 0 (key pressed), C register
                    2211   2211 ;is copied into A'.  The carry flag of F' is set also.
                    2212   2212 ;When some key is detected, the key positions after
                    2213   2213 ;this key will still be checked.  So if more than
                    2214   2214 ;one key are pressed during one scan, the code of the
                    2215   2215 ;last one will be returned.
                    2216   2216 
0627  0E 00         2217   2217 	LD	C, 0		;Initial position code
0629  1E C1         2218   2218 	LD	E, 11000001B	;Scan from rightmost digit
062B  26 06         2219   2219 	LD	H, 6
                    2220   2220 				;to the active column.
062D  7B            2221   2221 KCOL	LD	A, E
062E  D3 02         2222   2222 	OUT	(DIGIT), A	;Activate one column.
0630  DD 7E 00      2223   2223 	LD	A, (IX+0)
0633  D3 01         2224   2224 	OUT	(SEG7), A
0635  06 C9         2225   2225 	LD	B, COLDEL
0637  10 FE         2226   2226 	DJNZ	$		;Delay 1.5 ms per digit.
0639  AF            2227   2227 	XOR	A		;Deactivate all display segments
063A  D3 01         2228   2228 	OUT	(SEG7), A
063C  7B            2229   2229 	LD	A, E
063D  2F            2230   2230 	CPL
063E  F6 C0         2231   2231 	OR	11000000B
0640  D3 02         2232   2232 	OUT	(DIGIT), A
0642  06 06         2233   2233 	LD	B, 6		;Each column has 6 keys.
0644  DB 00         2234   2234 	IN	A, (KIN)	;Now, bit 0-5 of A contain
                    2235   2235 				;the status of the 6 keys
                    2236   2236 				;in the active column.
0646  57            2237   2237 	LD	D, A		;Store A into D.
0647  CB 1A         2238   2238 KROW	RR	D		;Rotate D 1 bit right, bit 0
                    2239   2239 				;of D will be rotated into
                    2240   2240 				;carry flag.
0649  38 02         2241   2241 	JR	C, NOKEY	;Skip next 2 instructions
                    2242   2242 				;if the key is not pressed.
                    2243   2243 				;The next 2 instructions
                    2244   2244 				;store the current position-code
                    2245   2245 				;into A' and reset carry flag
                    2246   2246 				;of F' register.
064B  79            2247   2247 	LD	A, C		;Key-in, get key position.
064C  08            2248   2248 	EX	AF, AF'		;Save A & Carry in AF'.
064D  0C            2249   2249 NOKEY	INC	C		;Increase current key-code by 1.
064E  10 F7         2250   2250 	DJNZ	KROW		;Loop until 6 keys in the
                    2251   2251 				;active columns are checked.
0650  DD 23         2252   2252 	INC	IX
0652  7B            2253   2253 	LD	A, E
0653  E6 3F         2254   2254 	AND	00111111B
0655  CB 07         2255   2255 	RLC	A
0657  F6 C0         2256   2256 	OR	11000000B
0659  5F            2257   2257 	LD	E, A
065A  25            2258   2258 	DEC	H
065B  20 D0         2259   2259 	JR	NZ, KCOL
065D  11 FA FF      2260   2260 	LD	DE, -6
0660  DD 19         2261   2261 	ADD	IX, DE		;Get original IX.
0662  D9            2262   2262 	EXX
0663  08            2263   2263 	EX	AF, AF'
0664  C9            2264   2264 	RET
                    2265   2265 ;
                    2266   2266 ;***********************************************************
                    2267   2267 ; Function: Convert the 2 byte data stored in DE to
                    2268   2268 ;           7-segment display format.  The output is stored
                    2269   2269 ;           in the address field of DISPBF (display buffer),
                    2270   2270 ;           most significant digit in DISPBF+5.
                    2271   2271 ;           This routine is usually used by monitor only.
                    2272   2272 ; Destroyed registers: AF, HL.
                    2273   2273 ; Call: HEX7SG
                    2274   2274 
                    2275   2275 ADDRDP:
0665  21 B8 FF      2276   2276 	LD	HL, DISPBF+2
0668  7B            2277   2277 	LD	A, E
0669  CD 78 06      2278   2278 	CALL	HEX7SG
066C  7A            2279   2279 	LD	A, D
066D  CD 78 06      2280   2280 	CALL	HEX7SG
0670  C9            2281   2281 	RET
                    2282   2282 ;
                    2283   2283 ;***********************************************************
                    2284   2284 ; Function: Convert the data stored in A to 7-segment
                    2285   2285 ;           display format.  1 byte is converted to 2
                    2286   2286 ;           digits.  The result is stored in the data
                    2287   2287 ;           field of display buffer (DISPBF).
                    2288   2288 ;           This routine is usually used by monitor only.
                    2289   2289 ; Destroyed registers: AF, HL.
                    2290   2290 ; Call: HEX7SG
                    2291   2291 
                    2292   2292 DATADP:
0671  21 B6 FF      2293   2293 	LD	HL, DISPBF
0674  CD 78 06      2294   2294 	CALL	HEX7SG
0677  C9            2295   2295 	RET
                    2296   2296 ;
                    2297   2297 ;***********************************************************
                    2298   2298 ; Function: Convert binary data to 7-segment display
                    2299   2299 ;           format.
                    2300   2300 ; Input: 1 byte in A register
                    2301   2301 ;        HL points to the result buffer.
                    2302   2302 ; Output: Pattern for 2 digits.  Low order digit in (HL),
                    2303   2303 ;         high order digit in (HL+1).
                    2304   2304 ;         HL becomes HL+2.
                    2305   2305 ; Destroyed registers: AF, HL.
                    2306   2306 ; Call: HEX7
                    2307   2307 
                    2308   2308 HEX7SG:
0678  F5            2309   2309 	PUSH	AF
0679  CD 89 06      2310   2310 	CALL	HEX7
067C  77            2311   2311 	LD	(HL), A
067D  23            2312   2312 	INC	HL
067E  F1            2313   2313 	POP	AF
067F  0F            2314   2314 	RRCA
0680  0F            2315   2315 	RRCA
0681  0F            2316   2316 	RRCA
0682  0F            2317   2317 	RRCA
0683  CD 89 06      2318   2318 	CALL	HEX7
0686  77            2319   2319 	LD	(HL), A
0687  23            2320   2320 	INC	HL
0688  C9            2321   2321 	RET
                    2322   2322 ;
                    2323   2323 ;***********************************************************
                    2324   2324 ; Function: Convert binary data to 7-segment display
                    2325   2325 ;           format.
                    2326   2326 ; Input:  A -- LSB 4 bits contains the binary data
                    2327   2327 ; Output: A -- display pattern for 1 digit.
                    2328   2328 ; Destroyed registers: AF
                    2329   2329 ; Call: none
                    2330   2330 
                    2331   2331 HEX7:
0689  E5            2332   2332 	PUSH	HL
068A  21 F0 07      2333   2333 	LD	HL, SEGTAB
068D  E6 0F         2334   2334 	AND	0FH
068F  85            2335   2335 	ADD	A, L
0690  6F            2336   2336 	LD	L, A
0691  7E            2337   2337 	LD	A, (HL)
0692  E1            2338   2338 	POP	HL
0693  C9            2339   2339 	RET
                    2340   2340 ;
                    2341   2341 ;
                    2342   2342 ;***********************************************************
                    2343   2343 ; Function: RAM 8000-FFFF self-check.
                    2344   2344 ; Input: none
                    2345   2345 ; Output: none
                    2346   2346 ; Destroyed registers: AF, BC, HL
                    2347   2347 ; Call: RAMCHK
                    2348   2348 
                    2349   2349 RAMTEST:
0694  21 00 80      2350   2350 	LD	HL, 8000H
0697  01 00 80      2351   2351 	LD	BC, 8000H
069A  CD F6 05      2352   2352 RAMT	CALL	RAMCHK
069D  28 01         2353   2353 	JR	Z, TNEXT
069F  76            2354   2354 	HALT			;If error
06A0  ED A1         2355   2355 TNEXT	CPI
06A2  EA 9A 06      2356   2356 	JP	PE, RAMT
06A5  C7            2357   2357 	RST	00H		;Display 'HELLO '.
                    2358   2358 ;
                    2359   2359 ;***********************************************************
                    2360   2360 ;Monitor ROM self-check.  Add the data of address
                    2361   2361 ;0000 - 0800.  If the sum equals to 0, reset the monitor
                    2362   2362 ;and display 'HELLO '.  If the sum is not 0, which
                    2363   2363 ;indicates error, HALT. Summed by adding without carry.
                    2364   2364 ;Input: none.
                    2365   2365 ;Output: none.
                    2366   2366 ;Destroyed registers: AF, BC, HL.
                    2367   2367 ;Call: SUM.
                    2368   2368 
                    2369   2369 ROMTEST:
06A6  21 00 00      2370   2370 	LD	HL, 0
06A9  01 00 08      2371   2371 	LD	BC, 0800H
06AC  CD 31 05      2372   2372 	CALL	SUM
06AF  28 01         2373   2373 	JR	Z, SUMOK
06B1  00            2374   2374 	NOP
                    2375   2375 ;	HALT			;If error. XXX - Calculate checksum.
06B2  C7            2376   2376 SUMOK	RST	00H		;Display 'HELLO '.
06B3  32 E5 FF      2377   2377 INI3	LD	(POWERUP), A	;Load power-code into (POWERUP).
                    2378   2378 				;The monitor uses the location to decide
                    2379   2379 				;wether a reset signal is on power-up.
06B6  3E 55         2380   2380 	LD	A, 55H
06B8  32 F0 FF      2381   2381 	LD	(BEEPSET), A
06BB  3E 44         2382   2382 	LD	A, 44H
06BD  32 F1 FF      2383   2383 	LD	(FBEEP), A	;Beep frequency when key is pressed.
06C0  21 F2 FF      2384   2384 	LD	HL, TBEEP
06C3  36 2F         2385   2385 	LD	(HL), 2FH	;Time duration of beep when
06C5  23            2386   2386 	INC	HL		;key is pressed.
06C6  36 00         2387   2387 	LD	(HL), 0
06C8  C3 D8 03      2388   2388 	JP	INI4
                    2389   2389 
06CB  F5            2390   2390 BEEP	PUSH	AF
06CC  21 F1 FF      2391   2391 	LD	HL, FBEEP
06CF  4E            2392   2392 	LD	C, (HL)
06D0  2A F2 FF      2393   2393 	LD	HL, (TBEEP)
06D3  3A F0 FF      2394   2394 	LD	A, (BEEPSET)
06D6  FE 55         2395   2395 	CP	55H
06D8  20 03         2396   2396 	JR	NZ, NOTONE	;There's no beep sound when the key is
                    2397   2397 				;pressed if data of (BEEPSET) is not 55H.
06DA  CD E4 05      2398   2398 	CALL	TONE
                    2399   2399 NOTONE:
06DD  F1            2400   2400 	POP	AF
06DE  C3 E9 00      2401   2401 	JP	KEYEXEC		;After a key is detected, determine
                    2402   2402 				;what action should the monitor take.
                    2403   2403 				;KEYEXEC uses the next 3 fators
                    2404   2404 				;to get the entry point of proper
                    2405   2405 				;service routine: key-code, STATE
                    2406   2406 				;and STMINOR (Minor-State).
                    2407   2407 ; Below are the branch tables for each key and
                    2408   2408 ; state.  The first entry of each table is
                    2409   2409 ; a base address, other entrys are the offset to
                    2410   2410 ; this address.  Offset is only one byte long,
                    2411   2411 ; which is much shorter than the 2-byte address.
                    2412   2412 ; This can save the monitor code space.
                    2413   2413 
                    2414   2414 	ORG	0737H
                    2415   2415 KSUBFUN
0737  1B 01         2416   2416 	DEFW	KINC
0739  00            2417   2417 	DEFB	(-KINC)+KINC
073A  05            2418   2418 	DEFB	(-KINC)+KDEC
073B  0A            2419   2419 	DEFB	(-KINC)+KGO
073C  0F            2420   2420 	DEFB	(-KINC)+KSTEP
073D  1A            2421   2421 	DEFB	(-KINC)+KDATA
073E  2C            2422   2422 	DEFB	(-KINC)+KSBR
073F  42            2423   2423 	DEFB	(-KINC)+KINS
0740  7B            2424   2424 	DEFB	(-KINC)+KDEL
0741  C2 01         2425   2425 KFUN	DEFW	KPC
0743  00            2426   2426 	DEFB	(-KPC)+KPC
0744  1C            2427   2427 	DEFB	(-KPC)+KADDR
0745  0A            2428   2428 	DEFB	(-KPC)+KCBR
0746  14            2429   2429 	DEFB	(-KPC)+KREG
0747  20            2430   2430 	DEFB	(-KPC)+KMV
0748  20            2431   2431 	DEFB	(-KPC)+KRL
0749  26            2432   2432 	DEFB	(-KPC)+KWT
074A  26            2433   2433 	DEFB	(-KPC)+KRT
074B  EC 01         2434   2434 HTAB	DEFW	HFIX
074D  00            2435   2435 	DEFB	(-HFIX)+HFIX
074E  16            2436   2436 	DEFB	(-HFIX)+HAD
074F  03            2437   2437 	DEFB	(-HFIX)+HDA
0750  26            2438   2438 	DEFB	(-HFIX)+HRGFIX
0751  34            2439   2439 	DEFB	(-HFIX)+HMV
0752  34            2440   2440 	DEFB	(-HFIX)+HRL
0753  34            2441   2441 	DEFB	(-HFIX)+HWT
0754  34            2442   2442 	DEFB	(-HFIX)+HRT
0755  26            2443   2443 	DEFB	(-HFIX)+HRGAD
0756  44            2444   2444 	DEFB	(-HFIX)+HRGDA
0757  3D 02         2445   2445 ITAB	DEFW	IFIX
0759  00            2446   2446 	DEFB	(-IFIX)+IFIX
075A  03            2447   2447 	DEFB	(-IFIX)+IAD
075B  03            2448   2448 	DEFB	(-IFIX)+IDA
075C  00            2449   2449 	DEFB	(-IFIX)+IRGFIX
075D  0E            2450   2450 	DEFB	(-IFIX)+IMV
075E  0E            2451   2451 	DEFB	(-IFIX)+IRL
075F  0E            2452   2452 	DEFB	(-IFIX)+IWT
0760  0E            2453   2453 	DEFB	(-IFIX)+IRT
0761  1F            2454   2454 	DEFB	(-IFIX)+IRGAD
0762  1F            2455   2455 	DEFB	(-IFIX)+IRGDA
0763  6B 02         2456   2456 DTAB	DEFW	DFIX
0765  00            2457   2457 	DEFB	(-DFIX)+DFIX
0766  03            2458   2458 	DEFB	(-DFIX)+DAD
0767  03            2459   2459 	DEFB	(-DFIX)+DDA
0768  00            2460   2460 	DEFB	(-DFIX)+DRGFIX
0769  0E            2461   2461 	DEFB	(-DFIX)+DMV
076A  0E            2462   2462 	DEFB	(-DFIX)+DRL
076B  0E            2463   2463 	DEFB	(-DFIX)+DWT
076C  0E            2464   2464 	DEFB	(-DFIX)+DRT
076D  1F            2465   2465 	DEFB	(-DFIX)+DRGAD
076E  1F            2466   2466 	DEFB	(-DFIX)+DRGDA
076F  99 02         2467   2467 GTAB	DEFW	GFIX
0771  00            2468   2468 	DEFB	(-GFIX)+GFIX
0772  03            2469   2469 	DEFB	(-GFIX)+GAD
0773  03            2470   2470 	DEFB	(-GFIX)+GDA
0774  00            2471   2471 	DEFB	(-GFIX)+GRGFIX
0775  4B            2472   2472 	DEFB	(-GFIX)+GMV
0776  6D            2473   2473 	DEFB	(-GFIX)+GRL
0777  8B            2474   2474 	DEFB	(-GFIX)+GWT
0778  C1            2475   2475 	DEFB	(-GFIX)+GRT
0779  00            2476   2476 	DEFB	(-GFIX)+GRGAD
077A  00            2477   2477 	DEFB	(-GFIX)+GRGDA
                    2478   2478 
                    2479   2479 ; Key-posistion-code to key-internal-code conversion table.
                    2480   2480 
                    2481   2481 KEYTAB:
077B  03            2482   2482 K0	DEFB	03H	;HEX_3
077C  07            2483   2483 K1	DEFB	07H	;HEX_7
077D  0B            2484   2484 K2	DEFB	0BH	;HEX_B
077E  0F            2485   2485 K3	DEFB	0FH	;HEX_F
077F  20            2486   2486 K4	DEFB	20H	;NOT USED
0780  21            2487   2487 K5	DEFB	21H	;NOT USED
0781  02            2488   2488 K6	DEFB	02H	;HEX_2
0782  06            2489   2489 K7	DEFB	06H	;HEX_6
0783  0A            2490   2490 K8	DEFB	0AH	;HEX_A
0784  0E            2491   2491 K9	DEFB	0EH	;HEX_E
0785  22            2492   2492 K0A	DEFB	22H	;NOT USED
0786  23            2493   2493 K0B	DEFB	23H	;NOT USED
0787  01            2494   2494 K0C	DEFB	01H	;HEX_1
0788  05            2495   2495 K0D	DEFB	05H	;HEX_5
0789  09            2496   2496 K0E	DEFB	09H	;HEX_9
078A  0D            2497   2497 K0F	DEFB	0DH	;HEX_D
078B  13            2498   2498 K10	DEFB	13H	;STEP
078C  1F            2499   2499 K11	DEFB	1FH	;TAPERD
078D  00            2500   2500 K12	DEFB	00H	;HEX_0
078E  04            2501   2501 K13	DEFB	04H	;HEX_4
078F  08            2502   2502 K14	DEFB	08H	;HEX_8
0790  0C            2503   2503 K15	DEFB	0CH	;HEX_C
0791  12            2504   2504 K16	DEFB	12H	;GO
0792  1E            2505   2505 K17	DEFB	1EH	;TAPEWR
0793  1A            2506   2506 K18	DEFB	1AH	;CBR
0794  18            2507   2507 K19	DEFB	18H	;PC
0795  1B            2508   2508 K1A	DEFB	1BH	;REG
0796  19            2509   2509 K1B	DEFB	19H	;ADDR
0797  17            2510   2510 K1C	DEFB	17H	;DEL
0798  1D            2511   2511 K1D	DEFB	1DH	;RELA
0799  15            2512   2512 K1E	DEFB	15H	;SBR
079A  11            2513   2513 K1F	DEFB	11H	;-
079B  14            2514   2514 K20	DEFB	14H	;DATA
079C  10            2515   2515 K21	DEFB	10H	;+
079D  16            2516   2516 K22	DEFB	16H	;INS
079E  1C            2517   2517 K23	DEFB	1CH	;MOVE
                    2518   2518 ;
079F  00            2519   2519 HELLO	DEFB	000H		;' '
07A0  BD            2520   2520 	DEFB	0BDH		;'O'
07A1  85            2521   2521 	DEFB	085H		;'L'
07A2  85            2522   2522 	DEFB	085H		;'L'
07A3  8F            2523   2523 	DEFB	08FH		;'E'
07A4  37            2524   2524 	DEFB	037H		;'H'
07A5  00            2525   2525 BLANK	DEFB	000H		;' '
07A6  00            2526   2526 	DEFB	000H		;' '
07A7  00            2527   2527 	DEFB	000H		;' '
07A8  00            2528   2528 	DEFB	000H		;' '
07A9  00            2529   2529 ERR_	DEFB	000H		;' '
07AA  00            2530   2530 	DEFB	000H		;' '
07AB  03            2531   2531 	DEFB	003H		;'R'
07AC  03            2532   2532 	DEFB	003H		;'R'
07AD  8F            2533   2533 	DEFB	08FH		;'E'
07AE  02            2534   2534 	DEFB	002H		;'-'
07AF  1F            2535   2535 SYS_SP	DEFB	01FH		;'P'
07B0  AE            2536   2536 	DEFB	0AEH		;'S'
07B1  02            2537   2537 	DEFB	002H		;'-'
07B2  AE            2538   2538 	DEFB	0AEH		;'S'
07B3  B6            2539   2539 	DEFB	0B6H		;'Y'
07B4  AE            2540   2540 	DEFB	0AEH		;'S'
07B5  1F            2541   2541 ERR_SP	DEFB	01FH		;'P'
07B6  AE            2542   2542 	DEFB	0AEH		;'S'
07B7  02            2543   2543 	DEFB	002H		;'-'
07B8  03            2544   2544 	DEFB	003H		;'R'
07B9  03            2545   2545 	DEFB	003H		;'R'
07BA  8F            2546   2546 	DEFB	08FH		;'E'
07BB  00            2547   2547 	DEFB	000H		;' '
07BC  AE            2548   2548 STEPTAB	DEFB	0AEH		;'S'
07BD  8F            2549   2549 	DEFB	08FH		;'E'
07BE  B3            2550   2550 	DEFB	0B3H		;'D'
07BF  00            2551   2551 	DEFB	000H		;' '
07C0  AE            2552   2552 	DEFB	0AEH		;'S'
07C1  B3            2553   2553 	DEFB	0B3H		;'D'
07C2  00            2554   2554 	DEFB	000H		;' '
07C3  00            2555   2555 	DEFB	000H		;' '
07C4  0F            2556   2556 	DEFB	00FH		;'F'
07C5  AE            2557   2557 	DEFB	0AEH		;'S'
07C6  8F            2558   2558 	DEFB	08FH		;'E'
07C7  00            2559   2559 	DEFB	000H		;' '
07C8  0F            2560   2560 	DEFB	00FH		;'F'
07C9  00            2561   2561 	DEFB	000H		;' '
07CA  00            2562   2562 REG_	DEFB	000H		;' '
07CB  00            2563   2563 	DEFB	000H		;' '
07CC  02            2564   2564 	DEFB	002H		;'-'
07CD  BE            2565   2565 	DEFB	0BEH		;'G'
07CE  8F            2566   2566 	DEFB	08FH		;'E'
07CF  03            2567   2567 	DEFB	003H		;'R'
07D0  0F 3F         2568   2568 RGTAB	DEFW	03F0FH		;'AF'
07D2  8D A7         2569   2569 	DEFW	0A78DH		;'BC'
07D4  8F B3         2570   2570 	DEFW	0B38FH		;'DE'
07D6  85 37         2571   2571 	DEFW	03785H		;'HL'
07D8  4F 3F         2572   2572 	DEFW	03F4FH		;'AF.'
07DA  CD A7         2573   2573 	DEFW	0A7CDH		;'BC.'
07DC  CF B3         2574   2574 	DEFW	0B3CFH		;'DE.'
07DE  C5 37         2575   2575 	DEFW	037C5H		;'HL.'
07E0  07 30         2576   2576 	DEFW	03007H		;'IX'
07E2  B6 30         2577   2577 	DEFW	030B6H		;'IY'
07E4  1F AE         2578   2578 	DEFW	0AE1FH		;'SP'
07E6  0F 30         2579   2579 	DEFW	0300FH		;'IF'
07E8  37 0F         2580   2580 	DEFW	00F37H		;'FH'
07EA  85 0F         2581   2581 	DEFW	00F85H		;'FL'
07EC  77 0F         2582   2582 	DEFW	00F77H		;'FH.'
07EE  C5 0F         2583   2583 	DEFW	00FC5H		;'FL.'
07F0  BD            2584   2584 SEGTAB	DEFB	0BDH		;'0'
07F1  30            2585   2585 	DEFB	030H		;'1'
07F2  9B            2586   2586 	DEFB	09BH		;'2'
07F3  BA            2587   2587 	DEFB	0BAH		;'3'
07F4  36            2588   2588 	DEFB	036H		;'4'
07F5  AE            2589   2589 	DEFB	0AEH		;'5'
07F6  AF            2590   2590 	DEFB	0AFH		;'6'
07F7  38            2591   2591 	DEFB	038H		;'7'
07F8  BF            2592   2592 	DEFB	0BFH		;'8'
07F9  BE            2593   2593 	DEFB	0BEH		;'9'
07FA  3F            2594   2594 	DEFB	03FH		;'A'
07FB  A7            2595   2595 	DEFB	0A7H		;'B'
07FC  8D            2596   2596 	DEFB	08DH		;'C'
07FD  B3            2597   2597 	DEFB	0B3H		;'D'
07FE  8F            2598   2598 	DEFB	08FH		;'E'
07FF  0F            2599   2599 	DEFB	00FH		;'F'
                    2600   2600 ;
                    2601   2601 ;***********************************************************
                    2602   2602 ;SYSTEM RAM AREA
                    2603   2603 	ORG	0FF9FH
FF9F                2604   2604 USERSTK	DEFS	16
                    2605   2605 
                    2606   2606 	ORG	0FFAFH
                    2607   2607 SYSSTK
FFAF                2608   2608 STEPBF	DEFS	7
FFB6                2609   2609 DISPBF	DEFS	6
                    2610   2610 
                    2611   2611 REGBF
FFBC                2612   2612 USERAF	DEFS	2
FFBE                2613   2613 USERBC	DEFS	2
FFC0                2614   2614 USERDE	DEFS	2
FFC2                2615   2615 USERHL	DEFS	2
FFC4                2616   2616 UAFP	DEFS	2
FFC6                2617   2617 UBCP	DEFS	2
FFC8                2618   2618 UDEP	DEFS	2
FFCA                2619   2619 UHLP	DEFS	2
FFCC                2620   2620 USERIX	DEFS	2
FFCE                2621   2621 USERIY	DEFS	2
FFD0                2622   2622 USERSP	DEFS	2
FFD2                2623   2623 USERIF	DEFS	2
FFD4                2624   2624 FLAGH	DEFS	2
FFD6                2625   2625 FLAGL	DEFS	2
FFD8                2626   2626 FLAGHP	DEFS	2
FFDA                2627   2627 FLAGLP	DEFS	2
FFDC                2628   2628 USERPC	DEFS	2
FFDE                2629   2629 ADSAVE	DEFS	2		;Contains addr being displayed now.
FFE0                2630   2630 BRAD	DEFS	2		;Break point address
FFE2                2631   2631 BRDA	DEFS	1		;Data of break point address
FFE3                2632   2632 STMINOR	DEFS	1		;Minor state
FFE4                2633   2633 STATE	DEFS	1		;State
FFE5                2634   2634 POWERUP	DEFS	1		;Power-up initialization
FFE6                2635   2635 TEST	DEFS	1		;Flag, bit 0 -- set when function or
                    2636   2636 				;subfunction key is hit. Bit 7 --
                    2637   2637 				;set when illegal key is entered.
FFE7                2638   2638 ATEMP	DEFS	1		;Temporary storage
FFE8                2639   2639 HLTEMP	DEFS	2		;Temporary storage
FFEA                2640   2640 TEMP	DEFS	4		;See comments on routine GDA.
FFEE                2641   2641 IM1AD	DEFS	2		;Contains addr of Opcode 'FF' service
                    2642   2642 				;routine. (RST 38H, mode 1 int, etc)
FFF0                2643   2643 BEEPSET	DEFS	1		;Default value is 55H
FFF1                2644   2644 FBEEP	DEFS	1		;Beep frequency
FFF2                2645   2645 TBEEP	DEFS	2		;Time duration of beep
FFF4                2646   2646 	END

RST00    0000	KIN      0000	SEG7     0001	ZERO_1K  0002	
DIGIT    0002	P8255    0003	ONE_1K   0004	ONE_2K   0004	
ZERO_2K  0008	F2KHZ    001F	PREPC    0021	RST28    0028	
MPERIOD  002A	RST30    0030	RESET1   0032	RST38    0038	
CONT28   003E	F1KHZ    0041	RESET2   0054	NMI      0066	
RGSAVE   0074	SETIF    00A4	PWCODE   00A5	COLDEL   00C9	
SETST0   00D0	BRRST0   00D4	MAIN     00DE	KEYEXEC  00E9	
KHEX     0111	BR1      0115	KINC     011B	KDEC     0120	
KGO      0125	KSTEP    012A	KDATA    0135	TESTRG   013E	
KSBR     0147	KINS     015D	SKIPH1   0183	DOMV     0187	
KDEL     0196	SKIPH2   01B8	KPC      01C2	KCBR     01CC	
KREG     01D6	KADDR    01DE	KRL      01E2	KMV      01E2	
KRT      01E8	KWT      01E8	HFIX     01EC	HDA      01EF	
HAD      0202	HRGFIX   0212	HRGAD    0212	HRT      0220	
HMV      0220	HWT      0220	HRL      0220	HRGDA    0230	
IRGFIX   023D	IFIX     023D	IAD      0240	IDA      0240	
IWT      024B	IRL      024B	IRT      024B	IMV      024B	
ISTEP    0258	IRGAD    025C	IRGDA    025C	IRGNA    0267	
DRGFIX   026B	DFIX     026B	DAD      026E	DDA      026E	
DRT      0279	DWT      0279	DMV      0279	DRL      0279	
DSTEP    0286	DRGAD    028A	DRGDA    028A	DRGNA    0295	
GRGAD    0299	GRGDA    0299	GFIX     0299	GRGFIX   0299	
GDA      029C	GAD      029C	PREOUT   02A3	EIDI     02B2	
GMV      02E4	MVUP     0300	GRL      0306	ENDFUN   031C	
GWT      0324	ENDTAPE  034D	ERROR    0353	GRT      035A	
LEAD     0360	LEAD1    0367	LEAD2    0371	FILEDP   038A	
BRANCH   03B0	IGNORE   03BB	INI      03C1	INI1     03C7	
INI2     03C9	INI4     03D8	CLRBR    03DE	TESTM    03E5	
PRECL1   03EE	PRECL2   03FA	MEMDP1   0402	MEMDP2   040B	
SAV12    0412	BRTEST   0421	SETPT1   0433	SETPT    0434	
STEPDP   043A	LOCSTBF  0455	LOCSTNA  045F	REGDP8   0473	
REGDP9   0477	RGSTIN   0479	LOCPT    04A5	RGNADP   04AE	
LOCRGBF  04BB	LOCRG    04BE	FCONV    04C4	FLAGX    04D6	
FCONV1   04DA	FCONV2   04F9	DECODE   0518	DRL4     051A	
ENCODE   0523	ERL4     0525	SUM1     052D	SUM      0531	
SUMCAL   0532	GETPTR   053A	GETP     053D	TAPEIN   054D	
TLOOP    054F	GETBYTE  055A	BLOOP    055F	GETBIT   056B	
COUNT    056F	SHORTP   057E	TERR     0587	PERIOD   058C	
LOOPH    058F	LOOPL    0599	TAPEOUT  05A7	OUTBYTE  05B1	
OLOOP    05B7	OUTBIT   05C4	OUT0     05C9	OUT1     05D2	
BITEND   05D9	TONE1K   05DE	TONE2K   05E2	TONE     05E4	
SQWAVE   05EA	RAMCHK   05F6	SCAN     05FE	SCPRE    060B	
SCNX     060D	SCLOOP   0618	KEYMAP   061D	SCAN1    0624	
KCOL     062D	KROW     0647	NOKEY    064D	ADDRDP   0665	
DATADP   0671	HEX7SG   0678	HEX7     0689	RAMTEST  0694	
RAMT     069A	TNEXT    06A0	ROMTEST  06A6	SUMOK    06B2	
INI3     06B3	BEEP     06CB	NOTONE   06DD	KSUBFUN  0737	
KFUN     0741	HTAB     074B	ITAB     0757	DTAB     0763	
GTAB     076F	KEYTAB   077B	K0       077B	K1       077C	
K2       077D	K3       077E	K4       077F	K5       0780	
K6       0781	K7       0782	K8       0783	K9       0784	
K0A      0785	K0B      0786	K0C      0787	K0D      0788	
K0E      0789	K0F      078A	K10      078B	K11      078C	
K12      078D	K13      078E	K14      078F	K15      0790	
K16      0791	K17      0792	K18      0793	K19      0794	
K1A      0795	K1B      0796	K1C      0797	K1D      0798	
K1E      0799	K1F      079A	K20      079B	K21      079C	
K22      079D	K23      079E	HELLO    079F	BLANK    07A5	
ERR_     07A9	SYS_SP   07AF	ERR_SP   07B5	STEPTAB  07BC	
REG_     07CA	RGTAB    07D0	SEGTAB   07F0	USERSTK  FF9F	
STEPBF   FFAF	SYSSTK   FFAF	DISPBF   FFB6	USERAF   FFBC	
REGBF    FFBC	USERBC   FFBE	USERDE   FFC0	USERHL   FFC2	
UAFP     FFC4	UBCP     FFC6	UDEP     FFC8	UHLP     FFCA	
USERIX   FFCC	USERIY   FFCE	USERSP   FFD0	USERIF   FFD2	
FLAGH    FFD4	FLAGL    FFD6	FLAGHP   FFD8	FLAGLP   FFDA	
USERPC   FFDC	ADSAVE   FFDE	BRAD     FFE0	BRDA     FFE2	
STMINOR  FFE3	STATE    FFE4	POWERUP  FFE5	TEST     FFE6	
ATEMP    FFE7	HLTEMP   FFE8	TEMP     FFEA	IM1AD    FFEE	
BEEPSET  FFF0	FBEEP    FFF1	TBEEP    FFF2	